0:00:00.000,0:00:07.500
In addition to inheritance
(i.e., the kind of generalization/specialization

0:00:07.500,0:00:13.770
we've looked at so far), there are
other, further relationships between classes in UML.

0:00:13.770,0:00:19.650
Ultimately, these are then relationships that
are also reflected at the object level

0:00:20.160,0:00:25.620
We will look at the
following three types of relationships here.

0:00:25.620,0:00:32.550
These are by no means
all that are present in UML.

0:00:32.550,0:00:36.270
So there's still
dependency, usage relationships, genericity,

0:00:36.270,0:00:37.710

parameterization.

0:00:37.710,0:00:41.040
But those are the three
that we're going to look at.

0:00:41.040,0:00:46.890
While inheritance is explicitly seen
only in class diagrams (while in

0:00:46.890,0:00:52.920
the object diagram inheritance no
longer exists as a drawn connection

0:00:52.920,0:00:56.910
somehow), association, aggregation, composition
will actually be explicitly

0:00:56.910,0:01:03.420
represented in both class
diagrams and associated object diagrams.

0:01:03.420,0:01:14.850
These three types of relationships are
different in strength, so to speak.

0:01:14.850,0:01:21.780
So ultimately, association is the weakest
form of these three types of connections.

0:01:21.780,0:01:25.680
Aggregation is in a
certain sense a special association.

0:01:25.680,0:01:28.290
And composition as the
strongest kind of relation

0:01:28.290,0:01:32.580
here is again
a more special aggregation.

0:01:32.580,0:01:38.970
That's why it makes sense that we look
at these three types of relationships in order.

0:01:38.970,0:01:41.850
And in fact, in this
video, I'm just going to talk

0:01:41.850,0:01:48.090
about association and related
modeling aspects for now.

0:01:48.090,0:01:53.010
In particular, also about annotations that you can
still add to diagrams when you have associations.

0:01:54.360,0:01:59.250
And later, in a separate video,
we will talk about aggregation and composition.

0:01:59.250,0:02:07.770
Where some of the aspects of association
continue to occur, but more are added.

0:02:10.320,0:02:12.900
So we'll start with
the weakest relationship, association.

0:02:13.620,0:02:16.500
It's actually so weak
that it's very broadly defined.

0:02:16.500,0:02:19.230
So you talk about
an association between two classes.

0:02:19.230,0:02:23.970
It's always about two classes:
abstractly now class A, class B.

0:02:23.970,0:02:29.010
And they are associated (or: there is
an association between them), if there is

0:02:29.010,0:02:33.630
somehow a semantic connection between these
classes, which one can name meaningfully.

0:02:33.630,0:02:35.280
So if you
can't think of a

0:02:35.280,0:02:37.740
meaningful name, then there's no
content relation between these classes.

0:02:37.740,0:02:42.120
And this relation, this
connection, is not hierarchical.

0:02:42.120,0:02:46.710
So first of all a rather
vague concept, as it is written here.

0:02:47.700,0:02:54.360
This "not hierarchical" aspect is
relevant, because if anything is hierarchical,

0:02:54.360,0:02:58.170
then it is most likely either
an inheritance (so hierarchical in the

0:02:58.170,0:03:03.510
sense of belonging; in
the sense of specialization/generalization;

0:03:03.510,0:03:06.780
belonging of objects of one
class also to the other class),

0:03:10.230,0:03:14.580
or it will be aggregation or
composition (in the sense of hierarchical

0:03:14.580,0:03:20.040
part-whole relationships, but as I
said, this will concern us later).

0:03:20.040,0:03:22.470
So
ultimately:

0:03:22.470,0:03:27.630
Association, still very general, simply expresses
that objects of one class (perhaps A)

0:03:27.630,0:03:32.340
need a connection to certain
objects of the other class

0:03:32.340,0:03:38.670
for their functionality (at least for
some part of what they exist for).

0:03:38.670,0:03:46.320
So A objects are supposed to
do something that B objects are also

0:03:46.320,0:03:48.420
useful for, or perhaps can
be called upon to help with.

0:03:51.930,0:03:59.370
And if that is sufficiently important for
the relationship, the connection to exist, that it

0:03:59.370,0:04:04.170
should be stored persistently (i.e. not
fleetingly relevant only briefly in the

0:04:04.170,0:04:09.870
course of the system,
but actually a persistent/permanently

0:04:09.870,0:04:13.320
stored connection should exist
between these objects), then

0:04:13.320,0:04:15.480
it makes sense to
express that by an association.

0:04:15.480,0:04:18.900
And actually in
an implementation of an

0:04:18.900,0:04:25.830
object-oriented system such a connection
would be made by the

0:04:25.830,0:04:34.110
fact that for example objects of the one
class refer to objects of the other class.

0:04:34.110,0:04:38.820
So usually by one of
the classes having an attribute

0:04:38.820,0:04:42.420
whose type is
the other class.

0:04:43.800,0:04:46.500
Then objects of the
other class can be accessed.

0:04:46.500,0:04:56.340
Suppose there is an attribute in class A
whose type is class B, then yes, in every

0:04:56.340,0:05:02.250
object of class A there is something stored that
refers to a B. This will be the case.

0:05:02.250,0:05:05.760
However, it will be the case
(that's why this is emphasized again)

0:05:05.760,0:05:10.260
that this special type of attributes will just
then no longer be entered into the classes.

0:05:10.260,0:05:14.220
Because you have another graphical
means for the associations, which is

0:05:14.220,0:05:18.630
more memorable than always
writing attributes in there.

0:05:18.630,0:05:21.780
We will not
enter these so-called reference

0:05:22.410,0:05:25.488
attributes explicitly in
the class diagram.

0:05:25.488,0:05:28.140
Instead, we will have
a graphical means, simply

0:05:28.140,0:05:34.410
an edge in the graph,
which is representative for it:

0:05:34.410,0:05:41.400
That's this kind of relationship
that you can implement through attributes.

0:05:41.400,0:05:44.340
How is
that meant?

0:05:44.340,0:05:48.240
So instead of A and
B, let's do something more concrete.

0:05:48.960,0:05:51.090
Let one class be
a class of people.

0:05:51.090,0:05:53.610
Let the other class
be a class of cars.

0:05:53.610,0:05:57.150
And persons
can own cars.

0:05:57.150,0:06:04.620
And instead of entering "mycar"
in the attribute list for "person"

0:06:04.620,0:06:07.290
(as attribute, which then
has "car" as type),

0:06:07.290,0:06:13.500
you simply insert a graphical
connection between these two classes.

0:06:13.500,0:06:17.310
And then assign a meaningful
name, namely: it is about property.

0:06:17.310,0:06:19.830
So a person owns
a car, for example.

0:06:19.830,0:06:25.020
Whereby here is
not yet somehow specified

0:06:25.020,0:06:29.940
that each person has exactly one car
or always only one person owns a car.

0:06:29.940,0:06:34.070
As the relationship stands here,
it is deliberately not to be

0:06:34.070,0:06:38.210
excluded that a person can also
have several cars or own no car.

0:06:38.210,0:06:41.705
Or that a car can
be owned by several persons together.

0:06:41.705,0:06:46.580
The point here is only that this kind
of relationship between people and cars exists at all.

0:06:49.190,0:06:51.980
For that to happen, at least one side
would have to have a reference to the other.

0:06:51.980,0:06:56.180
For example, in the implementation, as
already indicated, there could be an attribute

0:06:56.180,0:06:59.900
at Person that stores a
car or even several cars.

0:06:59.900,0:07:04.190
But one does not enter this,
but uses this kind of representation to

0:07:04.190,0:07:06.530
make the
connection clear.

0:07:08.810,0:07:14.810
Because of this fact that here it
is not required that each car belongs to

0:07:14.810,0:07:17.750
only one person (each person owns
exactly one car), different expressions of this

0:07:17.750,0:07:22.550
relation are quite conceivable on
the level of concrete objects.

0:07:22.550,0:07:27.740
So it could be that there are
exactly three persons and three cars and exactly

0:07:27.740,0:07:31.670
person 1 is related to car 1, person
2 to car 2, person 3 to car 3.

0:07:31.670,0:07:34.130
That would be possible,
but it is not obligatory.

0:07:34.130,0:07:39.830
It could also be, for example,
that there are these three persons, but:

0:07:39.830,0:07:46.040
Person 1 owns both car 1 and car
2, and person 2 does not own any cars

0:07:46.040,0:07:52.460
at all and therefore does not appear in
this listing here, and person 3 owns car 3.

0:07:52.460,0:07:53.450
That would
be conceivable.

0:07:53.450,0:07:56.390
Or here
is another constellation:

0:07:56.390,0:08:03.200
Person 1 owns cars 1 and 2, person 2 owns
car 2, and person 3 may not exist at all.

0:08:03.200,0:08:07.310
Or there are still quite a few persons,
but they do not own any other cars.

0:08:12.440,0:08:16.910
What is not covered here,
however, and also not wanted:

0:08:17.570,0:08:23.780
For example, person 1
owns car 1 multiple times.

0:08:23.780,0:08:27.470
Person 1 can own several cars, but
it makes no sense to write down here:

0:08:27.470,0:08:31.220
Person 1, Car 1, and
then again Person 1, Car 1.

0:08:31.220,0:08:34.070
Why
is that?

0:08:34.700,0:08:41.840
Because these are quantities,
related to your math lecture.

0:08:41.840,0:08:43.160
Or in the case
of the Komedia students:

0:08:43.160,0:08:48.530
Referring to my math lecture
from last semester, these are relations.

0:08:48.530,0:08:55.160
Sets of pairs, or subsets of the
cross product of the set of all

0:08:55.160,0:08:58.250
people and the set of all cars
(which are reasonable interpretations of these classes).

0:08:58.250,0:09:00.380
Then these
are relations here.

0:09:00.380,0:09:03.815
That is,
one asks:

0:09:03.815,0:09:05.150
Does person 1
own car 1?

0:09:05.150,0:09:05.540
Yes
or no?

0:09:05.540,0:09:06.440
And
not:

0:09:06.440,0:09:09.350
Person 1 owns car 1, and
person 1 owns car 1 again.

0:09:09.350,0:09:11.930
That's why the set
representation makes sense here.

0:09:15.530,0:09:18.800
By the way, what I actually
wanted to say in the last example:

0:09:20.030,0:09:26.420
The point here was exactly that this is an
example where car 2 is owned by two people.

0:09:26.420,0:09:28.610
That was the point
in the last example here,

0:09:28.610,0:09:34.760
because there's no data here that
would restrict that in any way.

0:09:34.760,0:09:37.550
That can also be restricted,
we will also see shortly.

0:09:37.550,0:09:42.710
Then you would add numbers
to the ends of this association.

0:09:42.710,0:09:45.680
But in this case,
there is no further restriction.

0:09:45.680,0:09:49.820
Therefore, all these three and
many more forms are conceivable.

0:09:54.260,0:09:57.070
Now I
had said:

0:09:57.070,0:09:58.150
Person
owns car.

0:09:58.150,0:10:03.280
That seems to fit by chance,
because when I read it that way,

0:10:03.280,0:10:06.550
"Person owns car", it corresponds
exactly to a German sentence.

0:10:06.550,0:10:08.050
That is,
of course, coincidental.

0:10:08.050,0:10:11.920
I could also
have accidentally recorded the

0:10:11.920,0:10:15.910
two classes exactly
reversed in my graph.

0:10:15.910,0:10:17.380
That's why
it can be

0:10:17.380,0:10:26.050
important to actually give some direction
on this name for this association.

0:10:26.050,0:10:28.090
So who actually
owns who here?

0:10:28.090,0:10:38.770
This can be done by this black
triangular arrow at the name of the association.

0:10:38.770,0:10:41.350
So that is to be
seen as the reading direction:

0:10:41.350,0:10:43.150
"person
owns car".

0:10:43.150,0:10:47.860
If I wanted cars to own people,
I could still draw it that way,

0:10:47.860,0:10:54.520
but would just have this triangular
arrow pointing here (towards the person).

0:10:56.200,0:10:58.630
This is simply a
reading direction of the association.

0:10:59.530,0:11:02.980
Besides that, there is
the so-called navigation direction.

0:11:02.980,0:11:08.950
This is expressed by an arrow, and
this very special kind of arrow (clearly distinguishable

0:11:08.950,0:11:19.030
from the inheritance arrow), added
directly to the association line.

0:11:19.030,0:11:22.960
This expresses
the navigation direction.

0:11:22.960,0:11:27.160
And this describes, objects
of which class must

0:11:27.160,0:11:33.940
know their association partners and
therefore can call their methods.

0:11:33.940,0:11:38.110
This means
for example:

0:11:38.110,0:11:39.160
In the example
earlier I said it

0:11:39.160,0:11:45.670
could be that Person has an
attribute where a car is stored.

0:11:45.670,0:11:49.150
Then the person
can access the car.

0:11:49.150,0:11:53.050
Then that would correspond
to that navigation direction.

0:11:53.050,0:11:55.750
So for example, the
person knows their cars

0:11:56.320,0:11:58.810
because they have them
stored in an attribute.

0:11:58.810,0:12:06.930
If that would be as specified here, it would
mean the other way around (because there is no arrow

0:12:06.930,0:12:12.480
specified here in the other direction) that
the cars themselves do not know their owners.

0:12:12.480,0:12:15.660
So if modeled
as here, it

0:12:15.660,0:12:21.210
would mean that there is no
attribute with type Person in the car.

0:12:21.210,0:12:27.930
In a sense, these
navigation directions are a hint,

0:12:27.930,0:12:29.430
or an anticipation,
of the implementation.

0:12:29.430,0:12:33.810
There may also be no
navigation direction specified at all.

0:12:33.810,0:12:37.080
Then it is usually assumed that this
is either simply not important in the

0:12:37.080,0:12:44.190
current modeling state, or that the
association is navigable in both directions.

0:12:50.340,0:12:55.170
In the example as it is given here,
the idea would be, as just said, that it

0:12:55.170,0:13:00.750
is the Person objects that have references
to Auto objects, and not vice versa.

0:13:00.750,0:13:08.400
Since it should still be allowed that a
person can own several cars, it is of

0:13:08.400,0:13:11.700
course not enough to
store exactly one car here.

0:13:11.700,0:13:15.150
For each person, a set
of cars owned by that

0:13:15.150,0:13:17.250
person would have
to be stored.

0:13:18.630,0:13:23.730
For example it could be that for person 1
the set \{ car 1, car 2\} is stored,

0:13:23.730,0:13:27.420
for person 2 the empty set, and for
person 3 the set \{ car 3 \}.

0:13:27.420,0:13:35.310
That would then correspond to
this second mapping, this relation.

0:13:35.310,0:13:38.040
If we don't store this
as pairs, but for each

0:13:38.040,0:13:41.010
person simply store the
set of corresponding cars.

0:13:41.010,0:13:44.460
Person 1: car
1 and car 2.

0:13:44.460,0:13:46.110
Person 2
has no cars.

0:13:46.110,0:13:47.460
And person 3
has car 3.

0:13:47.460,0:13:55.500
We would then store that in
the three concrete person objects respectively.

0:14:01.750,0:14:06.070
In principle, the reading direction
and the navigation direction can differ.

0:14:06.070,0:14:11.740
So we model the person-owns-car
relationship, but still we don't

0:14:11.740,0:14:16.120
store cars with the person, but vice
versa with the cars with the persons.

0:14:16.120,0:14:21.190
This is somewhat unusual, and
in fact one would probably assume

0:14:21.190,0:14:22.570
that we have
not modeled well here.

0:14:22.570,0:14:26.560
So if reading
direction and navigation direction

0:14:26.560,0:14:31.360
are different, then maybe
this relationship is just misnamed.

0:14:31.360,0:14:38.410
If it really is the cars that remember which
persons they belong to, then instead of "owns" it should

0:14:38.410,0:14:42.490
say "belongs to" here, and the reading
direction should be in the other direction.

0:14:42.490,0:14:46.030
"Car belongs to person"
instead of "person owns car".

0:14:46.030,0:15:01.660
Conversely, if you just have the association
navigable in both directions, then the reading

0:15:01.660,0:15:08.740
direction is relevant mainly for understanding,
for the intention of the model.

0:15:08.740,0:15:12.550
While the implementation doesn't
care, because each person remembers

0:15:12.550,0:15:17.410
the cars anyway and the cars
also remember which person they belong to.

0:15:17.410,0:15:22.240
Then one decided to call this
association nevertheless "owns" and not "belongs".

0:15:22.240,0:15:28.630
And then one indicates just by this arrow,
in which direction here the possession is present.

0:15:28.630,0:15:37.780
If no navigation directions
are given at all, it's

0:15:37.780,0:15:41.170
either that maybe it's not
important at the time you're modeling.

0:15:41.170,0:15:42.580
Or there
are conventions.

0:15:42.580,0:15:48.070
For example, people on the team (the team
that is modeling together) have agreed and specified:

0:15:48.070,0:15:52.630
If no navigation directions are drawn,
then both should always be present.

0:15:52.630,0:15:56.920
I'm not going to
define that further here.

0:16:04.400,0:16:08.840
Those were these different kinds of
arrows that you can have in associations.

0:16:08.840,0:16:14.060
Then I mentioned earlier that you
can also have numbers at the associations.

0:16:14.060,0:16:17.240
These are
the so-called multiplicities.

0:16:17.240,0:16:22.700
And they are intervals in the
general case, so somehow two numbers.

0:16:22.700,0:16:24.800
As "from"/"to" this
is to be read.

0:16:24.800,0:16:27.740
There is also the special case
that there is only one number.

0:16:27.740,0:16:30.500
Then from this number
to this number is meant.

0:16:30.500,0:16:35.510
So it is not a real interval, but
only exactly one number, which comes into question.

0:16:36.950,0:16:40.550
It could look like this
(let's forget the navigation directions again,

0:16:40.550,0:16:42.080
they should not
be relevant right now):

0:16:42.080,0:16:44.240
We have the association,
we have a name, we

0:16:44.240,0:16:48.410
have a reading direction, and we
have multiplicities here in each case.

0:16:48.410,0:16:49.610
How is this
to be read?

0:16:50.840,0:16:58.220
As follows. This specification
at this end means:

0:16:58.220,0:17:01.190
Each person has
0 to 5 cars.

0:17:01.190,0:17:08.000
So there are between 0 and
5 cars associated with every single person.

0:17:08.000,0:17:11.300
And the 1
at this end means:

0:17:11.300,0:17:14.840
Each car belongs
to exactly one person.

0:17:14.840,0:17:19.250
So you have to remember
how around that is meant.

0:17:19.250,0:17:20.540
The 1
does not mean:

0:17:20.540,0:17:21.950
Every person
has a car.

0:17:21.950,0:17:24.830
But each car
belongs to one person.

0:17:24.830,0:17:28.850
And each person owns
up to five cars.

0:17:28.850,0:17:40.040
That means, here you can also see, that if the
persons should have an attribute with type car, this would

0:17:40.040,0:17:45.050
have to be a quantity attribute (because
up to five cars have to be stored).

0:17:45.050,0:17:49.490
So now
in programming language:

0:17:49.490,0:17:52.700
Depending on what you have already heard
in lectures and listen to in parallel,

0:17:53.240,0:17:56.630
you may have learned about
lists, sets, arrays as collections.

0:17:56.630,0:18:01.850
So here, one such collection would
have to be stored for each person

0:18:01.850,0:18:04.850
in order to be able
to remember up to five cars.

0:18:04.850,0:18:10.940
Conversely, if this association were to
be navigable in the other direction,

0:18:10.940,0:18:13.340
each car would need
to remember only one person.

0:18:13.340,0:18:19.580
So you wouldn't need a collection in that
direction, but you would need one in that direction.

0:18:29.410,0:18:30.880
Now you could
play around a bit.

0:18:30.880,0:18:34.660
You could make a 1
into a 2, for example.

0:18:34.660,0:18:35.680
What does
that mean here?

0:18:35.680,0:18:37.750
You have to
visualize it again:

0:18:37.750,0:18:38.680
What does
it mean?

0:18:38.680,0:18:43.930
It doesn't mean that two people always
own up to five cars exactly together.

0:18:43.930,0:18:46.030
That is not how
it is to be read.

0:18:46.030,0:18:48.295
What is to
be read is:

0:18:48.295,0:18:54.880
Each person owns up to five cars, and
each car is owned by exactly two people.

0:18:54.880,0:19:00.340
But it need not always be the
same consistent pairs of people for different cars.

0:19:00.340,0:19:09.700
So it would be quite possible that
person 1 owns cars 1 and 2,

0:19:09.700,0:19:21.280
person 2 also owns car 1, but car
2 has as second owner a person 3.

0:19:22.060,0:19:22.780
Then the
following applies here:

0:19:22.780,0:19:25.750
Each person has
up to five cars.

0:19:25.750,0:19:27.190
Person 1
has two cars.

0:19:27.190,0:19:28.300
Person 2
has one car.

0:19:28.300,0:19:29.770
Person 3
has one car.

0:19:29.770,0:19:33.460
And each car belongs
to exactly two persons.

0:19:33.460,0:19:34.083
Car 1 belongs to
person 1 and person 2.

0:19:34.083,0:19:39.610
Car 2 belongs to
person 1 and person 3.

0:19:39.610,0:19:43.960
But no car belongs to
exactly the same two people.

0:19:43.960,0:19:49.150
Again, you just have
to read it this way:

0:19:49.150,0:19:51.250
Each person has
up to five cars.

0:19:51.250,0:19:53.470
Each car belongs
to exactly two people.

0:19:53.470,0:20:00.520
But this can be mixed, so to speak,
who are the owners of two different cars each.

0:20:00.520,0:20:05.980
It would also be conceivable that there
are other people, but no other cars.

0:20:05.980,0:20:08.500
Because each person must
own up to five cars,

0:20:09.670,0:20:12.160
but that can be zero
cars for a given person.

0:20:12.790,0:20:15.280
What is not possible here,
of course, is that there are

0:20:15.280,0:20:17.020
more cars but
no more people.

0:20:17.830,0:20:21.610
Each additional car would have
to have at least two owners.

0:20:21.610,0:20:27.220
So it would be possible that
there are cars 3, 4 and

0:20:27.220,0:20:32.050
5, which all
belong to person 1.

0:20:32.050,0:20:35.020
But then they would also have
to be named in this set.

0:20:40.430,0:20:45.080
Generally there will be
such intervals at both ends.

0:20:45.080,0:20:55.520
So abstractly for names of classes A and B and respectively
their interval m to n, k to l, this would mean

0:20:55.520,0:21:08.090
that between m and n instances of A
can be associated to an instance of B.

0:21:08.090,0:21:13.010
So I take an instance of
class B, then i, between m

0:21:13.010,0:21:17.240
and n, can have
A instances as partners.

0:21:17.240,0:21:21.290
And vice versa, if you
have an instance of A,

0:21:21.290,0:21:27.950
then there must be j instances of B associated
with it, where j must lie between k and l.

0:21:27.950,0:21:32.930
The examples just now
were simply manifestations of this.

0:21:32.930,0:21:40.100
If you don't want to have an upper bound here
(i.e. you don't want to say "from m to n",

0:21:40.100,0:21:44.660
but always just "at least m"), then
you can write an asterisk for it.

0:21:44.660,0:21:46.700
This stands
for "infinite".

0:21:46.700,0:21:49.760
So if you want to
say "there must be at least

0:21:49.760,0:21:55.160
two, but there can be any
number", you write "2 to star".

0:21:55.160,0:21:59.840
Conversely, if one would have wanted to say,
"at most two", one would have written: "0..2".

0:21:59.840,0:22:02.780
The lower bound is
of course zero and for

0:22:02.780,0:22:07.100
the upper bound one inserts a
star as a sign for "infinite".

0:22:10.040,0:22:11.450
What if there
is nothing at all?

0:22:12.260,0:22:14.960
We also had the case,
before we introduced multiplicities, that

0:22:14.960,0:22:16.070
there is
nothing at all.

0:22:16.070,0:22:19.640
Then it is again
a matter of convention.

0:22:19.640,0:22:23.480
UML itself does not
specify a standard multiplicity.

0:22:23.480,0:22:28.280
In some books it says,
agreed as standard multiplicity, 1.

0:22:28.280,0:22:30.020
But UML itself
does not specify one.

0:22:30.020,0:22:35.150
For diagrams in the
lecture, in the exercise, also

0:22:35.150,0:22:42.170
in the exam, it will be the
case that if there is no specification, the

0:22:42.170,0:22:48.350
multiplicity "0..*" is taken as the
default, so simply no restriction at all.

0:22:48.350,0:22:52.050
Anything from zero to
any number could be possible.

0:22:52.050,0:22:59.910
This is true for associations, partly also
for aggregation, but not anymore for composition.

0:22:59.910,0:23:02.760
We'll get
to that later.

0:23:02.760,0:23:03.300
So
basically:

0:23:03.300,0:23:05.790
Association and Aggregation
use this convention.

0:23:05.790,0:23:15.450
Composition uses a different convention, which
we'll talk about in the corresponding video.

0:23:15.450,0:23:24.540
Before that, one more
way of representing associations.

0:23:24.540,0:23:34.680
Sometimes, instead of giving the connecting line a
name (like the "owns" just now), you give the

0:23:35.670,0:23:39.450
two ends of the
connecting line a name instead.

0:23:39.450,0:23:46.830
This is useful when, for
example, there are clearly distributed roles

0:23:46.830,0:23:51.660
taken by the two
ends of such an association.

0:23:51.660,0:23:59.640
Then it may be unnecessary
to name the association itself.

0:23:59.640,0:24:04.620
In the case of "owns", the two
roles could have been named "owner" and "possessed".

0:24:04.620,0:24:08.040
Then there would have been no need to
say that the relationship is one of possession.

0:24:08.040,0:24:09.412
Or here's
another example:

0:24:09.412,0:24:15.810
There are wholesalers, there are individual
retailers, and there are end customers.

0:24:16.920,0:24:18.957
In each case, relationships
in between, that is, associations.

0:24:18.957,0:24:21.720
In each of these
associations, there is a part

0:24:21.720,0:24:25.290
that has a seller role, and
a part that has a buyer role.

0:24:25.290,0:24:30.810
Between wholesaler and retailer, the wholesaler is
the seller and the retailer is the buyer.

0:24:30.810,0:24:36.150
Whereas between retailer and end customer, the retailer is
the seller and the end customer is the buyer.

0:24:36.150,0:24:39.150
So the retailer
participates in two associations

0:24:39.150,0:24:43.590
with different partners
in different roles.

0:24:43.590,0:24:51.380
And then just the association is
not named anymore, because the two roles,

0:24:51.380,0:24:56.510
which are at the ends, already
convey enough information about this association.

0:25:00.890,0:25:03.230
That much about associations.
