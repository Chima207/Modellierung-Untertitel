0:00:00.000,0:00:11.190
Im letzten Video hatte ich davon gesprochen, dass 
wir vor allem mit Diagrammen modellieren werden.

0:00:11.190,0:00:16.830
Und ich hatte auch schon erwähnt, dass das dann in 
der Regel irgendwie Graph-Strukturen sein werden.

0:00:16.830,0:00:21.420
Graphen kennen Sie mindestens intuitiv.

0:00:21.420,0:00:25.590
Vielleicht haben Sie die auch 
schon mal formaler mal betrachtet

0:00:25.590,0:00:27.510
im Schulunterricht Mathematik, zum Beispiel.

0:00:27.510,0:00:30.480
Also Graphen sind erst mal 
anschaulich netzartige Strukturen,

0:00:30.480,0:00:37.170
bestehend aus Knoten und Kanten, die 
zusammen einen Zusammenhang bilden.

0:00:38.430,0:00:40.890
Da gibt es verschiedene Arten von Graphen.

0:00:40.890,0:00:42.510
Hier ist einfach mal ein Beispiel angegeben.

0:00:42.510,0:00:44.400
Dieser ist zum Beispiel gerichtet, insofern,

0:00:44.400,0:00:48.150
als die Kanten jeweils ein Ende haben, 
das durch einen Pfeil markiert ist.

0:00:48.150,0:00:51.450
Es gibt auch Graphen, wo das irrelevant 
ist, wo man einfach nur die Verbindung hat,

0:00:51.450,0:00:53.400
ohne eine spezielle Richtung vorzugeben.

0:00:53.400,0:00:56.640
Es gibt die Möglichkeit, die 
hier nicht realisiert ist,

0:00:56.640,0:01:00.540
dass es zwischen den gleichen 
zwei Knoten mehrere Kanten gibt.

0:01:00.540,0:01:04.230
Weil es vielleicht verschiedene Wege geben soll, 
oder vielleicht einen Hinweg und einen Rückweg.

0:01:04.230,0:01:05.700
Das tritt hier jetzt nicht auf.

0:01:05.700,0:01:07.170
Das ist aber mathematisch erlaubt.

0:01:07.170,0:01:09.780
Wir können Knoten- und Kantenbeschriftungen haben.

0:01:09.780,0:01:13.410
Hier haben wir die Knoten mit Zahlen und 
die Kanten mit Buchstaben beschriftet.

0:01:13.410,0:01:17.550
Beides wäre allgemein optional 
oder könnte anders gestaltet sein.

0:01:17.550,0:01:22.230
Graphen können im Prinzip 
mathematisch gesehen unendlich sein.

0:01:22.230,0:01:25.320
Wir werden es in der Regel natürlich 
eher mit endlichen Graphen zu tun haben,

0:01:25.320,0:01:27.540
weil unsere Modelle endlich sein sollen.

0:01:27.540,0:01:30.480
Also, da gibt es verschiedene 
Spielarten von Graphen.

0:01:30.480,0:01:33.600
Aber sie haben alle diese Grundidee gemeinsam,

0:01:33.600,0:01:38.340
Sachverhalte auszudrücken durch 
Knoten und dazwischenliegende Kanten.

0:01:38.340,0:01:43.890
Und nicht überraschend können Graphen gut 
für die Modellierung eingesetzt werden.

0:01:43.890,0:01:47.670
Einerseits denkbar für die statische 
Modellierung, wenn es darum geht,

0:01:47.670,0:01:51.000
die Beschaffenheit eines Systems zu beschreiben.

0:01:51.000,0:01:55.560
Dann könnten zum Beispiel die Knoten für 
einzelne Komponenten des Systems stehen,

0:01:55.560,0:02:01.860
und die Beziehungen zwischen diesen Komponenten 
dann eben durch die Kanten dargestellt werden.

0:02:01.860,0:02:05.670
Oder für dynamische Modellierung 
könnte man sich vorstellen,

0:02:05.670,0:02:08.490
dass die Knoten einzelne Zustände sind.

0:02:08.490,0:02:15.360
Also jeweils die Ausprägung der Gesamtheit 
des Systems zu einem konkreten Zeitpunkt

0:02:15.360,0:02:20.520
wäre ein solcher Zustand (statt dass der 
gesamte Graph den Zustand repräsentiert).

0:02:20.520,0:02:25.830
Und die Kanten wären dann Übergänge/Transitionen 
zwischen einzelnen Zuständen des Systems.

0:02:25.830,0:02:30.030
Also beschreibend, zum Beispiel, wie 
das System sich zeitlich entwickelt.

0:02:30.030,0:02:33.600
Oder unter welchen Bedingungen, die vielleicht 
an diese Kanten drangeschrieben werden,

0:02:33.600,0:02:39.480
das System einen Zustandsübergang von einer 
speziellen Ausprägung zu einer anderen macht.

0:02:39.480,0:02:47.160
Das erst mal ganz allgemein für die 
Rolle, die Graphen haben könnten.

0:02:48.870,0:02:53.220
Dann werde ich jetzt ein Beispiel 
machen, was etwas artifiziell,

0:02:53.220,0:02:56.910
etwas weit hergeholt vielleicht erscheinen 
mag, insbesondere als Modellierungsbeispiel.

0:02:56.910,0:03:03.600
Es ist auch nichts irgendwie 
Informatisches, also kein Informatiksystem.

0:03:03.600,0:03:05.730
Und genaugenommen könnte man auch sagen:

0:03:05.730,0:03:06.780
Das ist einfach ein kleines Rätsel.

0:03:06.780,0:03:09.600
Ein kleines Puzzle, das manche von 
Ihnen vielleicht bereits kennen.

0:03:10.200,0:03:12.990
Eventuell aus dem Informatik-Vorkurs, 
da wird Ähnliches gemacht.

0:03:12.990,0:03:18.180
Vielleicht auch einfach aus anderen 
Kontexten, und sei es aus der Schule.

0:03:18.180,0:03:22.080
Ich mache es deswegen hier, weil es mir 
auf sehr naive Art und Weise erlaubt,

0:03:22.080,0:03:24.150
ein bisschen diesen Abstraktionsprozess zu zeigen.

0:03:24.150,0:03:29.520
Und einfach Notation zu finden für ein konkretes 
Problem, und das dann als Graph darzustellen.

0:03:29.520,0:03:33.750
Also Graphen ins Spiel zu bringen, 
um dieses Problem letztlich zu lösen.

0:03:34.470,0:03:36.960
Also Sie können sagen, es hat gar 
nicht so viel Modellierungsanteil.

0:03:36.960,0:03:42.330
Aber etwa die Übergangsgraphen, der 
eine, der jetzt hier vorkommen wird,

0:03:42.330,0:03:46.080
der wird schon anklingen an etwas, 
das wir später benutzen werden.

0:03:46.080,0:03:48.570
Sowohl bei Petrinetzen als auch 
bei UML-Zustandsdiagrammen.

0:03:48.570,0:03:52.980
Deswegen mache ich dieses Beispiel, 
nicht weil es jetzt wirklich ein so

0:03:52.980,0:03:55.290
realistisches Modellierungsproblem darstellt.

0:03:56.460,0:03:57.030
Also, was ist das Problem?

0:03:57.030,0:03:59.910
Wolf-Ziege-Kohlkopf, steht ja hier.

0:03:59.910,0:04:01.440
Also wir haben so eine Rätselwelt.

0:04:01.440,0:04:03.480
Es gibt den Farmer, der 
will einen Fluss überqueren.

0:04:04.110,0:04:10.230
Der hat diese drei Dinge bzw. Tiere 
(Wolf, Ziege und Kohlkopf) bei sich.

0:04:10.230,0:04:12.000
Er möchte über den Fluss, wie gesagt.

0:04:12.000,0:04:12.900
Dafür gibt es ein Boot.

0:04:12.900,0:04:16.710
In dem Boot ist aber nur Platz für zwei.

0:04:16.710,0:04:21.810
Also für den Farmer jeweils selber (denn die 
anderen drei, weder Wolf noch Ziege noch Kohlkopf,

0:04:21.810,0:04:28.110
können selber rudern; also muss der Farmer immer 
mit) und immer nur eines von seinen Besitztümern.

0:04:31.320,0:04:33.960
Also insbesondere auch nicht 
zwei von diesen Besitztümern.

0:04:33.960,0:04:37.740
Und das Problem ist jetzt, dass die Ziege gerne

0:04:37.740,0:04:38.575
den Kohlkopf fressen möchte, und der 
Wolf gerne die Ziege fressen möchte.

0:04:38.575,0:04:43.590
Also wenn der Farmer mit dem Kohlkopf 
über den Fluss fährt, dann wären

0:04:43.590,0:04:45.870
Wolf und Ziege allein und der 
Wolf würde die Ziege fressen.

0:04:47.820,0:04:52.050
Und da nur der Farmer rudern kann, 
und er das Boot entweder allein

0:04:52.050,0:04:55.860
oder mit einem Tier oder dem Kohlkopf 
überqueren kann, wäre jetzt die Frage:

0:04:56.460,0:04:59.130
Ist es für den Farmer möglich, 
den Fluss zu überqueren,

0:04:59.130,0:05:02.400
ohne dabei eins von seinen 
Besitztümern zu verlieren?

0:05:04.110,0:05:05.640
Was könnte man hier überhaupt modellieren wollen?

0:05:05.640,0:05:09.840
Naja, zum Beispiel die Akteure, die hier 
vorkommen, die das System ausmachen.

0:05:09.840,0:05:11.940
Beziehungen zwischen den Akteuren.

0:05:11.940,0:05:17.130
Vielleicht Start- und Zielzustand, und 
natürlich das Verhalten, das Vorgehen.

0:05:17.130,0:05:18.900
Was passieren kann.

0:05:18.900,0:05:22.500
Wie sich die Zustände entwickeln können, und 
wie man vielleicht vom Start zum Ziel kommt.

0:05:22.500,0:05:24.990
Also nicht Start und Ziel einfach 
nur links und rechts des Flusses.

0:05:24.990,0:05:27.270
Sondern tatsächlich, Start:

0:05:27.270,0:05:30.450
Der Farmer ist mit seinem 
Besitztum auf der einen Seite.

0:05:30.450,0:05:31.290
Und Ziel:

0:05:31.290,0:05:33.240
Der Farmer ist mit allen seinen 
Besitztümern auf der anderen Seite.

0:05:33.240,0:05:38.430
Also in gewissem Sinne ist es natürlich 
nicht unbedingt ein Modellierungsproblem,

0:05:38.430,0:05:43.890
sondern eher ein Weg, sich in einem Beispiel 
nochmal mehr mit Graphen bekannt zu machen.

0:05:44.730,0:05:46.890
So werde ich es zumindest benutzen.

0:05:46.890,0:05:49.500
Also, ganz naiv:

0:05:49.500,0:05:51.690
Erstes statisches Modell.

0:05:51.690,0:05:54.660
Wer sind die beteiligten Akteure und Objekte?

0:05:54.660,0:05:55.860
Genau diese vier.

0:05:55.860,0:05:58.470
Hier ist noch wenig Struktur, 
oder gar keine Struktur.

0:05:58.470,0:06:03.780
Das ist einfach eine Menge von vier 
Elementen, auch kein wirklicher Graph.

0:06:03.780,0:06:08.700
Naiv gesehen ist es auch ein Graph, der eben 
aus vier Knoten besteht und gar keiner Kante.

0:06:08.700,0:06:14.220
Aber das würde man jetzt nicht wirklich als einen 
Graph bezeichnen, weil man keine Netzstruktur hat.

0:06:14.220,0:06:17.670
Also das geht sicherlich besser, 
informativer insbesondere.

0:06:17.670,0:06:22.710
Man könnte die Beziehungen zwischen den 
einzelnen Akteuren/Objekten darstellen.

0:06:22.710,0:06:24.990
Also, fügen wir ein bisschen Struktur hinzu.

0:06:24.990,0:06:25.560
Da kann man sich fragen:

0:06:25.560,0:06:27.240
Was sind denn die Beziehungen, die relevant sind?

0:06:27.240,0:06:35.640
Und naja, aus der Rätsel-Beschreibung ergeben sich 
insbesondere zwei Beziehungen, die denkbar sind.

0:06:35.640,0:06:36.720
Einmal die Besitztums-Beziehung, also:

0:06:36.720,0:06:40.320
Der Farmer hat Wolf, Ziege und Kohlkopf.

0:06:40.320,0:06:45.000
Also hier ist "besitzt", auch wenn jetzt 
im Rätseltext nichts von "besitzt" stand.

0:06:45.000,0:06:48.120
Da stand was von "hat bei sich" und 
"sollen daher mit über den Fluss".

0:06:48.120,0:06:50.310
Das ist sozusagen die eine Beziehung.

0:06:50.310,0:06:52.260
Und dann gibt es diese Beziehungen,

0:06:52.260,0:06:55.350
diese Fressbeziehungen, die offenbar auch 
irgendwie relevant sind für das Rätsel.

0:06:55.350,0:06:57.900
Wir müssen wissen, wer wen frisst, 
damit wir entscheiden können,

0:06:57.900,0:07:00.600
welche Situationen sicher sind und welche nicht.

0:07:00.600,0:07:02.430
Also, wir wissen:

0:07:02.430,0:07:04.674
Wolf frisst Ziege.

0:07:04.674,0:07:06.180
Ziege frisst Kohlkopf.

0:07:06.180,0:07:10.620
Wir wissen, zum Glück, dass der 
Wolf nicht den Farmer fressen würde.

0:07:10.620,0:07:13.140
Selbst dann nicht, wenn er 
allein mit ihm im Boot wäre.

0:07:13.140,0:07:17.220
Und wir wissen auch, dass der 
Wolf nicht den Kohlkopf frisst.

0:07:17.220,0:07:21.180
Obwohl hier "frisst" und "frisst" steht, gilt 
nicht direkt, dass der Wolf den Kohlkopf frisst.

0:07:21.180,0:07:26.850
Das ist auch wichtig, sonst 
könnten wir das Rätsel nicht lösen.

0:07:26.850,0:07:29.220
Jetzt könnte man sich fragen:

0:07:29.220,0:07:30.510
Warum soll ich das hier überhaupt machen?

0:07:30.510,0:07:32.070
Um das Rätsel zu erfassen.

0:07:32.070,0:07:37.860
Aber vielleicht könnte auch ein Sinn der 
Modellierung hier sein, dass man vielleicht

0:07:37.860,0:07:43.440
dann auch Situationen beschreiben kann, auf die 
die Lösung dieses Problems übertragbar wäre.

0:07:43.440,0:07:47.460
Also hätte man andere Tiere, andere Akteure,

0:07:47.460,0:07:50.490
aber mit analogen oder nur leicht 
abweichenden Fressbeziehungen.

0:07:50.490,0:07:53.220
Da könnte man sich dann fragen:

0:07:53.220,0:07:54.540
Wie analog sind die beiden Situationen?

0:07:54.540,0:07:59.790
Kann man zum Beispiel eine Lösung für dieses 
Problem auch für ein ähnliches Problem übertragen?

0:07:59.790,0:08:04.150
Dann ist es nicht so wichtig, welches Bild hier 
ist, sondern die Beziehungen sind das Relevante.

0:08:04.150,0:08:08.470
Und deswegen ist es vielleicht interessant, 
das hier zu modellieren und festzuhalten.

0:08:10.750,0:08:11.740
Das wäre die statische Seite.

0:08:11.740,0:08:17.590
Immerhin ein bisschen irgendwie das Verbale 
aus der Problembeschreibung visualisiert.

0:08:17.590,0:08:20.800
Interessanter ist sicherlich 
der dynamische Anteil.

0:08:20.800,0:08:23.740
Da müssen wir also von den 
einzelnen Situationen reden.

0:08:23.740,0:08:27.070
Und sinnvoll ist, zunächst erst 
mal die Ausgangssituation vor

0:08:27.070,0:08:28.780
Überquerung des Flusses darzustellen.

0:08:28.780,0:08:32.740
Auch wieder erst mal naiv als Bild.

0:08:32.740,0:08:35.860
Hier in der Mitte sei der 
Fluss, hier sei das Boot.

0:08:35.860,0:08:38.560
Das steht zwar in der Problembeschreibung gar

0:08:38.560,0:08:43.150
nicht drin, dass das Boot sich zu 
Beginn links des Flusses befindet.

0:08:43.150,0:08:47.830
Aber wenn das Rätsel überhaupt lösbar sein 
soll, ist es sicherlich nachvollziehbar,

0:08:47.830,0:08:49.990
dass das Boot am Anfang da 
sein sollte, wo der Farmer ist.

0:08:49.990,0:08:54.670
Also wir haben uns entschlossen, 
das auch hier mit darzustellen.

0:08:54.670,0:08:58.150
Und wir wissen auch, dass alle 
vier Akteure am Anfang auf der

0:08:58.150,0:09:00.670
gleichen Seite sind, und zwar da, wo das Boot ist.

0:09:01.210,0:09:03.220
Damit das Rätsel überhaupt sinnvoll lösbar ist.

0:09:04.870,0:09:05.620
Was ist die Zielsituation?

0:09:05.620,0:09:08.500
Naja, die sieht halt so aus.

0:09:08.500,0:09:09.400
Der Fluss ist natürlich immer noch da.

0:09:10.060,0:09:15.100
Aber alle vier Akteure, und auch das 
Boot, sind am Ende auf der rechten Seite.

0:09:15.100,0:09:16.810
Genau genommen gilt auch hier:

0:09:16.810,0:09:20.410
Die Problembeschreibung verlangt gar 
nicht, dass das Boot am Ende rechts ist.

0:09:20.410,0:09:23.830
Der Problembeschreibung wäre 
das egal, wo das Boot ist.

0:09:23.830,0:09:29.290
Also auch eine Situation, wo 
diese vier Akteure rechts sind,

0:09:29.290,0:09:33.730
aber das Boot auf der linken Seite 
ist, wäre eine Lösung des Problems.

0:09:33.730,0:09:35.710
Aber mit ein bisschen Nachdenken kommt man darauf:

0:09:35.710,0:09:37.090
Das kann gar nicht passieren.

0:09:37.660,0:09:39.730
Also so eine Situation wird nicht erreichbar sein.

0:09:39.730,0:09:40.240
Deswegen können wir mal sagen:

0:09:40.240,0:09:42.940
Das muss das Ziel sein, anders geht es gar nicht.

0:09:45.700,0:09:50.380
Auch dass diese drei Akteure/Objekte 
am Ende auf der rechten Seite sind,

0:09:50.380,0:09:54.340
steht nicht explizit in der 
Problembeschreibung (im Rätseltext) drin.

0:09:54.340,0:09:59.680
Da stand aber, dass der Farmer die bei sich 
hat und gern den Fluss überqueren möchte.

0:09:59.680,0:10:03.310
Und daraus schließen wir, 
dass er natürlich mit seinen

0:10:03.310,0:10:07.960
drei Besitztümern auf der rechten 
Seite des Flusses ankommen will.

0:10:07.960,0:10:10.780
Deswegen ist es gerechtfertigt, das als die

0:10:10.780,0:10:16.240
einzige und zu erreichende 
Zielsituation anzusehen.

0:10:18.010,0:10:19.780
Das wären also die beiden Situationen.

0:10:19.780,0:10:21.820
Das wäre in gewissem Sinne immer 
noch statische Modellierung.

0:10:21.820,0:10:25.570
Und dynamisch wäre jetzt, wenn 
wir uns damit beschäftigen,

0:10:25.570,0:10:28.615
wie wir denn zwischen den Situationen 
hin- und herkommen können.

0:10:28.615,0:10:29.200
Wir können ja nicht sagen:

0:10:29.200,0:10:30.220
Wir kommen von hier nach da.

0:10:30.220,0:10:31.120
Offensichtlich nicht.

0:10:31.120,0:10:32.920
Das ist nicht legal, einfach zu sagen:

0:10:32.920,0:10:37.030
Ja, die vier Akteure überqueren 
mit dem Boot den Fluss.

0:10:37.030,0:10:39.100
Dann hätten wir das Problem nicht erfasst.

0:10:39.100,0:10:44.200
Stattdessen müssen wir also 
sozusagen feinkörniger einzelne

0:10:44.200,0:10:46.060
Übergänge beschreiben, die wirklich erlaubt sind.

0:10:46.060,0:10:47.920
Zum Beispiel könnten wir sagen:

0:10:47.920,0:10:55.120
Im ersten Schritt möge der Farmer mit dem 
Wolf in dem Boot den Fluss überqueren.

0:10:55.120,0:10:58.510
Das sollen die Pfeile hier andeuten.

0:11:00.580,0:11:01.171
Was wird dann passieren?

0:11:01.171,0:11:06.310
Da sieht das hinterher hoffentlich so aus.

0:11:06.310,0:11:09.130
Der erster Schritt ist vorbei.

0:11:09.130,0:11:13.360
Wir würden uns jetzt den zweiten 
Schritt überlegen wollen.

0:11:13.360,0:11:13.510
Also:

0:11:13.510,0:11:17.590
Was könnte der Farmer als nächstes machen, 
nachdem er den Wolf nach drüben gebracht hat?

0:11:17.590,0:11:22.990
Er kann gar nichts machen, denn der 
zweite Schritt passiert unmittelbar:

0:11:22.990,0:11:24.790
Nämlich die Ziege frisst den Kohlkopf.

0:11:25.870,0:11:26.800
Dieses Fressen passiert sofort,

0:11:26.800,0:11:36.350
ohne Möglichkeit des Eingreifens des 
Farmers irgendwie durch eine Aktion.

0:11:36.350,0:11:42.320
Das kann man aus dem Rätseltext auch 
ablesen, wenn man den wohlwollend liest,

0:11:42.320,0:11:46.460
dass dieses Fressen so passiert, dass 
der Farmer das nicht verhindern kann.

0:11:46.460,0:11:47.900
Der kann nicht rüber rufen und sagen:

0:11:47.900,0:11:48.650
"Lass mal."

0:11:48.650,0:11:52.250
Dann wäre das Rätsel uninteressant, wenn er 
die Ziege aus der Entfernung aufhalten könnte.

0:11:52.250,0:11:54.890
Er kann das nur, wenn er da ist, 
wo die Ziege und der Kohlkopf sind.

0:11:54.890,0:12:02.480
Unser eigentliches Ziel ist natürlich, 
das jetzt klarer aufzuschreiben,

0:12:02.480,0:12:03.890
statt immer nur solche Bilder zu machen.

0:12:05.450,0:12:07.160
Dafür wollen wir gleich Graphen benutzen.

0:12:07.160,0:12:12.530
Und natürlich tun wir das eben, 
um eine Notation zu haben,

0:12:12.530,0:12:15.950
die über diese immer wieder 
zu malenden Bilder hinausgeht.

0:12:15.950,0:12:21.800
Dafür unterscheidet man beim Modellieren, 
letztlich auch beim Programmieren (also auch

0:12:21.800,0:12:24.800
in anderen Vorlesungen werden Ihnen diese 
Begriffe begegnen): Syntax und Semantik.

0:12:24.800,0:12:30.200
Also die Syntax, die Symbole, die 
Formen (bei uns oft Diagramme),

0:12:30.200,0:12:33.440
die man für die Darstellung 
des Modells nutzen darf.

0:12:33.440,0:12:36.290
Also in diesem naiven Beispiel eben 
wären das natürlich diese Bilder,

0:12:36.290,0:12:41.360
die wir gesehen haben: die blaue Fläche 
für den Fluss, das Bild der Ziege etc.

0:12:41.360,0:12:47.180
Und die Semantik wäre, was sich hinter diesen 
Diagrammen, Formen, Symbolen denn verbirgt.

0:12:47.180,0:12:50.450
Also die blaue Fläche ist tatsächlich der Fluss.

0:12:50.450,0:12:52.520
Er trennt die beiden Seiten.

0:12:52.520,0:12:57.380
Er hat irgendeinen Effekt, da zum 
Beispiel der Fluss verhindert,

0:12:57.380,0:13:02.480
dass der Farmer Einfluss darauf nimmt, was 
sich auf der anderen Seite befindet, etc.

0:13:04.310,0:13:08.270
Und die Pfeile, die wir hier gesehen 
haben, das wären eben auch Symbole.

0:13:08.270,0:13:14.150
Die seien dafür da, die eigentliche Aktion 
auszudrücken, also den Schritt des Überquerens.

0:13:14.150,0:13:18.380
Das wäre dann die Semantik dieser Pfeile, usw.

0:13:18.890,0:13:27.290
Hier war das natürlich alles sehr intuitiv, 
sodass man das vielleicht gar nicht als notwendig

0:13:27.290,0:13:29.900
erachtet, das so auszuarbeiten, 
was Syntax und Semantik sind.

0:13:29.900,0:13:31.430
Im Allgemeinen aber natürlich schon.

0:13:34.140,0:13:35.430
Das ist nicht immer so eindeutig.

0:13:35.430,0:13:40.170
Also zu einer Syntax gibt es nicht 
immer eine zugehörige Semantik.

0:13:40.170,0:13:46.200
In unserem Beispiel eben können wir einerseits 
sagen, die ist recht vage, die Semantik.

0:13:46.200,0:13:48.750
Andererseits ist das Problem so 
einfach, dass man schon durch

0:13:48.750,0:13:51.030
Draufschauen eine Idee davon hat, was da passiert.

0:13:51.030,0:13:56.430
Im Allgemeinen würde man das 
natürlich irgendwie festhalten wollen.

0:13:57.330,0:14:00.030
Wünschenswert im Allgemeinen ist es, dass

0:14:00.030,0:14:03.060
diese Bedeutung von Symbolen 
und Formen sehr präzise ist.

0:14:03.060,0:14:06.300
Damit auch verschiedene Modellierer, oder 
verschiedene Konsumenten des Modells,

0:14:06.300,0:14:09.870
das jeweils verstehen können, 
und zwar auf die gleiche Weise.

0:14:09.870,0:14:13.440
Dafür ist eine gemeinsame 
Sprache/Notation sinnvoll,

0:14:13.440,0:14:17.610
gemeinsame visuelle Beschreibungsformen, 
um Missverständnisse zu vermeiden.

0:14:17.610,0:14:25.890
Und tatsächlich bilden Graphen für viele

0:14:25.890,0:14:28.260
Zusammenhänge solch eine 
mögliche Sprache/Notation.

0:14:28.260,0:14:33.540
Deswegen bilden sie die Grundlage vieler in 
Diagrammform gestalteter Modellierungstechniken.

0:14:33.540,0:14:38.085
Dabei kann so eine Festlegung natürlich 
genau für ein konkretes Beispiel passieren.

0:14:38.085,0:14:40.350
Also:
Wir modellieren dieses Wolf-Ziege-Kohlkopf-Problem

0:14:42.480,0:14:44.760
und halten dafür fest, was die 
Notation und Symbole sein sollen.

0:14:44.760,0:14:48.840
Noch nützlicher in der Praxis ist,

0:14:48.840,0:14:54.060
wenn man im Modellierungsansatz auf eine 
einheitliche Weise beschreiben kann.

0:14:54.060,0:14:55.290
Petrinetze werden so etwas sein.

0:14:55.290,0:14:59.130
Das wird ein Modellierungsansatz sein, 
der eine feste Syntax und Semantik hat.

0:14:59.130,0:15:01.785
Diese sind also unabhängig vom 
konkreten System, das man modelliert.

0:15:01.785,0:15:05.550
Das kann man allgemein erklären, zum Beispiel 
in einem Buch beschreiben, und dann können ganz

0:15:05.550,0:15:10.980
verschiedene Probleme, Systeme, Modelle mit 
diesem Ansatz verfolgt und beschrieben werden.

0:15:12.240,0:15:16.650
Dann sind Syntax und Semantik über 
mehrere Modelle hinweg vereinheitlicht.

0:15:16.650,0:15:20.760
Ansonsten nochmal zur Erinnerung:

0:15:20.760,0:15:25.770
Natürlich sind Graphen nicht die einzige 
Möglichkeit, Einheitlichkeit herzustellen.

0:15:26.310,0:15:27.480
Auch die Mathematik macht das.

0:15:27.480,0:15:37.170
Also mit textuellen Formeln, mit Logik, 
könnte man natürlich auch Dinge spezifizieren,

0:15:37.170,0:15:40.920
modellieren, und hätte auch eine 
gemeinsame formale Grundlage.

0:15:40.920,0:15:43.740
Aber hier werden wir eben 
vorwiegend mit Graphen arbeiten.

0:15:43.740,0:15:50.760
Jetzt sah das eben noch nicht immer 
unbedingt nach einem Graphen aus.

0:15:50.760,0:15:52.770
Aber natürlich verbergen sich hinter unserer

0:15:52.770,0:15:56.100
bisherigen Darstellung für 
dieses Problem auch Graphen.

0:15:58.350,0:16:01.560
Also, gehen wir nochmal zurück 
auf die statische Modellierung.

0:16:01.560,0:16:04.650
Da hatten wir dieses Bild gehabt, 
mit den Pfeilen dazwischen.

0:16:04.650,0:16:05.805
Das war natürlich ein Graph.

0:16:05.805,0:16:07.410
Also diese Beziehungen zwischen Farmer,

0:16:07.410,0:16:12.480
Wolf, Ziege, Kohlkopf könnten wir 
mit diesem Graphen darstellen.

0:16:12.480,0:16:17.640
Die Kanten sind gelabelt mit den 
Beziehungen zwischen den Knoten,

0:16:17.640,0:16:21.420
die mit den Namen der Akteure gelabelt sind.

0:16:21.420,0:16:31.770
Das ist einfach das gleiche Bild wie hier, nur 
eben jetzt diese Fotos ersetzt durch Symbole.

0:16:33.090,0:16:38.040
Völlig naheliegend und klar, 
nur ein wenig abstrakter.

0:16:38.040,0:16:47.580
Und natürlich auch hier wieder, zum Beispiel: 
kein Übergang von Wolf zu Kohlkopf mit "frisst".

0:16:47.580,0:16:51.600
Das drückt die gleiche Tatsache aus wie vorher.

0:16:54.090,0:16:56.100
Das wäre für die statische Modellierung.

0:16:56.100,0:16:58.080
Was ist mit der dynamischen Modellierung?

0:16:58.080,0:16:59.250
Da hatte ich auch schon gesagt:

0:16:59.250,0:17:04.590
Dann würde man die Knoten als Zustände ansehen 
und die Kanten als Übergänge dazwischen.

0:17:04.590,0:17:11.550
Also so ein bisschen wie der Schritt von hier 
nach hier, der durch die Pfeile suggeriert ist.

0:17:12.210,0:17:15.180
Man würde dann tatsächlich zwei 
explizite Knoten in dem Graphen haben,

0:17:15.180,0:17:18.390
und dieser Pfeil würde von dem 
Zustand zu dem Zustand gehen.

0:17:21.950,0:17:26.120
Klassische Vertreter davon, also Graphen 
zu benutzen für dynamische Modellierung,

0:17:26.120,0:17:27.830
sind sogenannte flache Zustandsdiagramme.

0:17:27.830,0:17:29.330
Oft auch Transitionssysteme genannt.

0:17:29.330,0:17:32.270
Oft auch einfach nur Zustandsdiagramme genannt.

0:17:32.270,0:17:36.740
In der Vorlesung sage ich immer 
explizit "flache Zustandsdiagramme",

0:17:36.740,0:17:39.410
bis wir zu UML-Zustandsdiagrammen kommen.

0:17:39.410,0:17:42.170
Um den Unterschied klarzumachen,

0:17:42.170,0:17:45.380
dass nämlich UML-Zustandsdiagramme nicht 
flach sind, in einem gewissen Sinne.

0:17:46.220,0:17:49.550
Die haben mehr Struktur als einfach 
nur Knoten und Kanten dazwischen.

0:17:49.550,0:17:54.080
Deswegen, wann immer wir nur diese 
Knoten-Kanten-Struktur haben,

0:17:54.080,0:17:55.760
werde ich von flachen Zustandsdiagrammen reden.

0:17:56.300,0:17:58.280
Ich hoffe, dass das auch in 
der Übungsaufgabensammlung

0:17:58.280,0:18:01.280
mittlerweile einheitlich so gehandhabt ist.

0:18:06.890,0:18:08.960
Was ist so ein flaches Zustandsdiagramm?

0:18:08.960,0:18:15.170
Das ist einfach tatsächlich ein gerichteter, 
eventuell kantenbeschrifteter Graph.

0:18:15.170,0:18:16.610
Also die Knoten sind Zustände.

0:18:16.610,0:18:19.100
Die werden in der Regel irgendeinen Namen 
haben, eine Beschreibung, eine Bezeichnung.

0:18:19.100,0:18:23.450
Der Graph soll gerichtet sein, in dem 
Sinne, dass es Pfeile gibt dazwischen.

0:18:23.450,0:18:25.430
Auch wenn das hier noch 
statische Modellierung war.

0:18:25.430,0:18:29.720
Aber die Kanten, die wir 
haben, sollen gerichtet sein.

0:18:29.720,0:18:31.310
Die könnten auch beschriftet sein.

0:18:31.310,0:18:36.350
Zum Beispiel könnte an den Übergängen 
irgendwie dran stehen, welche Aktion

0:18:36.350,0:18:38.570
jeweils dafür verantwortlich 
ist, dass der Zustand wechselt.

0:18:38.570,0:18:42.470
Das könnte aber optional sein.

0:18:42.470,0:18:45.050
Vielleicht reicht es, die 
Zustände zu haben als Knotenmenge.

0:18:45.050,0:18:46.970
Und die Übergänge müssen da sein,

0:18:46.970,0:18:50.840
aber müssen nicht noch extra ausgezeichnet 
sein, mit irgendeiner Beschriftung da dran.

0:18:52.040,0:18:55.700
Außerdem will man in der Regel 
einen Startzustand hervorheben,

0:18:55.700,0:18:58.340
meist durch eine eingehende Pfeilspitze.

0:18:58.340,0:19:02.840
Und manchmal bezeichnen wir auch noch einen 
oder mehrere ausgezeichnete Endzustände.

0:19:02.840,0:19:08.210
Dann will man ausdrücken, von wo nach wo man 
in dem Zustandsdiagramm gerne kommen möchte.

0:19:13.750,0:19:16.510
Machen wir das für unser kleines Problem.

0:19:16.510,0:19:20.740
Also ein flaches Zustandsdiagramm für 
unser Wolf-Ziege-Kohlkopf-Problem.

0:19:20.740,0:19:25.300
Dann haben wir auf jeden 
Fall unseren Startzustand.

0:19:25.300,0:19:26.650
Das ist ein bisschen kleingedruckt hier.

0:19:26.650,0:19:29.830
Ich hoffe, Sie können dem trotzdem folgen,

0:19:29.830,0:19:32.380
auch wenn ich das jetzt nicht 
irgendwie an der Tafel groß entwickle.

0:19:33.250,0:19:38.500
Gemeint ist hier jeweils (das ist gleich 
auch auf einer Folie nochmal aufgeschrieben):

0:19:40.000,0:19:43.480
Der Zustand, der ist abgekürzt 
durch die vier Akteure.

0:19:43.480,0:19:48.175
Und hier gibt es so einen senkrechten 
Strich, und der drückt den Fluss aus.

0:19:48.175,0:19:50.620
Also was hier dieser erste 
Zustand symbolisieren soll:

0:19:50.620,0:19:54.220
Farmer, Wolf, Ziege, Kohlkopf 
sind links des Flusses.

0:19:54.220,0:19:56.140
Das ist ein möglicher Zustand,

0:19:56.140,0:20:00.640
und zwar der Startzustand (deswegen 
durch diese Pfeilspitze ausgezeichnet).

0:20:03.460,0:20:04.990
Und dann kann man sich überlegen:

0:20:04.990,0:20:06.205
Was kann denn passieren?

0:20:06.205,0:20:14.080
Wir hatten vorhin diesen einen Übergang 
festgehalten, wo wir aus genau dieser

0:20:14.080,0:20:19.120
Situation (die wir gerade auch als Startzustand 
identifiziert haben) zu diesem Zustand kommen.

0:20:19.120,0:20:20.980
Das wäre der Zustand:

0:20:20.980,0:20:31.180
Senkrechter Strich, links davon Ziege und 
Kohlkopf, rechts davon Farmer und Wolf.

0:20:31.180,0:20:40.080
Also das wäre aufgeschrieben ZK|FW.

0:20:40.080,0:20:44.340
Haben wir das auch in unserem Graphen?

0:20:44.340,0:20:50.100
Ja, also hier erst mal:

0:20:50.100,0:20:51.390
Wir haben auch einen Zielzustand.

0:20:51.390,0:20:53.850
Wir wissen aber noch nicht, wie wir da hinkommen.

0:20:53.850,0:20:55.740
Irgendwie müssen wir Schritte machen.

0:20:55.740,0:20:56.850
Was könnte der erste Schritt sein?

0:20:56.850,0:21:02.340
Zum Beispiel könnte der Farmer mit 
der Ziege über den Fluss fahren.

0:21:02.340,0:21:04.980
Das hier ist gerade nicht der Zustand, 
den ich Ihnen gerade gezeigt habe.

0:21:08.250,0:21:12.960
Das wäre der Zustand, den wir vorhin 
schon als Problem identifiziert haben.

0:21:12.960,0:21:15.720
Wo der Farmer mit dem Wolf den Fluss überquert.

0:21:15.720,0:21:16.500
Dann hätten wir diesen Zustand.

0:21:16.500,0:21:22.080
Das ist aber ein sofortiger Misserfolgszustand, 
weil dann die Ziege den Kohlkopf fressen wird.

0:21:23.100,0:21:26.850
Und vorher, in irgendeiner Reihenfolge, habe ich 
hier vielleicht schon andere Sachen ausprobiert.

0:21:26.850,0:21:30.120
Also hier muss ich nichts weiter ausprobieren, 
aber ich hatte mich hier zum Beispiel entschieden:

0:21:30.120,0:21:34.110
Ja, der Farmer möge mit der 
Ziege den Fluss überqueren.

0:21:34.110,0:21:37.350
Das ist kein Misserfolgszustand, denn 
der Wolf wird den Kohlkopf nicht fressen.

0:21:37.350,0:21:39.360
Das wäre eine Möglichkeit.

0:21:39.360,0:21:40.500
Und dann könnte man sich überlegen:

0:21:40.500,0:21:41.610
Was kann als nächstes passieren?

0:21:41.610,0:21:43.710
Jetzt kam hier:

0:21:43.710,0:21:44.730
Der Farmer könnte zurückfahren.

0:21:44.730,0:21:45.870
Dann bleibt die Ziege allein.

0:21:45.870,0:21:52.650
Der Farmer könnte dann mit 
dem Wolf den Fluss überqueren.

0:21:53.340,0:22:02.580
Also für jeden dieser Pfeile, für die Übergänge, 
steckt dahinter ein möglicher Schritt.

0:22:02.580,0:22:04.710
Es gibt auch so Beobachtungen wie:

0:22:04.710,0:22:07.350
Außer wenn man einen Schritt gemacht hat,

0:22:07.350,0:22:10.440
der zu einem Misserfolgszustand führt, 
kann man Schritte immer auch umdrehen.

0:22:10.440,0:22:13.080
Dann gibt es jetzt zwei Pfeile.

0:22:13.080,0:22:18.180
Der Farmer kann mit der Ziege den 
Fluss überqueren, dann wäre er hier.

0:22:18.180,0:22:20.340
Dann wäre das der Zustand.

0:22:20.340,0:22:21.150
Es geht aber auch umgekehrt.

0:22:22.350,0:22:24.480
Das heißt, überall wo wir einen 
Pfeil haben, können wir ihn umdrehen.

0:22:24.480,0:22:27.120
Außer bei den Misserfolgszuständen, 
denn aus denen kommt man nicht heraus.

0:22:27.690,0:22:35.970
Die sind fatal, im wahrsten Sinne des Wortes 
tödlich für irgendeines der Besitztümer.

0:22:41.840,0:22:43.340
Jetzt will ich das, wie gesagt,

0:22:43.340,0:22:46.910
tatsächlich hier jetzt nicht Schritt 
für Schritt erklären oder entwickeln.

0:22:46.910,0:22:51.800
Aber man kann durch Ausprobieren 
und Verfolgen aller Möglichkeiten

0:22:51.800,0:23:00.830
diesen Graphen verkomplettieren und kommt 
irgendwann zu einem vollständigen Bild.

0:23:01.760,0:23:02.720
Das ist noch nicht vollständig.

0:23:02.720,0:23:03.370
Was fehlt hier noch?

0:23:03.370,0:23:07.400
Wir haben diese ganzen Doppelübergänge.
Wir haben Misserfolgszustände.

0:23:07.400,0:23:09.500
Aus dem Erfolgszustand kann man 
natürlich einen dummen Fehler

0:23:09.500,0:23:12.440
machen und es doch noch sozusagen verderben.

0:23:12.440,0:23:14.411
Das wird der Farmer wahrscheinlich nicht wollen.

0:23:14.411,0:23:15.170
Also wir würden wahrscheinlich sagen:

0:23:15.170,0:23:18.470
Wenn der Farmer diesen Zustand 
erreicht, dann lässt er es gut sein.

0:23:18.470,0:23:20.840
Und fährt nicht noch irgendwie durch die Gegend.

0:23:20.840,0:23:22.820
Aber rein formal könnte man sagen:

0:23:22.820,0:23:25.730
Man kann aus dem Erfolgszustand 
immer noch in den Misserfolg geraten.

0:23:25.730,0:23:26.960
Aber irgendwas fehlt hier noch.

0:23:26.960,0:23:29.330
Und das liegt daran, das kann man sich überlegen:

0:23:29.330,0:23:31.850
Eigentlich muss der Graph symmetrisch sein.

0:23:31.850,0:23:35.570
Es ist vollkommen willkürlich, zu sagen, 
dass der Farmer von links nach rechts möchte.

0:23:35.570,0:23:39.470
Man hätte genauso gut sagen können, der Farmer 
ist am Anfang rechts und möchte nach links.

0:23:39.470,0:23:42.950
Dann hätte man also diesen Graphen 
auch so entwickeln können müssen,

0:23:42.950,0:23:45.140
dass man hier beginnt und hier endet.

0:23:45.140,0:23:46.336
Und dafür aber muss der Graph 
völlig symmetrisch sein.

0:23:46.336,0:23:50.990
Man muss das also von oben 
nach unten kippen können.

0:23:50.990,0:23:54.815
Und dann fehlen noch 
Übergänge, wie man hier sieht.

0:23:54.815,0:23:56.240
Diese Übergänge fehlen dann noch.

0:24:03.100,0:24:06.820
Dann ist der Graph sowohl 
links-rechts-symmetrisch,

0:24:06.820,0:24:11.906
da er sich an dieser Achse spiegelt, und man 
kann offenbar auch von oben nach unten spiegeln.

0:24:11.906,0:24:15.806
Dann sieht er zwar aufgemalt nicht exakt 
symmetrisch aus, ist es aber in der Tat.

0:24:15.806,0:24:28.870
Also wenn man nur die Zusammenhänge erfasst 
und nicht, wie genau die Pfeile gemalt wurden.

0:24:30.940,0:24:38.020
Nämlich diese beiden Übergänge entsprechen den 
Übergängen von hier nach hier und hier nach hier.

0:24:39.640,0:24:41.125
Dann ist der Graph tatsächlich symmetrisch.

0:24:41.125,0:24:47.800
Das ist letztlich bedingt dadurch, dass 
man intuitiv die Fressbeziehungen umdrehen

0:24:47.800,0:24:52.270
könnte und die Rollen von Wolf 
und Kohlkopf vertauschen könnte.

0:24:52.270,0:24:56.440
Dann ist die Symmetrie nach dieser Achse.

0:24:56.440,0:24:59.470
Und die Symmetrie nach dieser 
Achse ist, dass es eigentlich

0:24:59.470,0:25:02.200
egal wäre, ob man von links nach rechts oder 
von rechts nach links möchte als Farmer.

0:25:02.200,0:25:08.050
Die Symmetrie bezüglich Anfang und Ende.

0:25:11.410,0:25:13.630
Also, die Notation war hier:

0:25:13.630,0:25:15.100
Der senkrechte Strich steht für den Fluss,

0:25:15.100,0:25:19.510
links und rechts befinden sich die 
Akteure, deren Reihenfolge ist egal.

0:25:19.510,0:25:24.010
Also ich würde keinen Unterschied machen 
zwischen den Zuständen WKFZ und KWFZ.

0:25:24.010,0:25:29.770
Deswegen einfach immer die Buchstaben sortiert 
auf eine bestimmte konsistente Art und Weise.

0:25:29.770,0:25:33.550
Weil es egal wäre, in welcher Reihenfolge 
die da stehen auf einer Seite des Flusses.

0:25:33.550,0:25:36.610
Das Boot gebe ich auch gar nicht an.

0:25:36.610,0:25:39.790
Das taucht auf dem Bild vorhin noch auf, aber 
eigentlich brauche ich das gar nicht angeben,

0:25:39.790,0:25:42.340
denn es wird sowieso immer 
da sein, wo der Farmer ist.

0:25:42.340,0:25:45.910
Deswegen taucht es in der Notation nicht mehr auf.

0:25:45.910,0:25:49.000
Die Übergänge hatte ich hier nicht beschriftet.

0:25:49.000,0:25:51.970
Die hätte man natürlich noch beschriften 
können, indem man immer die Aktion dranschreibt.

0:25:51.970,0:25:52.480
Also etwa:

0:25:52.480,0:25:54.070
"Der Farmer bringt die Ziege über den Fluss."

0:25:54.070,0:25:56.110
Irgendeinen Namen dafür 
ausdenken, ein kurzes Label,

0:25:56.110,0:25:59.230
und das an die entsprechenden Pfeile schreiben.

0:25:59.230,0:26:03.370
Das habe ich hier zur 
Übersichtlichkeit jetzt nicht getan.

0:26:03.370,0:26:07.510
Die eckigen roten Zustände hatte 
ich für Misserfolge genutzt.

0:26:07.510,0:26:09.820
Also etwa wenn die Ziege den Kohlkopf frisst.

0:26:09.820,0:26:14.470
Solche Aktionen haben in gewissem 
Sinne Priorität vor Überfahrten,

0:26:14.470,0:26:19.750
weswegen es eben aus Misserfolgsknoten 
keine Rückfahrt-Kanten gibt.

0:26:20.470,0:26:25.200
Ich kann hier nicht diesen Pfeil umdrehen, 
denn in dem Fall ist das ein Misserfolg.

0:26:25.200,0:26:27.430
Die Ziege frisst den Kohlkopf 
und dann geht nichts mehr.

0:26:27.430,0:26:36.340
Deswegen wurden eben Kanten, die aus 
solchen Zuständen herausführen, weggelassen.

0:26:36.340,0:26:42.820
Weil sie gar nicht erlaubt sind 
gemäß der Semantik des Problems.

0:26:44.170,0:26:47.440
Und diese doppelblaue Ellipse, die hatte ich

0:26:47.440,0:26:52.570
als den gewünschten Zielzustand 
schon ganz am Anfang markiert.

0:26:54.880,0:26:57.580
Also in einer gewissen Weise 
könnte man hier sagen, das ist die

0:26:57.580,0:27:00.040
Syntax-/Semantikbeschreibung für diesen Graphen.

0:27:00.040,0:27:04.060
Im Allgemeinen sind solche 
Beschriftungen nicht redundant.

0:27:04.060,0:27:06.820
Das ist wirklich eine Entscheidung, 
die ich hier getroffen habe.

0:27:06.820,0:27:10.300
Einfach damit die Darstellung 
nicht noch komplizierter wird.

0:27:10.300,0:27:11.560
Im Allgemeinen kann es schon sehr

0:27:11.560,0:27:14.950
wichtig sein, dass man auch die 
Beschriftungen an den Kanten hat.

0:27:18.550,0:27:23.410
Auch die Farben könnte man letztlich natürlich 
noch als gesonderte Beschriftungen ansehen.

0:27:23.410,0:27:27.700
Die Tatsache, dass ein Knoten rot oder 
blau ist, könnte man auch ansehen als:

0:27:27.700,0:27:31.840
Das ist noch ein weiteres 
Label, das auf dem Knoten liegt.

0:27:34.330,0:27:36.910
Was kann man an dem konkreten Graphen noch sehen?

0:27:36.910,0:27:42.700
Es gibt hier mehrere Wege 
vom Start- zum Zielzustand.

0:27:42.700,0:27:46.600
Eine Lösung des Problems wäre 
eben genau ein irgendwie den

0:27:46.600,0:27:49.150
Pfeilen folgender Weg durch diesen Graphen.

0:27:49.150,0:27:55.330
Schon allein wegen dieses Teils des Graphen, 
wo man hier immer den Pfeilen folgen könnte,

0:27:55.330,0:27:59.140
stellt sich heraus, dass es unendlich viele 
Lösungen gibt, die auch beliebig lang werden.

0:27:59.140,0:28:03.850
Wenn der Farmer irgendwie immer sozusagen 
sinnlose Aktionen in diesem Kreis durchführt,

0:28:03.850,0:28:07.030
bevor er sich dann mal entscheidet, 
wirklich in Richtung Ziel zu gehen.

0:28:07.030,0:28:13.490
Daran sieht man, dass es zwar ein endlicher Graph 
ist, es aber unendlich viele Wege darin gibt.

0:28:13.490,0:28:18.980
Und zwar unendlich viele, 
beliebig lange, erfolgreiche Wege.

0:28:18.980,0:28:24.470
Die zwei kürzesten enthalten 
jeweils sieben Übergänge und

0:28:24.470,0:28:26.600
das sind die interessanten 
für die Lösung des Problems.

0:28:31.400,0:28:37.160
Schon dieser Graph ist jetzt 
nicht wirklich klein gewesen.

0:28:37.160,0:28:42.620
Aber für interessante tatsächliche Systeme 
können solche flachen Zustandsdiagramme

0:28:42.620,0:28:48.080
selbst für relativ einfache Systeme 
sehr schnell erstaunlich groß werden.

0:28:48.080,0:28:49.940
Das nennt man Zustandsexplosion.

0:28:49.940,0:28:52.610
Das bedeutet einfach, dass selbst 
mit wenigen Zutaten es dennoch sehr

0:28:52.610,0:28:55.490
viele mögliche Zustände gibt und 
entsprechend komplizierte Graphen.

0:28:55.490,0:28:58.880
Und das kann man mit flachen 
Zustandsdiagrammen nicht wirklich

0:28:58.880,0:29:03.200
vermeiden, weil sie eben alle Zustände 
und alle Übergänge explizit darstellen.

0:29:03.200,0:29:07.880
Das wird später eine Motivation für die schon 
erwähnten UML-Zustandsdiagramme sein, die

0:29:07.880,0:29:13.370
Extrastruktur haben, und deswegen diese 
Explosion ein Stück weit vermeiden können.

0:29:18.830,0:29:22.070
In unserem Problem, manchmal 
auch in anderen Problemen,

0:29:22.070,0:29:27.620
kann man etwa Symmetrie ausnutzen, um des Problems 
der Zustandsexplosion ein wenig Herr zu werden.

0:29:27.620,0:29:30.620
Im Allgemeinen braucht man einfach 
mächtigere Modellierungsmittel.

0:29:30.620,0:29:34.850
Aber wir wollen erst mal 
einfach mit Graphen arbeiten.
