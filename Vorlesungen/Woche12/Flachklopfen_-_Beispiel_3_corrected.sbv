0:00:02.830,0:00:06.850
So as a final
example, another UML state diagram

0:00:06.850,0:00:09.910
to be translated into
a flat state diagram.

0:00:09.910,0:00:12.430
What do we have
in front of us now?

0:00:12.430,0:00:17.920
Here again we have no regions, so
it's a bit like example 1, still without

0:00:17.920,0:00:23.200
regions, but this time with
a history node (namely that one).

0:00:23.200,0:00:27.760
So like
here no regions,

0:00:29.230,0:00:33.640
but a hierarchical state and history
(in the specific case, flat history).

0:00:36.220,0:00:38.530
So what we don't have
as an example is a

0:00:38.530,0:00:41.680
combination where both
regions and history occur.

0:00:41.680,0:00:44.830
And in fact, we
won't have that interacting occur

0:00:44.830,0:00:50.410
in our flat-knock examples
that you're supposed to solve.

0:00:51.820,0:00:54.160
We have the simple case with no
regions and no history, the intermediate case

0:00:54.160,0:00:58.240
with regions and no history, and we
have the case with no regions but history.

0:00:58.240,0:00:59.890
These are our
examples 1, 2,

0:00:59.890,0:01:05.380
3, and you should be able
to do the same for analogous examples.

0:01:09.490,0:01:12.280
What will be the approach
to deal with the example?

0:01:13.330,0:01:14.860
First, again as
in the simple case,

0:01:14.860,0:01:21.070
that is, as in example 1 (that is,
what was here as an approach, as a strategy):

0:01:21.070,0:01:23.680
Keep the
simple states,

0:01:25.180,0:01:29.950
translate things that occur at the
edge of these hierarchical states appropriately,

0:01:29.950,0:01:34.150
keep the entries and exits, other transitions
(that do not somehow affect the edge,

0:01:35.620,0:01:42.220
but for example such transitions outside
or such transitions inside) simple, and keep

0:01:42.220,0:01:49.090
the outer start state also as
the start state (while the inner start

0:01:49.090,0:01:53.950
states can disappear and are at
most used to translate entries correctly).

0:01:56.440,0:01:59.110
This will also
be the basic strategy.

0:01:59.110,0:02:02.230
Of course, having this
history node changes something.

0:02:02.230,0:02:04.240
And what has
to change there?

0:02:04.240,0:02:08.290
Well, if we leave
such a hierarchical state that

0:02:08.290,0:02:15.610
has a history node in it, then we
know that if we're going to come back here

0:02:17.050,0:02:22.960
later, and in particular we're
going to do that via a

0:02:22.960,0:02:28.825
history entry, then we would need to know
where we were last in that hierarchical state.

0:02:28.825,0:02:33.100
So if we leave the state via e, we
still have to know later when we return whether

0:02:33.100,0:02:38.230
we left this hierarchical state from C
or from D. How can we remember that?

0:02:38.230,0:02:39.940
How can
we remember this?

0:02:42.280,0:02:44.830
Only in states of
the flat state diagram.

0:02:44.830,0:02:49.630
I.e., we have to
remember, if we go to

0:02:49.630,0:02:52.600
A, whether we
are in A now

0:02:52.600,0:02:55.090
and have been in C last, or whether we
are in A and have been in D last.

0:02:56.800,0:03:00.040
I.e., we will
create copies of A.

0:03:00.040,0:03:02.080
One for the
fact that we know:

0:03:02.080,0:03:04.450
We are now in A,
but previously we were in C.

0:03:04.450,0:03:06.216
And analogously
one for:

0:03:06.216,0:03:09.190
We are in A
and were previously in D.

0:03:09.190,0:03:13.330
That is, because of this history node
(in order to be able to return to

0:03:13.330,0:03:18.130
the appropriate place later), we must make copies
of the outer states and also of their transitions.

0:03:18.130,0:03:21.430
To be able to remember
what the last inner sub-state

0:03:21.430,0:03:22.690
was and
return to it.

0:03:23.860,0:03:30.340
To be able to use that
information when we have a re-entry

0:03:32.800,0:03:40.105
into that hierarchical
state via history.

0:03:40.105,0:03:42.280
That's our approach now,
a little more complex.

0:03:43.510,0:03:44.230
What does that mean
specifically in the example?

0:03:44.230,0:03:46.120

Again:

0:03:46.120,0:03:49.750
This is what
we're dealing with.

0:03:51.430,0:03:54.970
And first, in the simple
case, we want to keep

0:03:55.780,0:03:59.410
things outside (the
simple states) essentially.

0:03:59.410,0:04:02.365
That first leads to the fact
that we can start like this.

0:04:02.365,0:04:06.220
That we keep the basic states A,
B, C, D, X and already know that

0:04:06.220,0:04:08.518
we're not really going
to need that starting state.

0:04:08.518,0:04:09.310
We can
remove it later.

0:04:09.310,0:04:09.910
That was
an inner one.

0:04:09.910,0:04:11.770
And the outer
one we're going to

0:04:11.770,0:04:16.840
use to also have it as the
starting state for the whole flat state diagram.

0:04:18.250,0:04:20.310
That's what
we're seeing here.

0:04:20.310,0:04:21.700
We're also already
seeing, as a reminder:

0:04:21.700,0:04:27.370
In the simple case, we can
keep transitions that don't have anything

0:04:27.370,0:04:30.940
to do with entering or
exiting to/from a hierarchical state.

0:04:32.920,0:04:35.890
That's sort of the
part where we say:

0:04:37.450,0:04:41.140
Other transitions, which therefore do not have anything
to do with entries or exits, are kept.

0:04:41.140,0:04:48.490
That means in this concrete case that
we can keep these and these transitions

0:04:48.490,0:04:55.270
because they don't somehow touch
the edge of a hierarchical state.

0:05:05.320,0:05:05.440
Then we
are here.

0:05:05.440,0:05:07.240
The outer starting state, we can
also just take advantage of that.

0:05:09.220,0:05:12.160
And we don't need
this one in here.

0:05:13.840,0:05:17.800
It's only needed if we
have an entry into this

0:05:20.650,0:05:24.970
part via a standard entry,
which would be this one.

0:05:30.130,0:05:36.280
So because that was the
starting state of this inner complex,

0:05:36.280,0:05:40.990
and there was a standard entry
there from X, we get this transition.

0:05:42.940,0:05:48.970
This corresponds to the information: standard entry
under the start state, therefore this transition.

0:05:50.740,0:05:52.300
What else do
we have to translate?

0:05:54.130,0:05:58.540
We know that we always get
to A from here with e.

0:05:58.540,0:05:59.950
That's what
we see here.

0:05:59.950,0:06:04.900
There's a transition that no matter if we're
in C or D, we always get to A.

0:06:04.900,0:06:06.430
That would be
the easy one.

0:06:06.430,0:06:11.260
However, we know that we still have to
remember whether we came from C or from D.

0:06:11.260,0:06:16.150
I.e., it is not enough
just to have this transition here.

0:06:16.150,0:06:21.970
We also have to remember this extra information that will
let us know later (when we come back from B,

0:06:21.970,0:06:25.120
for example) that we are really supposed
to come back to D and not C.

0:06:25.120,0:06:30.730
So that's if we come here from D
with e and then come back with b.

0:06:30.730,0:06:31.810
Then we want to
end up at D.

0:06:31.810,0:06:33.820
However, if we did
that from C, which

0:06:33.820,0:06:36.460
would be possible, then we
want to come back to C.

0:06:36.460,0:06:40.000
That would be exactly
what this history accomplishes.

0:06:40.000,0:06:46.750
If we came from D with e and later came back
with b via history, we want to end up at D.

0:06:46.750,0:06:51.721
If we did that from C, we
also want to end up at C.

0:06:51.721,0:06:53.770
That is, it is not enough simply
to have this b and e transition.

0:06:53.770,0:06:56.560
We also have to somehow hold that
this is why we are returning to

0:06:56.560,0:07:03.640
D, because we had come to A from D. And there is just the
idea that if we do that from C, we will end up at C, too.

0:07:03.640,0:07:09.550
And there's just the idea that we do
that by capturing that in the states as well.

0:07:09.550,0:07:14.920
So it's not just A, it's
that A that we entered from D.

0:07:16.120,0:07:19.930
So in the outer states, in the A and
the B and strictly speaking also in the X,

0:07:19.930,0:07:22.690
we remember by
an extra annotation

0:07:24.100,0:07:28.630
from which sub-state of
the hierarchical state we came.

0:07:28.630,0:07:32.410
That's where more states come from, because we
have to do that for C as well.

0:07:32.410,0:07:36.010
We just
create copies.

0:07:36.010,0:07:41.620
What were in the UML state diagrams
A, B, for that we have two copies:

0:07:41.620,0:07:44.740
one for the fact that we came from C
and one for the fact that we came from D.

0:07:44.740,0:07:46.510
Strictly speaking, we could
also create three copies,

0:07:46.510,0:07:51.070
namely in case we could also end up
here without ever having been in C or D.

0:07:52.810,0:07:56.005
So one copy for: we
were last here in C.

0:07:56.005,0:07:57.460
One for: we were
last here in D.

0:07:57.460,0:07:59.620
One for: we haven't been
to this part at all.

0:07:59.620,0:08:04.240
That's what I did for the
X, created a copy here where

0:08:04.240,0:08:06.580
I don't write anything in the brackets
because that's supposed to be the information:

0:08:07.150,0:08:11.380
Here we are in X and we
have never been in this part at all.

0:08:12.370,0:08:14.650
In this specific
case, it happens that

0:08:14.650,0:08:18.310
we are never in X
if we have been here before.

0:08:18.310,0:08:21.910
That's why I didn't create copies of
X for C and D as well,

0:08:21.910,0:08:23.710
but only for
this simple case.

0:08:23.710,0:08:27.670
And analogously for A and B I created only
the copies for: we were in C and D respectively.

0:08:27.670,0:08:32.320
And not another copy for: we
have never been in this hierarchical state.

0:08:32.320,0:08:34.420
This cannot happen at
all in the concrete example.

0:08:36.820,0:08:41.500
That explains why we have these
two copies here of A and B,

0:08:41.500,0:08:45.130
but don't have
additional copies for X.

0:08:45.130,0:08:47.680
These are
the additional states.

0:08:47.680,0:08:52.750
And we also know that of
course we need the transitions in between.

0:08:52.750,0:08:53.140

So:

0:08:53.140,0:08:56.080
That we can switch between A
and B with a and f,

0:08:56.080,0:09:01.480
that is not changed by whether we
have been in D or in C before.

0:09:01.480,0:09:08.950
That also follows from the strategy here, that
we create these copies of the outer states (in

0:09:08.950,0:09:11.822
that case, of A and B) and their transitions;
these two a, f transitions, which we find both

0:09:11.822,0:09:11.919
here and here; and then for completion,
these states still have to be bound.

0:09:11.919,0:09:11.945
When do we
get to A(C)?

0:09:11.945,0:09:35.140
When we have been last in C
and then took this e-transition leading to A.

0:09:35.140,0:09:38.740
When we take this transition
and have been in C last.

0:09:38.740,0:09:43.660
That's why we
have this transition.

0:09:43.660,0:09:45.190
And we then use the information that
we've been in C when, again, we

0:09:45.820,0:09:51.190
want to go from B to D at some point
with b. So, if we take that transition at some point.

0:09:51.190,0:09:54.370
So if we take this
transition at some point, via history

0:09:55.630,0:10:01.960
nodes, and have last been in C, we also want
to return to C. And this happens through this additional transition.

0:10:01.960,0:10:07.870
And that is done
by this additional arrow.

0:10:09.310,0:10:13.540
That's where we use information, whether we
were last in C or in D, to

0:10:13.540,0:10:15.160
be able
to return there.

0:10:24.370,0:10:31.390
So that's the solution to
this example using this approach

0:10:31.390,0:10:39.460
or this essential idea in particular,
to remember in the outer states whether

0:10:39.460,0:10:44.980
or from which sub-state of
the hierarchical state you got there.

0:10:44.980,0:10:52.510
To then be able to exploit that when you
have a history entry like here in the example.
