0:00:00.000,0:00:04.770
Kehren wir noch einmal zu unserem
Armbanduhr-Beispiel zurück.

0:00:04.770,0:00:09.270
Zur Erinnerung, das sieht bis jetzt so aus.

0:00:09.270,0:00:16.530
Es werden die Stunden- und Minutenanzeige, oder
Zählung, in parallelen Regionen realisiert.

0:00:16.530,0:00:24.240
Wir hatten so einen Broadcast-Effekt genutzt, dass
wenn der Minutenzähler hier von 59 auf 0 springt,

0:00:24.240,0:00:30.270
ein Stunden-Effekt ausgelöst wird, der hier
einen Fortschritt bei der Stundenzählung bewirkt.

0:00:30.270,0:00:32.970
Wir hatten einen Effekt benutzt, um zu sagen,

0:00:32.970,0:00:39.630
dass immer wenn der Minutenzähler auf
null geht, ein Signalton erscheinen soll.

0:00:39.630,0:00:46.950
Wir haben die Alarm An- und Aus-Stellung,
und wir haben diese Übergänge zwischen diesen

0:00:46.950,0:00:51.930
beiden zusammengesetzten Zuständen, um aus der
Zeitanzeige in die Alarmeinstellung und zurück

0:00:51.930,0:00:54.720
zu geraten, und in der Alarmeinstellung
zwischen Ein und Aus zu wechseln.

0:00:58.440,0:00:59.760
Sind wir fertig?

0:00:59.760,0:01:00.480
Nein, es gibt noch Probleme.

0:01:00.480,0:01:05.820
Und zwar ein wesentliches Problem ist,
dass wenn wir aus der Alarmeinstellung

0:01:05.820,0:01:08.910
zur Zeitanzeige zurückkehren,
diese immer auf null springt.

0:01:08.910,0:01:10.200
Wieso ist das so?

0:01:11.340,0:01:13.290
Wir hatten ja zuletzt diskutiert, was denn diese

0:01:13.290,0:01:15.780
Ein-/Austrittsmöglichkeiten
für Konsequenzen haben.

0:01:15.780,0:01:17.760
Und zum Beispiel ist es hier so:

0:01:17.760,0:01:20.910
Angenommen, wir sitzen irgendwie bei 2:58 Uhr,

0:01:22.230,0:01:27.330
also wir haben in der Stundenzählung den Zustand
2 und in der Minutenzählung den Zustand 58.

0:01:27.330,0:01:31.470
Danach wird der Knopf a gedrückt,
also dieser Trigger ausgelöst.

0:01:31.470,0:01:32.700
Was bewirkt der?

0:01:32.700,0:01:36.720
Wir hatten gesagt, wir verlassen den
Gesamtzustand, d.h. wir verlassen alle

0:01:36.720,0:01:45.480
beide Regionen, landen hier im Alarmzustand
im ersten Moment bei dem An-Unterzustand,

0:01:46.350,0:01:51.870
weil das der Startzustand ist; dann schalten
wir vielleicht mehrmals den Alarm an und

0:01:51.870,0:01:55.530
aus (da würden wir mit b zwischen diesen
beiden Unterzuständen hin und her wechseln),

0:01:55.530,0:01:57.739
dann drücken wir wieder a,
lösen also den Trigger a aus.

0:01:57.739,0:01:58.245
Was würde das bewirken?

0:01:58.245,0:02:04.740
Wir würden diesen Unterzustand verlassen,
wieder in diesen komplexeren Regionenzustand

0:02:04.740,0:02:07.530
zurückkehren, und wir würden das
mit dem Standardeintritt machen.

0:02:07.530,0:02:10.710
Und das heißt, dass wir in jeder
Region den Startzustand wählen.

0:02:10.710,0:02:16.060
Dann landen wir wieder bei null
und null, statt bei 2:58 Uhr.

0:02:16.060,0:02:19.270
Das ist natürlich nicht gewollt,
und das gilt auch umgekehrt.

0:02:19.270,0:02:25.480
Also was auch immer in der Alarmeinstellung
zuletzt sozusagen los war, wird ignoriert,

0:02:25.480,0:02:29.860
wenn wir zur Zeitanzeige und zurück wechseln.

0:02:30.400,0:02:32.260
Woran macht sich das deutlich?

0:02:32.770,0:02:39.370
Wir haben eine Uhrzeit, wir wechseln mit a zur
Alarmeinstellung, dann ist das erst mal On,

0:02:39.370,0:02:47.710
dann drücken wir b, sind Off, dann drücken
wir Knopf a, dann geraten wir wieder in diesen

0:02:47.710,0:02:52.030
Regionenzustand, schalten da vielleicht ein
paar mal, drücken irgendwann wieder Knopf a.

0:02:52.030,0:02:52.720
Was passiert dann?

0:02:52.720,0:02:56.470
Wir verlassen diesen rechten Zustand,
geraten in den linken Zustand,

0:02:56.470,0:02:59.260
nutzen dort den Standardeintritt, und der besagt,

0:02:59.260,0:03:04.990
dass wir wieder beim Startzustand von
diesem hierarchischen Zustand beginnen.

0:03:04.990,0:03:08.830
Also sind wir wieder bei On, obwohl wir das letzte
Mal, als wir hier in dem Unterzustand waren,

0:03:08.830,0:03:12.340
in diesem linken Zustand waren,
den Unterzustand Off gewählt haben.

0:03:12.340,0:03:21.490
Also diese Übergänge auf diese Art
(wie bisher verwendet) vergessen,

0:03:21.490,0:03:23.260
was jeweils in den Unterzuständen war.

0:03:23.260,0:03:27.460
Das ist nicht überraschend, weil
wir die Historie nicht verwenden,

0:03:27.460,0:03:31.030
die eigentlich genau dafür eingeführt wurde,
solche Unterzustände nicht zu vergessen.

0:03:31.030,0:03:34.690
Wir haben hier in diesem Beispiel
bis jetzt nur den Austritt aus dem

0:03:34.690,0:03:40.810
Gesamtzustand und den Standardeintritt
in zusammengesetzte Zustände verwendet.

0:03:42.010,0:03:48.310
Und das schöpft eben nicht die Möglichkeiten aus,
die wir haben, um Unterzustände nicht zu vergessen

0:03:48.310,0:03:55.510
(also den letzten Zustand in einem hierarchischen
Zustand oder einem Regionenzustand).

0:03:56.260,0:04:01.540
Also, die Probleme waren zu erwarten, weil
wir noch keine Historienknoten benutzt haben.

0:04:01.540,0:04:05.470
Und die Lösung ist natürlich, tatsächlich
Eintritte über Historie zu verwenden.

0:04:05.470,0:04:07.780
Tatsächlich ist es in dem
konkreten Beispiel auch egal,

0:04:07.780,0:04:10.270
ob wir die flache oder die
tiefe Historie verwenden.

0:04:10.270,0:04:11.110
Warum?

0:04:11.110,0:04:15.160
Nun, weil hier gar keine tieferen
Schachtelungsebenen existieren.

0:04:15.160,0:04:22.120
Also sowohl der rechte Regionenzustand als
auch der linke hierarchische Zustand haben

0:04:22.120,0:04:27.880
genau noch eine Schachtelungsebene und keine
tieferen weiteren hierarchischen Schachtelungen,

0:04:27.880,0:04:31.450
wo es einen Unterschied machen würde, ob
wir tiefe oder flache Historie verwenden.

0:04:31.450,0:04:34.150
Ich werde hier gleich die
flache Historie verwenden.

0:04:40.420,0:04:46.600
Da wir beim Übergang in den rechten
Regionenzustand zwei Region anzusteuern haben,

0:04:46.600,0:04:54.160
brauchen wir tatsächlich zwei Historienzustände,
nämlich je einen in jeder der beiden Regionen.

0:04:54.160,0:05:00.280
Und das Anspringen beim Eintreten wird
dann über eine Gabelung realisiert.

0:05:00.280,0:05:02.740
Also hier von rechts nach links können
wir sagen, wir führen hier eine flache

0:05:02.740,0:05:05.980
Historie ein und diesen a-Übergang gehen
wir eben zu dem Historienknoten hier.

0:05:05.980,0:05:09.250
Wenn wir von links nach rechts
gehen, dann wollen wir ja in

0:05:09.250,0:05:13.870
diese beiden Regionen eintreten, und in
beiden Regionen wollen wir verwenden,

0:05:13.870,0:05:18.220
dass wir uns merken konnten, was der
letzte Stunden- bzw. Minutenzustand war.

0:05:18.220,0:05:21.910
Denn wir haben a nach rechts gehend über eine

0:05:21.910,0:05:28.120
Gabelung jeweils zu Historienknoten
in den beiden Regionen eintretend.

0:05:32.680,0:05:35.380
Und das sieht dann so aus.

0:05:38.460,0:05:40.710
In den Unterzuständen hat sich nichts geändert,

0:05:41.880,0:05:44.520
zum Beispiel diese Region
ist wie vorher, diese auch.

0:05:44.520,0:05:45.870
Es sind diese Historienknoten hinzugekommen.

0:05:45.870,0:05:48.180
Flache Historie, weil da kein Stern dransteht.

0:05:48.180,0:05:53.610
Der Eintritt nach rechts geschieht über
diese Gabelung, die dann auf die beiden

0:05:53.610,0:05:59.430
Historienknoten verweist, und von rechts nach
links gehen wir auch über einen Historienknoten.

0:05:59.430,0:06:06.150
Wenn wir dieses Bild vergleichen mit
diesem Diagramm, sehen wir genau,

0:06:06.150,0:06:10.170
wo die Unterschiede sind, also die beiden
rechten und linken Gesamtzustände haben

0:06:10.170,0:06:15.810
sich nicht wesentlich verändert, aber
die Übertritte sind jetzt präziser

0:06:15.810,0:06:19.800
gestaltet und sorgen dafür, dass
wir uns eben Unterzustände merken.

0:06:19.800,0:06:28.080
Jetzt wäre es so, wenn wir sagen, wir werden
bei 2:58 Uhr in der Stundenanzeige, würden dann

0:06:28.080,0:06:33.975
mit a in den Alarm Einstellungszustand wechseln,
das wird beim ersten Mal so sein, dass wir zu On

0:06:33.975,0:06:39.690
gehen, weil der Historienknoten diesen Pfeil auf
On hat, dann können wir mir mit b mehrmals mit hin

0:06:39.690,0:06:44.700
und herschalten oder auch nicht, würden dann mit
a wieder in den Regionenzustand rechts gehen,

0:06:44.700,0:06:47.790
würden das aber nicht über den Standardeintritt
machen, sondern per dieser Gabelung diese

0:06:48.360,0:06:55.110
Historienknoten verwenden und dann wäre es ebenso,
wenn wir zurückkehren, dass wir nicht hier zu null

0:06:55.110,0:06:59.580
gehen, weil wir schon mal in dieser Region,
diesem Gesamtzustand waren, nämlich bei 2:58,

0:06:59.580,0:07:04.140
d.h. diese beiden Historienknoten würden
dafür sorgen, dass bei der Rückkehr in

0:07:04.140,0:07:08.760
diesen rechten komplexen Zustand wir bei
2:58 Uhr wären und nicht bei 0:00 Uhr.

0:07:08.760,0:07:15.330
Und genauso umgekehrt, wenn wir hier geschaltet
haben auf Off, dann mit a hierher zurückkehren

0:07:15.330,0:07:18.720
in die Stunden- und Minutenanzeige
und dann immer wieder a drücken,

0:07:18.720,0:07:23.070
dann würden wir nämlich nicht bei On landen,
sondern da, wo auch immer wir in dem linken

0:07:23.970,0:07:28.440
den hierarchischen Zustand zuletzt waren und wenn
das Off war, dann würden wir auch bei Off landen,

0:07:28.440,0:07:35.850
das heißt diese beiden hier genannten
Probleme würden genau dadurch gelöst.

0:07:35.850,0:07:40.560
Wie gesagt, hier hätten wir jeweils
auch tiefe Historie verwenden können,

0:07:40.560,0:07:44.610
weil es gar keine tiefergehenden
Schachtelungen gibt einerseits.

0:07:44.610,0:07:48.360
Andererseits hätten wir hier
jeweils auch eigentlich die Pfeile,

0:07:48.360,0:07:52.440
die von Historienknoten ausgehen,
nicht einzeichnen brauchen.

0:07:52.440,0:07:59.460
Diese drei Pfeile, die werden ja nur verwendet,
falls wir noch nie in dem jeweiligen Zustand in

0:07:59.460,0:08:05.850
der jeweiligen Region oder Schachtelungsebene
waren, wenn so ein Historienknoten gar keinen

0:08:05.850,0:08:11.460
direkt ausgehende Pfeil hat, dann wird in jedem
Fall einfach der entsprechende Startknoten aus

0:08:11.460,0:08:15.240
der jeweiligen Region oder Schachtelungsebene
genommen und da es hier jeweils genau so ist,

0:08:15.240,0:08:17.910
dass die Historienknoten sowieso
immer auf den Unterzustand zeigen,

0:08:17.910,0:08:25.770
der auch durch den Startzustand in der
entsprechenden Stelle gekennzeichnet ist,

0:08:25.770,0:08:31.230
würde das Weglassen dieser drei
Pfeile keinen Unterschied machen.

0:08:32.670,0:08:38.820
Vor allem dann, wenn wir beim erstmaligen
Eintritt in einen Zustand per Historienknoten

0:08:38.820,0:08:45.270
einen anderen Zustand ansteuern wollen
als der Startzustand dieser Ebene wäre,

0:08:45.270,0:08:49.401
wenn wir nicht über Historie,
sondern über Standardeintritt kommen.

0:08:49.401,0:08:55.200
Das sind ein paar Varianten, dass wir
diese drei Pfeile weglassen hätten

0:08:55.200,0:08:58.680
können und dass wir statt der flachen auch
die tiefe Historie hätten nehmen können.

0:08:58.680,0:09:08.280
Sind wir damit fertig, nachdem wir also von
diesem Fall zu diesem Diagramm gekommen sind?

0:09:08.280,0:09:10.410
Nein, es fehlt immer noch was.

0:09:10.410,0:09:12.450
Was fehlt denn noch?

0:09:12.450,0:09:20.280
Nun, was bisher noch gar nicht realisiert ist,
ist, dass diese Alarmeinstellung wirklich etwas

0:09:20.280,0:09:24.090
damit zu tun hat, ob denn nun geklickt wird
oder nicht, ein Übergang zu einer vollen Stunde.

0:09:24.630,0:09:28.920
Hier gibt es diesen Effekt, wenn
wir zur 0ten Minute springen,

0:09:28.920,0:09:32.430
also zu einer vollen Stunde, dann
wird hier ein Signal ausgelöst.

0:09:32.430,0:09:37.860
Eigentlich soll die Uhr aber nur das Signal
auslösen, wenn tatsächlich der Alarm eingestellt

0:09:37.860,0:09:43.050
ist, aber es gibt keine Verbindung oder
keine Kommunikation zwischen der Tatsache,

0:09:43.050,0:09:48.510
ist der Alarm an- oder ausgestellt einerseits, und
der Tatsache, wird denn hier gepiept oder nicht.

0:09:52.290,0:09:55.410
Also müssen wir noch weitere
Informationen transportieren

0:09:55.410,0:09:57.300
und das können wir machen über ein Flag.

0:09:57.300,0:09:59.610
Das ist so wie eine Variable
in einer Programmiersprache,

0:10:00.270,0:10:04.890
eine Variable, in der wir Werte speichern
können, zum Beispiel eine Boolesche Variable,

0:10:04.890,0:10:10.500
die können wir an und aus schalten,
true und false, null und eins.

0:10:11.040,0:10:15.000
Die werden wir AL für Alarm nenn
und benutzen, um diesen Piep-Effekt,

0:10:15.000,0:10:24.720
diesen Signalton unter Kontrolle zu kriegen,
d.h. zum einen, dass wir das bei dem Auslösen

0:10:24.720,0:10:28.020
dieses Piepens berücksichtigen sollten,
ob denn der Alarm an ist oder nicht,

0:10:28.020,0:10:34.140
also dieses Flag dabei prüfen sollten,
ob es an oder aus ist einerseits.

0:10:34.140,0:10:37.200
Andererseits müssen wir natürlich dafür
sorgen, dass es irgendwann auch mal auf

0:10:37.200,0:10:42.450
an und aus gesetzt wird, d.h. bei
diesen Übergängen zwischen diesen

0:10:42.450,0:10:47.250
Zuständen hier der Alarmeinstellung sollten
wir irgendwas mit diesem Alarmflag anstellen.

0:10:50.100,0:10:57.150
Das werden wir gleich sehen, wie das
geschieht, wie das dann aussieht, aber

0:10:57.150,0:11:04.200
die Grundidee ist, wir setzen dieses Alarmflag
ein, nutzen das bei dem Auslösen des Signaltons,

0:11:04.200,0:11:08.850
um zu überprüfen, ob das sein soll, und
setzen es bei dem an- und ausschalten.

0:11:11.280,0:11:19.830
Des Weiteren werden wir tatsächlich mittels dieses
Alarmflags auch die Nutzung der flachen Historie

0:11:19.830,0:11:25.740
in dem Alarmeinstellungs-Unterzustand,
in dem linken Teil vermeiden.

0:11:25.740,0:11:33.180
Also wenn wir sowieso ein Flag einführen, dem wir
ansehen können, ob der Alarm an oder aus ist, dann

0:11:33.180,0:11:37.290
brauchen wir diesen Historienknoten gar nicht,
weil wir genauso gut auch bei dem Eintritt hier

0:11:37.290,0:11:42.900
einfach nur dies Flag entscheidend ablesen können,
ob wir in diesen oder in diesen Zustand wollen.

0:11:49.560,0:11:52.260
Wie sieht das dann aus?

0:11:54.690,0:11:57.210
Damit gehen wir zu diesem Diagramm über.

0:11:57.210,0:11:59.880
Das können wir wieder vergleichen
mit dem, was wir bisher haben.

0:11:59.880,0:12:01.110
Was ändert sich da?

0:12:01.110,0:12:08.970
Also wieder die Hauptteile, hier ändern sich
nicht die Regionen oder hier diese innere

0:12:08.970,0:12:13.890
Struktur dieses linken hierarchischen
Zustandes, aber insbesondere hier bei

0:12:13.890,0:12:22.890
den Übergängen tun wir etwas, indem wir nämlich
hier statt die Historie zu verwenden von rechts

0:12:22.890,0:12:28.500
nach links einfach von diesen Flag das abhängig
machen, ob wir zum An- oder Aus-Zustand gehen.

0:12:28.500,0:12:30.960
Das dürfen wir, indem wir an diesen
Trigger noch eine Bedingung schreiben.

0:12:30.960,0:12:36.540
Wenn Sie in die vorherigen Folien schauen, dann
sehen Sie, dass das eine mögliche Beschreibung

0:12:36.540,0:12:39.240
ist, dass wir einen Trigger haben und noch
eine mögliche Bedingung und das wäre diese

0:12:39.240,0:12:42.870
Abfrage wieder dieses Alarmflags,
das muss irgendwo gesetzt werden.

0:12:42.870,0:12:43.680
Das passiert hier.

0:12:44.640,0:12:49.440
Bei dem Schalten zwischen zwei Unterzuständen
dürfen wir auch einen Effekt auslösen.

0:12:49.440,0:12:51.720
So ein Effekt kann sein,
dieses Alarmflag zu wechseln.

0:12:51.720,0:12:55.260
Also wenn wir nach Off wechseln mit dem
Knopf b, setzen wir Alarm auf null und

0:12:55.260,0:12:57.540
wenn wir auf On wechseln,
setzen wir Alarm auf eins.

0:12:57.540,0:13:02.640
Das nutzen wir aus, wenn wir diesem linken
Einstellungszustand betreten, indem wir das

0:13:02.640,0:13:07.560
von dem Alarmflag abhängig machen, ob wir hier
oder hier lang wollen und ganz wichtig natürlich:

0:13:08.380,0:13:13.660
Wir verwenden das Alarmflag auch hier, um
dieses Piepen, das Signal nur auszulösen,

0:13:13.660,0:13:17.890
wenn wir den Null-Zustand betreten und das
Alarmflag aktuell auf eins gesetzt ist.

0:13:22.750,0:13:27.760
Das sind Unterschiede zwischen
diesem Diagramm und diesem Diagramm.

0:13:33.190,0:13:34.870
War es das dann?

0:13:34.870,0:13:42.640
Nun wir müssen noch irgendwie festlegen
wie das Alarmflag am Anfang gesetzt ist.

0:13:42.640,0:13:46.360
Irgendwann am Anfang wird
dieses Gesamtdiagramm betreten.

0:13:46.360,0:13:51.760
Wir wissen wir starten in der Stunden Minuten
Anzeige, weil der Startknoten hier drauf zeigt.

0:13:51.760,0:13:58.150
Wir wählen dafür den Standardeintritt, d.h.
den Startzustand für Stunde Minuten 0:00 Uhr,

0:13:58.150,0:14:01.540
aber ist das Alarmflag dabei gesetzt oder nicht?

0:14:01.540,0:14:02.740
Das muss noch geklärt werden.

0:14:06.970,0:14:13.090
Das werden wir gleich tun und im Zuge
dessen werden wir auch gleich noch

0:14:13.090,0:14:18.790
den dritten Aspekt modellieren,
dass die Uhr eine Batterie hat,

0:14:18.790,0:14:26.980
die leer werden kann und wenn die Batterie
leer wird, dann soll man die ersetzen.

0:14:26.980,0:14:30.550
Dabei sollen aber die Stunden und
Minuten auf null zurückgesetzt werden.

0:14:30.550,0:14:33.250
Die Uhr beginnt dann wieder bei
null zu laufen und das Alarmflag,

0:14:33.250,0:14:34.712
also der Alarm soll am Anfang immer an sein.

0:14:34.712,0:14:40.390
Das ist die Stelle, wo wir auch einstellen, ob
denn der Alarm ursprünglich an ist oder nicht.

0:14:40.390,0:14:46.600
Also wir modellieren, dass die Uhr eine
Batterie hat, die leer werden kann,

0:14:46.600,0:14:52.330
gewechselt werden muss und in diesem
Fall sich etwas an dem Zustand tut,

0:14:52.330,0:14:58.720
nämlich wir wollen, wenn die Batterie
leer war, dann nicht zum Beispiel über

0:14:58.720,0:15:06.940
die Historie in die Zustände eintreten,
sondern bei 0:00 Uhr, ein Aspekt.

0:15:06.940,0:15:07.570
Der andere Aspekt:

0:15:07.570,0:15:16.660
Wir wollen, dass dann das Alarmflag auf eins
gesetzt wird, d.h. wenn man eine neue Batterie

0:15:16.660,0:15:24.610
einlegt in die Uhr und auch zu Beginn
einfach ist der Alarmzustand immer eins.

0:15:28.900,0:15:32.590
Und das könnte dann so erreichen:

0:15:32.590,0:15:37.720
Wir packen also alles, was wir
bisher an Zustandsdiagramm haben,

0:15:37.720,0:15:43.270
das war dieser Teil, den packen wir noch
mal in einen hierarchischen Zustand,

0:15:43.270,0:15:47.350
nämlich wie die Uhr sich verhält,
wenn die Batterien nicht leer ist.

0:15:47.350,0:15:53.650
Alles, was hier steht, ist genau wie bisher
entwickelt und dann haben wir nicht parallel

0:15:54.940,0:15:57.910
dazu, sondern unabhängig davon einen
weiteren Zustand, der dafür da ist,

0:15:57.910,0:16:02.140
wenn die Batterie leer ist und bei
Auslieferung der Uhr ist das Batteriefach

0:16:02.140,0:16:09.190
leer und die Batterie leer, d.h. hier ist
der äußerste Beginn der gesamten Bearbeitung.

0:16:09.190,0:16:16.210
Wenn eine Batterie eingesetzt wird, dann kommen
wir einerseits in diesen Teil hier und wissen,

0:16:16.210,0:16:20.710
dass wir dann bei diesem Startzustand
beginnen, also über den Standardeintritt

0:16:20.710,0:16:26.170
hier bei null und null starten und wir
setzen dabei das Alarmflag auf eins.

0:16:26.170,0:16:32.830
Dann passiert, was auch immer
das bisherige Verhalten war,

0:16:32.830,0:16:37.030
also die Zeit schreitet fort, wir
können die Alarmeinstellung wechseln,

0:16:37.030,0:16:41.020
können dabei ein- und ausschalten, sodass
es piept genau dann, wenn der Alarm ein ist.

0:16:41.020,0:16:44.170
Wenn wir wieder in Alarmeinstellung
zurückwechseln, wird anhand des

0:16:44.170,0:16:47.095
Flags überprüft, ob denn der
Alarm an ist oder nicht, etc.

0:16:47.095,0:16:49.780
Dann kann immer die Batterie leer werden.

0:16:49.780,0:16:53.650
Das führt dazu, dass wir in
diesem Zustand wieder landen:

0:16:53.650,0:16:55.060
Batterie ist leer.

0:16:55.060,0:16:57.520
Den können wir nur verlassen, indem
wir eine neue Batterie einsetzen.

0:16:57.520,0:16:58.630
Was passiert dabei?

0:16:59.440,0:17:02.020
Dann landen wir wieder bei 0:00 Uhr,

0:17:02.020,0:17:07.000
wie wir erwarten würden nach Verlust
der Batterie und neuem Einsetzen.

0:17:07.000,0:17:12.220
Wir landen bei 0:00 Uhr, weil wir
nicht den Historienknoten verwenden,

0:17:12.220,0:17:18.760
sondern den Standardeintritt,
die beiden Unter-Startzustände

0:17:18.760,0:17:25.525
0 und 0 und wir setzen beim Einlegen einer
Batterie auch immer das Alarmflag auf eins,

0:17:25.525,0:17:31.060
d.h. wenn wir dann erstmals a drücken würden,
würden wir immer in diesem Unterzustand landen.

0:17:35.440,0:17:41.380
Und das soll jetzt unsere finale
Modellierung für diese Armbanduhr sein.

0:17:41.380,0:17:46.450
Und da kommen die meisten der Elemente, die wir

0:17:46.450,0:17:48.670
zuvor für UML-Zustandsdiagramme
eingeführt haben, vor.

0:17:48.670,0:17:52.480
Es gibt noch viele weitere, die
aber hier nicht Thema sein sollen.
