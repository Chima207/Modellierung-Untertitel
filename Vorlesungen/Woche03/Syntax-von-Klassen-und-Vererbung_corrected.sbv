0:00:01.449,0:00:03.080
So syntax
of classes:

0:00:03.080,0:00:06.950
How do we represent classes
later in a class diagram?

0:00:06.950,0:00:12.950
I'm doing this here for an example
that we can then easily generalize to

0:00:12.950,0:00:15.059
other
situations.

0:00:15.059,0:00:16.740
Namely, the example
is to be:

0:00:16.740,0:00:19.840
A class of points
is to be created.

0:00:19.840,0:00:22.520
So we want to store
points of the two-dimensional space.

0:00:22.520,0:00:26.960
So we will have x and
y coordinates, and some operations on these

0:00:26.960,0:00:27.960

points.

0:00:27.960,0:00:32.930
So maybe this is supposed to be a vector
graphics domain again somehow, which we want to specify in

0:00:32.930,0:00:35.120
an object-oriented
way this time.

0:00:35.120,0:00:36.780
You could
imagine that.

0:00:36.780,0:00:41.840
Then there will be a graph at the
end, and in the graph there will be individual

0:00:41.840,0:00:47.030
nodes, each of which is such
a box (so a little graph).

0:00:47.030,0:00:49.579
And what will
appear in it?

0:00:49.579,0:00:52.489
That will be a
three-part box in each case.

0:00:52.489,0:00:58.899
And there's first of all a class
name, so the identification of the class itself.

0:00:58.899,0:01:03.260
Then there is an area
where attributes can be entered.

0:01:03.260,0:01:08.149
In this case, these are the information to
be stored, i.e. the x and y coordinates.

0:01:08.149,0:01:09.670
This is a
number in each case.

0:01:09.670,0:01:12.630
This is specified
here as type.

0:01:12.630,0:01:15.509
This is not always done
in such detail so early on.

0:01:15.509,0:01:18.560
So we saw examples earlier
where the type information was missing.

0:01:18.560,0:01:22.119
Usually, in the exercises (and later on in
the exam), we will expect you to put

0:01:22.119,0:01:24.899
meaningful type
information on there.

0:01:24.899,0:01:28.090
And then there is this
third area, where operations or

0:01:28.090,0:01:33.219
methods can be recorded
(also with their types).

0:01:33.219,0:01:37.939
This is of course somehow the bridge
to dynamic modeling, where you would then express

0:01:37.939,0:01:40.340
what these methods
are supposed to do.

0:01:40.340,0:01:46.349
Whereas here you just statically
state what their types are.

0:01:46.349,0:01:47.749
As
a comment:

0:01:47.749,0:01:50.009
Of course, there
are already activities here.

0:01:50.009,0:01:57.810
For example, one may move a point
in x- and y-direction to any number differences.

0:01:57.810,0:02:00.219
Nevertheless, what is written
here is still static modeling.

0:02:00.219,0:02:05.070
Because there is no code or
description of what the operations do.

0:02:05.070,0:02:09.620
There is only the
name and the types.

0:02:09.620,0:02:13.569
On the one hand the
argument types are interesting, which are

0:02:13.569,0:02:14.569
in
brackets.

0:02:14.569,0:02:18.750
So you can move a point, and then you
have to say by what you want to move it,

0:02:18.750,0:02:20.470
by
what differences.

0:02:20.470,0:02:24.810
And then there is no
return value for this operation.

0:02:24.810,0:02:25.810
Why
not?

0:02:25.810,0:02:29.900
Because this moving acts
directly on the point itself.

0:02:29.900,0:02:34.530
And there, when we introduced object
orientation, we had said that then no

0:02:34.530,0:02:41.620
explicit specification is needed, because implicitly
it operates on the concrete point.

0:02:41.620,0:02:47.120
On the other hand, if we wanted to determine, for
example, the vector length, that is, the length of the

0:02:47.120,0:02:51.000
vector from the coordinate origin to the current point,
then this would not be a change of the

0:02:51.000,0:02:52.409
point, but we
want to calculate something.

0:02:52.409,0:02:57.180
We don't need arguments because we are working
on the point itself and don't need any

0:02:57.180,0:02:58.180
other
information.

0:02:58.180,0:03:01.689
But we want to get a
number back instead of changing the point.

0:03:01.689,0:03:04.340
Then we would just
say here's what comes out.

0:03:04.340,0:03:05.769
And then this
is the result.

0:03:05.769,0:03:15.019
So the vector length returns a number, that's
why it says that as the result type here.

0:03:15.019,0:03:19.209
A couple
of other comments.

0:03:19.209,0:03:22.739
First of all, the attributes that are
here, these are not attributes of the class

0:03:22.739,0:03:23.739
per
se.

0:03:23.739,0:03:27.800
So of course they are in the
class diagram as attributes on the class.

0:03:27.800,0:03:31.190
But it's not that the class as
a whole has an x and y coordinate.

0:03:31.190,0:03:35.879
Rather, the class is a collection of
objects, namely individual points, and each instance has

0:03:35.879,0:03:38.180
attributes for these
x and y values.

0:03:38.180,0:03:39.230
So
it's important:

0:03:39.230,0:03:40.819
These are what
are called instance attributes.

0:03:40.819,0:03:43.480
They ultimately belong to
the instances of the class.

0:03:43.480,0:03:48.489
So to the objects that we'll form
later, and not to the class itself.

0:03:48.489,0:03:51.870
But they are kept in the class
because all objects of the class should have

0:03:51.870,0:03:55.379
an x and y value each
(but different values for different objects).

0:03:55.379,0:04:00.959
Here is simply the information that
these two values should always be present.

0:04:00.959,0:04:05.639
Then a detail you may know
if you have done object-oriented programming

0:04:05.639,0:04:06.639

before.

0:04:06.639,0:04:10.249
Or what you may also encounter
when you look at examples from books.

0:04:10.249,0:04:15.999
Sometimes there are some "funny symbols"
at the attributes or at the

0:04:15.999,0:04:19.280
methods, some special
symbols: Plus, minus.

0:04:19.280,0:04:22.760
Sometimes these can also
be designations, i.e. character strings.

0:04:22.760,0:04:24.420
But sometimes they are
just these short symbols.

0:04:24.420,0:04:30.510
These are so-called visibility
annotations on the attributes.

0:04:30.510,0:04:38.780
They say something about, later in
the implementation, from which other objects

0:04:38.780,0:04:42.510
instance attributes and
methods may be accessed.

0:04:42.510,0:04:44.390
We will
ignore that completely.

0:04:44.390,0:04:51.070
So that doesn't matter
to us in the modeling.

0:04:51.070,0:04:56.210
If you see something like that in
an example (it won't occur in our lecture

0:04:56.210,0:05:02.160
and exercise), if you see examples from
elsewhere, you can ignore those modifiers for

0:05:02.160,0:05:06.660
the purpose
of this lecture.

0:05:06.660,0:05:13.020
And then another way to pack
even more information into the class.

0:05:13.020,0:05:19.500
Even in giving this representation, what
we had done now was we gave

0:05:19.500,0:05:20.500
the
attributes types.

0:05:20.500,0:05:22.280
Sometimes you give
them default values.

0:05:22.280,0:05:28.470
Where the idea then is that if in
individual objects, for example, the x coordinate is not

0:05:28.470,0:05:35.920
explicitly assigned, then the default value
from the class specification would simply apply.

0:05:35.920,0:05:38.430
Then you would
write it like this:

0:05:38.430,0:05:41.000
So x must be an
integer, and the default is zero.

0:05:41.000,0:05:46.880
That would mean then that if in an object
of this class to the x nothing is said,

0:05:46.880,0:05:53.420
it would have simply
already directly the value zero.

0:05:53.420,0:05:57.880
Now, of course, classes
are there to describe objects.

0:05:57.880,0:06:02.410
So the goal is to describe with
a class the structure of certain objects.

0:06:02.410,0:06:09.060
And then, of course, an instance
of a class represents a concrete

0:06:09.060,0:06:10.060

object.

0:06:10.060,0:06:15.510
So our Point class can have
many objects, which are its manifestation.

0:06:15.510,0:06:22.090
And a concrete point, for example my concrete
point of the class "Point", would then be

0:06:22.090,0:06:27.470
specified by assigning concrete
numbers to the instance attributes.

0:06:27.470,0:06:29.940
You would then write
that down like that.

0:06:29.940,0:06:35.770
So you can certainly notate the class
and the object together, and then say

0:06:35.770,0:06:37.690
by this particular
kind of arrow:

0:06:37.690,0:06:40.100
This is an
instance of this class.

0:06:40.100,0:06:43.500
And then there are
only two sections here.

0:06:43.500,0:06:50.010
The name of the object and the indication
that it is an object of this class.

0:06:50.010,0:06:56.500
Then there's this syntax underline,
ultimately to distinguish classes and objects.

0:06:56.500,0:07:01.500
But most importantly, there is
no method box in the objects.

0:07:01.500,0:07:05.890
So this part down here
doesn't exist in the individual objects.

0:07:05.890,0:07:06.890
Why
not?

0:07:06.890,0:07:08.620
Because this
code is reused.

0:07:08.620,0:07:14.560
So while each object in the class may
have its own x and y values, the

0:07:14.560,0:07:19.990
functionality (moving a point, determining the
vector length of a point, etc.) is

0:07:19.990,0:07:22.630
not something that is
different for individual points.

0:07:22.630,0:07:26.000
So the functionality is
the same for all points.

0:07:26.000,0:07:32.360
That's why the methods/operations are native to
the class and not to individual instances

0:07:32.360,0:07:34.350
of
the class.

0:07:34.350,0:07:37.530
That's why there are
no methods on the right.

0:07:37.530,0:07:42.960
This is a typical mistake in
exercises/exams, that methods are also specified for

0:07:42.960,0:07:43.960

objects.

0:07:43.960,0:07:48.750
This should not be the case
and can lead to a point deduction.

0:07:48.750,0:07:56.460
So if you want to have different behavior
for different objects, then they would simply not

0:07:56.460,0:07:57.770
be objects of
the same class.

0:07:57.770,0:07:59.690
Then you would
have two different classes.

0:07:59.690,0:08:04.110
So there can still be classes
that also store two integers, for example

0:08:04.110,0:08:06.860
a class
for arithmetic fractions.

0:08:06.860,0:08:07.960
There you also
need two numbers.

0:08:07.960,0:08:12.220
But that would not be a point
class, because it would have completely different operations.

0:08:12.220,0:08:14.240
Then you would have
a second class for fractions.

0:08:14.240,0:08:16.400
Of it there
would be also objects.

0:08:16.400,0:08:20.470
They would also
store two integers each.

0:08:20.470,0:08:25.870
But in the different classes for points
and for fractions there would be different operations.

0:08:25.870,0:08:31.500
And the objects then don't have to
store any operations, because they each belong to

0:08:31.500,0:08:40.570
one class and that determines
which functionality is available for them.

0:08:40.570,0:08:43.000
Another hint
for the exercise:

0:08:43.000,0:08:48.220
There we will also have something like this,
that you should specify objects to classes or a

0:08:48.220,0:08:49.220

class.

0:08:49.220,0:08:54.460
Then you don't have to do that,
unless it is explicitly required, by copying

0:08:54.460,0:09:00.420
the class again and specifying the
objects and always making these instantiation

0:09:00.420,0:09:01.420

arrows.

0:09:01.420,0:09:06.690
It is then also sufficient (if the
class is clear) that you simply specify such

0:09:06.690,0:09:09.040

objects.

0:09:09.040,0:09:16.380
That would be the
relationship between classes and objects.

0:09:16.380,0:09:20.680
There are also relationships between
classes in the class diagram.

0:09:20.680,0:09:24.420
A first such relationship
is the so-called inheritance.

0:09:24.420,0:09:31.649
This is about the fact that classes can be
similar to each other, or a class can be in

0:09:31.649,0:09:34.520
a certain sense an
extension of another class.

0:09:34.520,0:09:38.450
An example for our
graphics domain would be:

0:09:38.450,0:09:45.670
We have points that store
certain information and offer certain

0:09:45.670,0:09:46.670

methods.

0:09:46.670,0:09:52.900
And then it may just be that
we have another concept, that of colored points.

0:09:52.900,0:09:54.700
What is
a colored point?

0:09:54.700,0:09:59.580
A colored point is still a point,
so it must also have coordinates x, y,

0:09:59.580,0:10:03.930
but should also have a
color (and perhaps other operations).

0:10:03.930,0:10:06.540
So we would have
to store a color.

0:10:06.540,0:10:12.340
And maybe there is an operation
that translates a colored point to grayscale.

0:10:12.340,0:10:17.230
This is an operation that makes no sense
on points in general, only on colored points.

0:10:17.230,0:10:19.330
That's why it
would be native here.

0:10:19.330,0:10:24.450
Just as color, of course, is
precisely the distinguishing feature of colored

0:10:24.450,0:10:27.420
points from normal points, and
that's why it's specified here.

0:10:27.420,0:10:30.670
What is written here on the right are
not substitutions for the things that are written here.

0:10:30.670,0:10:34.000
These are always
additional information/additional aspects.

0:10:34.000,0:10:37.760
So also the ColoredPoint
has an x- and y-coordinate.

0:10:37.760,0:10:41.500
They just don't have to be
specified here anymore because they are inherited.

0:10:41.500,0:10:47.420
This is exactly what this arrow
expresses, especially with this special kind of

0:10:47.420,0:10:48.420

arrowhead.

0:10:48.420,0:10:50.230
So ColoredPoint
inherits from Point.

0:10:50.230,0:10:53.890
That is, attributes of Point
are also attributes of ColoredPoint.

0:10:53.890,0:10:58.660
And there can be
more information here, more attributes.

0:10:58.660,0:11:02.710
Methods of Point are also methods
of ColoredPoint, but ColoredPoint can provide

0:11:02.710,0:11:05.530
even
more functionality.

0:11:05.530,0:11:10.460
This is called
superclass or superclass.

0:11:10.460,0:11:12.770
That would
be here:

0:11:12.770,0:11:15.690
The more general class would
be the superclass or superclass.

0:11:15.690,0:11:20.640
And the specialized concept of
ColoredPoint here, that's called subclass or

0:11:20.640,0:11:21.640

subclass.

0:11:21.640,0:11:24.660
Sometimes people
then ask here:

0:11:24.660,0:11:31.430
Is there
also multiple inheritance?

0:11:31.430,0:11:33.090
Can you inherit
from multiple things?

0:11:33.090,0:11:35.580
So could ColoredPoint also
inherit from two different classes?

0:11:35.580,0:11:36.600
How is it
with these arrows?

0:11:36.600,0:11:37.600
What is
possible there?

0:11:37.600,0:11:40.779
Are different classes allowed
to inherit from Point?

0:11:40.779,0:11:43.230
We'll talk about
that in a moment.

0:11:43.230,0:11:49.340
We could also ask
about our library example:

0:11:49.340,0:11:51.990
Is there also
somehow meaningful inheritance conceivable?

0:11:51.990,0:11:53.480
One must
always consider:

0:11:53.480,0:11:55.810
Are there aspects there
that could be generalized?

0:11:55.810,0:11:58.990
For example, where different
classes have something in common?

0:11:58.990,0:12:03.080
So let's assume that there are
other media than books in the library.

0:12:03.080,0:12:04.370
Then we could
introduce CDs, videos, magazines.

0:12:04.370,0:12:09.510
And we could come up
with a new class for each.

0:12:09.510,0:12:13.020
And then at some point we might
notice that these different media have certain

0:12:13.020,0:12:14.180
things
in common.

0:12:14.180,0:12:23.860
So while only the magazine has magazine numbers
and maybe only the videos have a playing time,

0:12:23.860,0:12:27.290
one author and one title is
what all of these media have.

0:12:27.290,0:12:31.320
So maybe it would make sense
to introduce a class for media in

0:12:31.320,0:12:35.280
general and then inherit specialized
classes for books, CDs, etc.

0:12:35.280,0:12:42.920
That's then part of the
design, also finding meaningful such relationships.

0:12:42.920,0:12:48.760
I had
already said that:

0:12:48.760,0:12:51.330
The subclass inherits attributes and
methods (and later other relationships we

0:12:51.330,0:12:55.140
will discuss) of the
superclass, and can add more.

0:12:55.140,0:13:01.160
One aspect for implementation that is
not so important now for static modeling

0:13:01.160,0:13:07.360
is that methods of
the superclass can be overridden.

0:13:07.360,0:13:08.720
I had
said that here:

0:13:08.720,0:13:12.870
All methods that exist for
Point also exist for ColoredPoint.

0:13:12.870,0:13:17.180
But it could be that the behavior of
some of these methods must be slightly different

0:13:17.180,0:13:18.180
for
ColoredPoints.

0:13:18.180,0:13:21.910
So then you would not change that
the methods exist, but what they do.

0:13:21.910,0:13:26.800
And for the new methods, of course, you have
to say what they do anyway, because the Point itself

0:13:26.800,0:13:35.820
doesn't know anything
about gray coloring.

0:13:35.820,0:13:48.200
And another important point of this kind of
relationship, inheritance, is that this is to be understood

0:13:48.200,0:13:53.630
in such a way that any object of the
subclass can also be considered an object of the

0:13:53.630,0:13:54.630

superclass.

0:13:54.630,0:13:57.160
That's where we
talk about polymorphism/polymorphism.

0:13:57.160,0:14:01.810
In the sense that everything you can
do with Points, you can still do

0:14:01.810,0:14:02.810
with
ColoredPoint.

0:14:02.810,0:14:07.451
So ColoredPoints is not just some other thing
that happens to also have an x and

0:14:07.451,0:14:08.451
y
coordinate.

0:14:08.451,0:14:11.460
But ColoredPoint is really to be seen
as also a point, but still additional information

0:14:11.460,0:14:12.460
to
it.

0:14:12.460,0:14:16.540
Everything that goes with points
must also go with colored points.

0:14:16.540,0:14:19.810
Otherwise it would be
wrong to have inheritance here.

0:14:19.810,0:14:24.710
So you shouldn't just connect arbitrary concepts
by inheritance just because they happen to have

0:14:24.710,0:14:25.710
similar
data stores.

0:14:25.710,0:14:27.420
It's really
always about that:

0:14:27.420,0:14:36.490
There has to be a real
generalization/specialization relationship between the two classes.

0:14:36.490,0:14:38.720
Because then this can be
used in a meaningful way.

0:14:38.720,0:14:49.490
And while we're on
inheritance, there are a few

0:14:49.490,0:14:52.990
more structural
things to consider.

0:14:52.990,0:14:55.680
So soon we don't want
to have just two classes.

0:14:55.680,0:15:00.940
We're going to generalize
or enrich that, after all.

0:15:00.940,0:15:04.680
That we don't just have two classes and
their relationship, but then a whole class diagram

0:15:04.680,0:15:07.730
with several classes
and their relationships.

0:15:07.730,0:15:14.010
And then you can get into
situations where certain constellations no longer make

0:15:14.010,0:15:15.010

sense.

0:15:15.010,0:15:17.680
There you have
to consider some things.

0:15:17.680,0:15:22.810
Especially for the moment,
it's simply what's recorded here.

0:15:22.810,0:15:24.790
So it
says here:

0:15:24.790,0:15:26.640
"Constellations that
are forbidden."

0:15:26.640,0:15:31.290
What is forbidden would be
first of all any circularities.

0:15:31.290,0:15:34.120
So you can't
inherit in a circle.

0:15:34.120,0:15:38.779
It can't be that B inherits from A,
C inherits from B, and A inherits from C.

0:15:38.779,0:15:41.980
It could already be that B inherits
from A and C inherits from B.

0:15:41.980,0:15:48.940
So, if this arrow was gone
here, the situation would be okay.

0:15:48.940,0:15:54.640
But with all three arrows here, we would
have a situation that would not make sense.

0:15:54.640,0:15:58.589
So it just wouldn't be allowed at all
to specify this class diagram with such a circular

0:15:58.589,0:16:03.370
inheritance
chain.

0:16:03.370,0:16:07.910
Finally, for similar reasons,
self-inheritance is also not useful.

0:16:07.910,0:16:10.970
So a class
cannot inherit from itself.

0:16:10.970,0:16:16.980
Nor can a class inherit twice,
so to speak, from another class.

0:16:16.980,0:16:19.839
In all these cases, of course,
the direction of the arrows is relevant.

0:16:19.839,0:16:21.339
Not here, so
here it wouldn't matter.

0:16:21.339,0:16:23.529
If the arrow were the other
way around, it would still be forbidden.

0:16:23.529,0:16:27.690
In the other situations the
picture could change in each case.

0:16:27.690,0:16:33.040
Whereas here, if the arrow were
reversed, it would be circular again.

0:16:33.040,0:16:36.920
Would be forbidden so to speak for another
reason and not because of this double inheritance.

0:16:36.920,0:16:43.490
And if you were to turn an arrow
around here, you would no longer have circularity.

0:16:43.490,0:16:48.580
So circularity really means: in the
direction of the arrows, a circle.

0:16:48.580,0:16:52.592
If you were to turn the arrow around here,
you would no longer have circularity, because you could

0:16:52.592,0:16:54.740
not go in a
circle following the arrows.

0:16:54.740,0:16:56.640
But then you would
have a double inheritance.

0:16:56.640,0:16:59.779
Then C would inherit
from A and from B.

0:16:59.779,0:17:04.880
This is allowed in principle in UML,
but not all programming languages support it.

0:17:04.880,0:17:10.250
We will pay special attention to
whether this should be allowed or not.
