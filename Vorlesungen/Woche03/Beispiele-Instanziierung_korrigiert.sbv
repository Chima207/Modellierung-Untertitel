0:00:00.000,0:00:04.290
Willkommen zum letzten Video für diese Woche.

0:00:04.290,0:00:09.300
Das nehme ich vor allem auf, weil ich 
meine Aufnahmetechnik ausprobieren

0:00:09.300,0:00:14.130
möchte für den Fall, dass ich Ihnen 
in dieser App etwas zeichnen möchte.

0:00:14.130,0:00:20.130
Inhaltlich mache ich einfach kurz, 
was auf den Folien auch schon stand,

0:00:20.130,0:00:26.640
bei dem Punkt der Instanziierung 
von Klassen zu Objekten.

0:00:26.640,0:00:29.580
Schauen wir erst mal auf die hier linke Klasse.

0:00:29.580,0:00:31.110
Das war die Point-Klasse von den Folien.

0:00:31.110,0:00:35.550
Und da hatte ich schon ein Beispiel, 
dass wenn man dazu ein Objekt zeichnet,

0:00:35.550,0:00:42.120
das eben wie folgt aussehen könnte.

0:00:42.120,0:00:49.140
Also hat man auch so einen Kasten, der 
allerdings nur zwei Abschnitte hat.

0:00:49.140,0:00:53.310
Also es gibt nichts, was diesen 
Methodenkästen entspräche.

0:00:53.310,0:00:55.710
Sondern man hat einfach oben eine Zeile,

0:00:55.710,0:01:00.660
wo man den Namen des Objektes und die 
dazugehörige Klasse anzugeben hat.

0:01:00.660,0:01:05.460
Also zum Beispiel myPoint 
ist von der Klasse Point,

0:01:05.460,0:01:09.690
und syntaktisch ist das hier zu unterstreichen.

0:01:09.690,0:01:15.720
Und dann in dem Kasten darunter sind 
die Attributbelegungen anzugeben.

0:01:15.720,0:01:20.610
Also in dem Fall für x eine 
Zahl und für y eine Zahl.

0:01:20.610,0:01:23.370
Die könnte ich untereinander schreiben, 
wenn ich dafür Platz gelassen hätte.

0:01:23.370,0:01:26.250
Ich erlaube mir auch, das so zu schreiben,

0:01:26.250,0:01:31.620
wenn ich jetzt in dem Fall die beiden 
Attribute x und y belegen möchte.

0:01:32.520,0:01:36.300
Also einen dritten Kasten irgendwie 
für die Methoden gibt es nicht,

0:01:36.300,0:01:39.450
weil die in dem Objekt nicht anzulegen sind.

0:01:39.450,0:01:42.420
Die gehören zur Klasse und wirken 
auf jedes Objekt der Klasse gleich.

0:01:42.420,0:01:45.360
Natürlich ist das, was wir hier 
jetzt haben, nicht das einzige

0:01:45.360,0:01:47.580
mögliche Objekt, das man von 
der Klasse Point haben könnte.

0:01:47.580,0:01:53.580
Natürlich könnte man ein weiteres oder 
beliebig viele weitere Objekte haben.

0:01:53.580,0:01:55.290
Die müssten irgendwie anders heißen.

0:01:55.290,0:01:57.300
Die sollten jeweils einen eindeutigen Namen haben.

0:01:57.300,0:02:00.690
Also zum Beispiel könnten wir hier 
ein Objekt haben, das p2 heißt,

0:02:00.690,0:02:05.730
und natürlich auch ein Point-Objekt 
ist, also auch so anzugeben ist.

0:02:05.730,0:02:10.410
Und das kann zum Beispiel andere konkrete 
Attributwerte für x und y enthalten.

0:02:10.410,0:02:13.120
Sollte natürlich auch für 
beide jeweils einen Wert haben.

0:02:14.530,0:02:16.690
So was hatten wir schon explizit auf der Folie.

0:02:17.530,0:02:22.030
Dann gab es diese andere Folie, wo wir 
eine Subklasse von Point gebildet haben.

0:02:22.030,0:02:24.340
Also zum Beispiel soll es ColoredPoints geben.

0:02:24.340,0:02:26.650
Das sind auch Points, aber haben zusätzlich

0:02:26.650,0:02:30.460
ein Attribut für die Farbe, 
c, und eine weitere Methode.

0:02:30.460,0:02:32.500
Die Methode wird aber bei Objektinstanziierung

0:02:32.500,0:02:36.400
natürlich wieder nicht auftreten, weil 
wir die Methoden sowieso nicht angeben.

0:02:36.400,0:02:39.760
Aber was wäre jetzt ein Objekt 
der Klasse ColoredPoint?

0:02:40.360,0:02:44.170
Das könnte zum Beispiel so aussehen.

0:02:44.170,0:02:48.250
Das sollte auch einen sinnvollen 
Namen haben, zum Beispiel cp.

0:02:48.250,0:02:52.990
Und natürlich würde als Klasse dann 
eben ColoredPoint anzugeben sein.

0:02:52.990,0:02:56.560
Und wieder diese Unterstreichung.

0:02:56.560,0:02:58.870
Und was gehört jetzt hier rein?

0:02:58.870,0:03:00.490
Alle Attribute.

0:03:00.490,0:03:01.660
Und da ist wichtig:

0:03:01.660,0:03:04.150
Es ist nicht nur das c anzugeben.

0:03:04.150,0:03:07.480
Es ist auch nicht so, dass das 
c das x oder das y ersetzt.

0:03:07.480,0:03:11.350
Sondern in der ColoredPoint-Klasse 
gibt es alle Attribute, die Point hat,

0:03:11.350,0:03:13.870
plus diejenigen, die für 
ColoredPoint eingeführt wurden.

0:03:13.870,0:03:24.010
Also ein mögliches Objekt für diese Klasse wäre 
etwa eines, das x = 2, y = 3 und c = Rot enthält.

0:03:25.510,0:03:27.460
Und wenn wir zum Beispiel die 
beiden Sachen weglassen würden,

0:03:27.460,0:03:28.870
dann wäre das Objekt nicht vollständig angegeben.

0:03:29.860,0:03:31.060
Da würden Werte fehlen.

0:03:33.010,0:03:36.160
Das ist auch wieder nicht das einzige 
mögliche Objekt der Klasse ColoredPoint.

0:03:36.160,0:03:40.810
Natürlich kann es da auch 
diverse weitere Objekte geben.

0:03:40.810,0:03:43.780
Also es könnte ein Objekt geben, von mir aus cp2.

0:03:43.780,0:03:48.880
Also einfach anders benannt durch 
diese Zahl, und dann eben auch

0:03:58.440,0:03:59.760
ColoredPoint.

0:04:01.620,0:04:07.170
Und dann müssten eben in jedem Objekt immer 
diese drei Werte x, y, c angegeben sein.

0:04:07.170,0:04:14.670
Also meinetwegen als weiteres Objekt 
hier x = 7, y = 2 und c = Blau.

0:04:17.670,0:04:21.840
Das wären links zwei Objekte der Klasse Point, 
rechts zwei Objekte der Klasse ColoredPoint.

0:04:21.840,0:04:25.050
Soviel dazu.

0:04:25.050,0:04:38.010
Als weitere Beobachtung tauchte auf den Folien 
die Möglichkeit der Mehrfachvererbung auf.

0:04:38.010,0:04:40.140
Schauen wir das an diesem Beispiel mal an.

0:04:40.140,0:04:42.720
Also stellen wir uns vor, neben dieser Vererbung

0:04:42.720,0:04:51.540
von Point zu ColoredPoint gäbe es 
auch noch eine Klasse für 3D-Punkte.

0:04:51.540,0:04:53.850
Also Point war ja zweidimensional.

0:04:53.850,0:04:57.840
Nehmen wir an, es soll noch eine 
Klasse von 3D-Punkten geben.

0:04:57.840,0:05:01.380
Was hätte die für weitere Angaben?

0:05:01.380,0:05:04.950
Also mindestens muss sie natürlich 
eine weitere Koordinate speichern.

0:05:04.950,0:05:09.300
Also x und y sind ja schon vorhanden, 
weil sie geerbt werden von Point.

0:05:09.300,0:05:12.630
3D-Point würde zusätzlich 
eine z-Koordinate enthalten.

0:05:12.630,0:05:14.760
Vielleicht auch irgendwelche Methoden.

0:05:14.760,0:05:16.830
Aber nehmen wir mal an, wir brauchen 
keine zusätzlichen Methoden,

0:05:16.830,0:05:19.020
sondern arbeiten mit denen, 
die schon vorhanden sind.

0:05:19.020,0:05:21.660
Es geht jetzt nur darum, das 
zusätzliche z speichern zu können.

0:05:21.660,0:05:28.770
Und es werden eben von oben, von der 
anderen Klasse, von der Point-Klasse,

0:05:29.670,0:05:33.870
die anderen Sachen geerbt, 
insbesondere das x und das y.

0:05:33.870,0:05:36.720
Jetzt hätten wir Points, wir hätten 
ColoredPoints, wir hätten 3D-Points.

0:05:36.720,0:05:37.950
Jetzt könnten wir uns auch vorstellen,

0:05:37.950,0:05:44.850
dass wir gerne farbliche Punkte im 
3-dimensionalen Raum haben wollen.

0:05:44.850,0:05:50.310
Also eigentlich eine Klasse, die sowohl x und y 
enthält als die zweidimensionalen Koordinaten,

0:05:50.310,0:05:56.640
als auch eine dritte Koordinate für die dritte 
Dimension, aber eben auch noch eine Farbe.

0:05:58.320,0:05:59.520
Mehrfachvererbung würde uns das erlauben.

0:05:59.520,0:06:02.940
Ich habe schon gesagt, das unterstützen 
nicht alle Programmiersprachen.

0:06:02.940,0:06:05.010
Aber das Konzept als Modellierungskonzept gibt es.

0:06:05.010,0:06:08.850
Dann könnte man also eine 
weitere Klasse einführen.

0:06:09.430,0:06:17.980
Die könnte zum Beispiel 3DColoredPoint heißen.

0:06:18.490,0:06:27.790
Und von der will man einfach sagen, dass 
sie von den beiden anderen Klassen erbt.

0:06:27.790,0:06:38.170
Also sie würde sowohl von ColoredPoint 
erben als auch von 3DPoint.

0:06:38.170,0:06:42.700
Und das bedeutet, dass, selbst 
wenn ich nichts weiter angebe,

0:06:42.700,0:06:48.460
diese Klasse per se schon vier 
Attribute hat, nämlich x, y, z und c.

0:06:48.460,0:06:54.520
Also ein Objekt dieser Klasse könnte 
dann zum Beispiel wie folgt aussehen:

0:06:54.520,0:07:05.050
Es muss einen Namen haben, nennen 
wir es mal der Einfachheit halber p.

0:07:05.050,0:07:13.180
Es soll 3DColoredPoint instanziieren, 
und muss dann welche Attribute belegen?

0:07:13.180,0:07:17.590
Nun, alle von den anderen 
Klassen geerbten Attribute.

0:07:17.590,0:07:28.900
Also x = 3, y = 0, z = 4 und c = Rot zum Beispiel.

0:07:28.900,0:07:33.610
Obwohl hier überhaupt keine Attribute angegeben 
sind, müssten die alle vorhanden sein.

0:07:33.610,0:07:38.770
Weil sie von den anderen Klassen geerbt werden, 
und zwar jeweils von den entsprechenden Stellen.

0:07:38.770,0:07:47.710
Also wir erben z von hier, c von hier und x und 
y eigentlich auf zwei Wegen, nämlich so und so.

0:07:47.710,0:07:56.230
Und wir hatten sozusagen Glück, dass kein Attribut 
irgendwie in zwei der beteiligten Klassen auftrat.

0:07:56.230,0:07:59.740
Dann könnte man unter Umständen 
Mehrdeutigkeitsprobleme kriegen.

0:07:59.740,0:08:02.800
Aber hier ist alles wohldefiniert, gut modelliert.

0:08:02.800,0:08:07.690
Und wir können sinnvoll von 
solchen 3D-Gefärbten-Punkten reden.
