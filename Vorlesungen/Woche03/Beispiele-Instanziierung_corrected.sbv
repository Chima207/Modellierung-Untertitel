0:00:00.000,0:00:04.290
Welcome to the last video for this week.

0:00:04.290,0:00:09.300
I'm recording this mainly because
I want to try out my

0:00:09.300,0:00:14.130
recording technique in case I want
to draw you something in this app.

0:00:14.130,0:00:20.130
In terms of content, I'll just
do briefly what was on the slides

0:00:20.130,0:00:26.640
as well, on the point
of instantiating classes to objects.

0:00:26.640,0:00:29.580
Let's first look at the
class on the left here.

0:00:29.580,0:00:31.110
That was the Point class from the slides.

0:00:31.110,0:00:35.550
And there I already had an example,
that if you draw an object to

0:00:35.550,0:00:42.120
it, it could look like this.

0:00:42.120,0:00:49.140
So you also have a box like
that, but it only has two sections.

0:00:49.140,0:00:53.310
So there is nothing that
would correspond to these method boxes.

0:00:53.310,0:00:55.710
Instead, you simply have a line at the

0:00:55.710,0:01:00.660
top where you have to enter the
name of the object and the corresponding class.

0:01:00.660,0:01:05.460
So for example myPoint is
from the class Point, and

0:01:05.460,0:01:09.690
syntactically this is
to be underlined here.

0:01:09.690,0:01:15.720
And then in the box below
you have to specify the attribute assignments.

0:01:15.720,0:01:20.610
So in this case for x
a number and for y a number.

0:01:20.610,0:01:23.370
I could write them one below the
other, if I had left space for it.

0:01:23.370,0:01:26.250
I also allow myself to write it this way,

0:01:26.250,0:01:31.620
if I now want to assign the
two attributes x and y in the case.

0:01:32.520,0:01:36.300
So a third box somehow for
the methods does not exist, because

0:01:36.300,0:01:39.450
they are not to be created in the object.

0:01:39.450,0:01:42.420
They belong to the class and have the
same effect on every object of the class.

0:01:42.420,0:01:45.360
Of course, what we have
here now is not the

0:01:45.360,0:01:47.580
only possible object you could
have from the class Point.

0:01:47.580,0:01:53.580
Of course, you could have another
object or any number of other objects.

0:01:53.580,0:01:55.290
They would have to
have different names somehow.

0:01:55.290,0:01:57.300
They should each have a unique name.

0:01:57.300,0:02:00.690
So, for example, we could have an
object here called p2, and of course

0:02:00.690,0:02:05.730
it's also a Point object, so
it has to be specified that way.

0:02:05.730,0:02:10.410
And that can contain, for example, other
concrete attribute values for x and y.

0:02:10.410,0:02:13.120
Should of course also have
a value for each of them.

0:02:14.530,0:02:16.690
We already had something like
that explicitly on the slide.

0:02:17.530,0:02:22.030
Then there was this other slide
where we formed a subclass of Point.

0:02:22.030,0:02:24.340
So for example,
there should be ColoredPoints.

0:02:24.340,0:02:26.650
Those are also Points, but have an

0:02:26.650,0:02:30.460
additional attribute for the
color, c, and another method.

0:02:30.460,0:02:32.500
But of course, the method will not

0:02:32.500,0:02:36.400
appear in object instantiation again, because
we don't specify the methods anyway.

0:02:36.400,0:02:39.760
But what would be an
object of the class ColoredPoint now?

0:02:40.360,0:02:44.170
It could look like this, for example.

0:02:44.170,0:02:48.250
It should also have a
meaningful name, for example cp.

0:02:48.250,0:02:52.990
And of course the
class would be ColoredPoint.

0:02:52.990,0:02:56.560
And again this underlining.

0:02:56.560,0:02:58.870
And what belongs in here now?

0:02:58.870,0:03:00.490
All attributes.

0:03:00.490,0:03:01.660
And there is important:

0:03:01.660,0:03:04.150
Not only the c has to be specified.

0:03:04.150,0:03:07.480
It is also not that the
c replaces the x or the y.

0:03:07.480,0:03:11.350
But in the ColoredPoint class there
are all attributes that Point has,

0:03:11.350,0:03:13.870
plus those that
were introduced for ColoredPoint.

0:03:13.870,0:03:24.010
So a possible object for this class would be something like one
that contains x = 2, y = 3, and c = red.

0:03:25.510,0:03:27.460
And if we were to
omit those two things, for example,

0:03:27.460,0:03:28.870
then the object would
not be fully specified.

0:03:29.860,0:03:31.060
There would be missing values.

0:03:33.010,0:03:36.160
Again, this is not the only
possible object of the ColoredPoint class.

0:03:36.160,0:03:40.810
Of course there could
be several other objects.

0:03:40.810,0:03:43.780
So there could be an object, for me cp2.

0:03:43.780,0:03:48.880
So just named differently by
this number, and then also

0:03:58.440,0:03:59.760
ColoredPoint.

0:04:01.620,0:04:07.170
And then these three values x, y, c
would always have to be specified in each object.

0:04:07.170,0:04:14.670
So, as a further object here x =
7, y = 2 and c = blue.

0:04:17.670,0:04:21.840
That would be two objects of the class Point on
the left, two objects of the class ColoredPoint on the right.

0:04:21.840,0:04:25.050
So much for that.

0:04:25.050,0:04:38.010
Another observation that appeared on the
slides was the possibility of multiple inheritance.

0:04:38.010,0:04:40.140
Let's take a look
at that with this example.

0:04:40.140,0:04:42.720
So let's imagine that
besides this inheritance from

0:04:42.720,0:04:51.540
Point to ColoredPoint, there was
also a class for 3D points.

0:04:51.540,0:04:53.850
So Point was two-dimensional.

0:04:53.850,0:04:57.840
Let's assume that there should
be another class of 3D points.

0:04:57.840,0:05:01.380
What would it
have for further specifications?

0:05:01.380,0:05:04.950
At least it has
to store one more coordinate.

0:05:04.950,0:05:09.300
So x and y are already
present, because they are inherited from Point.

0:05:09.300,0:05:12.630
3D-Point would additionally
contain a z-coordinate.

0:05:12.630,0:05:14.760
Maybe also some methods.

0:05:14.760,0:05:16.830
But let's assume we don't
need any additional methods, but

0:05:16.830,0:05:19.020
work with the ones
that are already there.

0:05:19.020,0:05:21.660
It is now only a matter of
being able to store the additional z.

0:05:21.660,0:05:28.770
And it's just inheriting from above,
from the other class, from the Point

0:05:29.670,0:05:33.870
class, the other things, especially
the x and the y.

0:05:33.870,0:05:36.720
Now we would have Points, we would
have ColoredPoints, we would have 3D Points.

0:05:36.720,0:05:37.950
Now we could also imagine that

0:05:37.950,0:05:44.850
we would like to have
colored points in 3-dimensional space.

0:05:44.850,0:05:50.310
So actually a class that contains both
x and y as the two-dimensional coordinates,

0:05:50.310,0:05:56.640
as well as a third coordinate for
the third dimension, but just also a color.

0:05:58.320,0:05:59.520
Multiple inheritance would allow
us to do that.

0:05:59.520,0:06:02.940
I already said, not
all programming languages support that.

0:06:02.940,0:06:05.010
But the concept as
a modeling concept exists.

0:06:05.010,0:06:08.850
So then you
could introduce another class.

0:06:09.430,0:06:17.980
It could be
called 3DColoredPoint, for example.

0:06:18.490,0:06:27.790
And you just want to say that
it inherits from the other two classes.

0:06:27.790,0:06:38.170
So it would inherit from
ColoredPoint as well as from 3DPoint.

0:06:38.170,0:06:42.700
And that means that even
if I don't specify anything

0:06:42.700,0:06:48.460
else, this class per se already has
four attributes, namely x, y, z and c.

0:06:48.460,0:06:54.520
So an object of this class
could then look like this, for example:

0:06:54.520,0:07:05.050
It must have a name,
let's call it p for simplicity.

0:07:05.050,0:07:13.180
It should instantiate 3DColoredPoint, and
then it must occupy what attributes?

0:07:13.180,0:07:17.590
Well, all the attributes
inherited from the other classes.

0:07:17.590,0:07:28.900
So x = 3, y = 0, z
= 4 and c = red for example.

0:07:28.900,0:07:33.610
Although no attributes are specified here at
all, they would all have to be there.

0:07:33.610,0:07:38.770
Because they are inherited from the other
classes, and each from the appropriate places.

0:07:38.770,0:07:47.710
So we inherit z from here, c from here, and
x and y actually in two ways, so and so.

0:07:47.710,0:07:56.230
And we were sort of lucky that no
attribute somehow appeared in two of the classes involved.

0:07:56.230,0:07:59.740
Then you could get
ambiguity problems under some circumstances.

0:07:59.740,0:08:02.800
But here everything is
well defined, well modeled.

0:08:02.800,0:08:07.690
And we can meaningfully talk
about 3D colored points like that.
