0:00:00.000,0:00:03.390
So, we have
just seen this example.

0:00:03.390,0:00:08.550
And I had already made a few
hints in the direction of Petri nets.

0:00:08.550,0:00:14.520
And in fact, in what follows, we're
going to compare the individual elements of

0:00:14.520,0:00:19.170
activity diagrams, their constituents, to
Petri net constituents, borrowing from

0:00:19.170,0:00:24.870
a semantics found in the literature
for at least parts of activity diagrams.

0:00:24.870,0:00:29.760
We're not going to use that in the
sense of really examining that semantically, but we're

0:00:29.760,0:00:35.550
going to use that correspondence to explain
the activity diagram elements in the process.

0:00:35.550,0:00:39.690
And we'll always do that
for the individual elements in general,

0:00:39.690,0:00:42.510
but also related
to this example.

0:00:42.510,0:00:49.530
O.k., so basically this then
gives us a way to translate

0:00:49.530,0:00:52.800
activity diagrams
into Petri nets.

0:00:52.800,0:00:57.960
Just as we had translated Petri
nets with capacities into Petri nets

0:00:57.960,0:01:01.800
without capacities and through this, of
course, one can then understand activity

0:01:01.800,0:01:06.180
diagrams, because we know for Petri
nets what the respective meaning is.

0:01:06.180,0:01:12.150
Okay, so what are the first
kind of nodes in activity diagrams?

0:01:12.150,0:01:15.120
Those were these action
nodes or simply actions.

0:01:15.120,0:01:20.700
They're these ovals or
rectangles with rounded corners.

0:01:20.700,0:01:24.030
So these kind of nodes that looked
like that in the diagram as well.

0:01:24.030,0:01:30.720
So the "create plan" was such a
first, such an action node or action.

0:01:30.720,0:01:36.660
O.k. and that corresponds very directly
in Petri nets simply to transitions.

0:01:36.660,0:01:39.480
In Petri nets, transitions looked like
this and could have a name.

0:01:39.480,0:01:42.900
So so an action from
an activity diagram would just be

0:01:42.900,0:01:45.990
a transition with the appropriate
name in a Petri net.

0:01:45.990,0:01:49.830
And because it's about action, you
could take as such an indication

0:01:49.830,0:01:54.750
that you usually then have names there
that somehow correspond to activities or verbs.

0:01:54.750,0:01:56.610
Yes, like
here creating.

0:01:56.610,0:02:04.410
Okay, the intuition is
that actions stand for activities.

0:02:04.410,0:02:06.315
Something that
takes time.

0:02:06.315,0:02:07.530
Yes, we think
again of workflow,

0:02:07.530,0:02:13.320
so to speak, the
description of successive individual steps.

0:02:13.320,0:02:16.650
Then each individual step is
something that is somehow an activity.

0:02:16.650,0:02:24.510
Which perhaps takes a while, which represents
an action, like the transitions in Petri nets.

0:02:25.500,0:02:27.240
So, that would just be
a different representation, so to speak.

0:02:27.240,0:02:28.350
So that's
still quite simple.

0:02:28.350,0:02:30.450
Actions
are transitions.

0:02:30.450,0:02:36.750
Okay, then there were
the connections between actions.

0:02:36.750,0:02:38.280
Those were
these arrows.

0:02:38.280,0:02:42.900
That would be the control flow
or at some point then object flow.

0:02:42.900,0:02:47.640
If we have object nodes, we will take
the tokens then not only simply as markers.

0:02:47.640,0:02:53.010
As markers where the focus
is in the activity diagram.

0:02:53.010,0:02:54.750
But actually, like
in the house construction

0:02:54.750,0:02:57.600
example a token stands for a
concrete plan, thus for an object.

0:02:57.600,0:03:02.460
Something that is also perhaps related
to a class and object diagram.

0:03:02.460,0:03:04.830
Then we're talking more about the
object flow of all the places.

0:03:04.830,0:03:08.130
There is this flow between
actions in the first place.

0:03:08.130,0:03:11.760
How can we represent
that in a Petri net?

0:03:11.760,0:03:14.310
Well, in the Petri
net, after all, there can

0:03:14.310,0:03:17.580
be no connection, no linkage
from a transition to a transition.

0:03:17.580,0:03:21.120
Yes, if we translate action as
transitions, then "Choose building site" would

0:03:21.120,0:03:25.950
be a transition, "Find architect"
a transition, then there can't be

0:03:25.950,0:03:28.500
a direct connection, as
here in the activity

0:03:28.500,0:03:33.390
diagram, because in Petri nets transitions
and sites must always occur alternately.

0:03:33.390,0:03:39.390
Therefore there will be
a so called auxiliary place.

0:03:39.390,0:03:42.420
So on the Petri net side there
is a place, which does not get

0:03:42.420,0:03:46.140
a name, which is not directly motivated by
anything that occurs here in the activity diagram.

0:03:46.140,0:03:49.470
It is simply there to establish
the connection between these two actions or

0:03:49.470,0:03:54.840
on the Petri net
side between these two transitions.

0:03:54.840,0:03:59.610
Because such a process could be, if
somehow "select building site" has fired, I

0:03:59.610,0:04:01.800
would put down
a token, a marker.

0:04:01.800,0:04:04.620
And then this transition could
fire and pass this token.

0:04:04.620,0:04:09.600
And then could fire "create plan"
and again somehow still have an output.

0:04:09.600,0:04:15.550
So then this sequence/this sequence of individual
steps in the activity diagram would correspond

0:04:15.550,0:04:19.150
to the sequential
firing of these transitions.

0:04:19.150,0:04:21.550
And for this they
should be linked meaningfully

0:04:21.550,0:04:25.150
and this is easily done
here by such mediating auxiliary places.

0:04:25.150,0:04:32.980
Yes, so of course these
edges/these arrows then correspond to

0:04:32.980,0:04:37.870
the temporal logical sequence of
the order in which things happen.

0:04:39.250,0:04:45.040
And auxiliary places are that because
they are only there to produce

0:04:45.040,0:04:48.490
this legality of
the Petri net.

0:04:48.490,0:04:50.680
They also do not
have their own name.

0:04:50.680,0:04:53.620
We had that already several times that
we could not necessarily give a meaningful

0:04:53.620,0:04:55.660
name to all
elements in Petri net.

0:04:56.320,0:04:58.900
These three transitions would have a
meaningful name here, because they correspond to

0:04:58.900,0:05:03.880
these actions, and these are auxiliary places, because
they are simply there to get the flow correct

0:05:03.880,0:05:07.990
and not because they correspond to
anything directly from the activity diagram.

0:05:09.670,0:05:12.850
They don't deserve their own name,
so to speak, and we've seen something

0:05:12.850,0:05:14.470
similar in Petri
nets for Transition.

0:05:14.470,0:05:17.170
So auxiliary transitions that
didn't have their own name

0:05:17.170,0:05:21.640
because, for example, they don't correspond here
exactly to an action from the activity diagram.

0:05:21.640,0:05:29.080
Ok, so action,
we have, become transitions.

0:05:29.080,0:05:38.350
Control flow can be realized by
inserted places and the respective connections.

0:05:38.350,0:05:41.860
Then in the activity diagram that
we had seen, there were these object

0:05:41.860,0:05:43.750
nodes or one
such object node.

0:05:43.750,0:05:46.630
That was another kind of
node in the activity diagram.

0:05:46.630,0:05:48.670
Also represented differently
in a rectangle

0:05:48.670,0:05:51.790
without rounded corners,
so an actual rectangle.

0:05:51.790,0:05:57.790
Intuitively, from the point of view of
understanding, these stand, so to speak, for

0:05:57.790,0:06:00.490
a storage possibility, for a
storage for objects, concrete objects.

0:06:00.490,0:06:04.810
Quite understandable in the
sense of object-oriented modeling.

0:06:04.810,0:06:07.150
So, if we imagine
that we might use an

0:06:07.150,0:06:10.480
activity diagram to describe
or model a software system.

0:06:10.480,0:06:14.260
Modeling an aspect of it, then
there might actually be a class name

0:06:14.260,0:06:18.340
here, from a class
diagram, what we developed earlier.

0:06:18.340,0:06:22.840
And the idea would then be that the
objects that are here, that the marking/tokens then stand

0:06:22.840,0:06:26.730
for, that they should actually
be instances of the particular class.

0:06:26.730,0:06:31.260
That doesn't show up in the example now
because we don't have a class diagram in mind.

0:06:31.260,0:06:35.790
But the notation would be that
such an object node could actually

0:06:35.790,0:06:38.940
be used to store
concrete manifestations of classes.

0:06:38.940,0:06:43.800
And these just correspond to
normal places in the Petri net.

0:06:43.800,0:06:47.460
In the Petri net, if we wanted to
store resources somehow, we use places for that.

0:06:47.460,0:06:53.640
So this object node would become a place in
the Petri net and it would have a name.

0:06:53.640,0:06:57.360
So it's not just auxiliary
places, it's a real named place.

0:06:57.360,0:06:59.910
Logically it gets the same
name as this object node.

0:06:59.910,0:07:03.090
And if there would be
for example here now several possibilities,

0:07:03.090,0:07:05.400
from which somehow
a plan can result.

0:07:05.400,0:07:08.160
Then this would correspond to the
fact that there are several transitions, several

0:07:08.160,0:07:12.360
actions from the activity diagram translated
into transitions in the Petri net.

0:07:12.360,0:07:18.660
Several transitions that can
deposit tokens on this place.

0:07:18.660,0:07:23.490
So somehow a
management of resources and

0:07:23.490,0:07:29.010
for that we had stored
tokens on places in Petri nets.

0:07:29.700,0:07:35.130
From this part of the activity diagram then
this part of a Petri net with these

0:07:35.130,0:07:43.620
two actions to transition and these
object nodes realized by a named place.

0:07:43.620,0:07:51.120
The names of such places or of
object nodes are usually nouns and not verbs.

0:07:51.120,0:07:53.880
Yes, because it is just about
objects that can be put there.

0:07:53.880,0:08:01.410
O.k., I had already
indicated that a moment ago.

0:08:01.410,0:08:04.080
So, if we were
actually doing software modeling,

0:08:04.080,0:08:07.590
then such object nodes would
often be labeled with class names.

0:08:07.590,0:08:10.350
Because the notation then is that
that makes the connection between the

0:08:10.350,0:08:11.361
static modeling and
the dynamic modeling.

0:08:11.361,0:08:12.330
The static modeling, which describes
the class object and the dynamic

0:08:12.330,0:08:22.320
modeling, which then describes sequences
of actions and can use

0:08:23.610,0:08:28.290
that there are these object
types from the static modeling.

0:08:28.290,0:08:32.850
I.e. not that these
object nodes have somehow

0:08:32.850,0:08:37.710
attributes, as we have
assigned attributes to classes.

0:08:37.710,0:08:41.880
Because this node should
not be an object,

0:08:41.880,0:08:44.512
but this should be
a storage for different objects.

0:08:44.512,0:08:52.080
So it would make no sense to
structure this node somehow and to write

0:08:52.080,0:08:54.450
attribute values into
it, for example.

0:08:54.450,0:08:58.290
Because it is only a storage
for concrete objects and not an object.

0:08:58.290,0:09:05.940
O.k., what else did we
have in our example activity diagram.

0:09:05.940,0:09:09.210
Well we still had
this kind of nodes.

0:09:09.210,0:09:14.670
I hadn't given them a name yet,
they are called branch nodes or "decision nodes".

0:09:14.670,0:09:16.890
In the example, we had made
a decision like that there as well.

0:09:16.890,0:09:19.230
That was after
"creating a plan".

0:09:19.230,0:09:23.850
Had we wanted to submit it
and there should be the possibility,

0:09:23.850,0:09:26.640
either that the plan
is accepted or not.

0:09:26.640,0:09:31.350
And that led to
various further processes, finally

0:09:31.350,0:09:34.230
a branching in the flow,
in the control or object flow.

0:09:34.230,0:09:38.970
Where out of alternative paths,
exactly one is always chosen.

0:09:38.970,0:09:43.500
So no splitting of
control flow or of tokens,

0:09:43.500,0:09:47.700
but actually a
choice of one way.

0:09:47.700,0:09:51.630
O.k., for this these
diamond nodes are used,

0:09:51.630,0:09:54.900
which can have
several inputs or outputs.

0:09:54.900,0:09:59.700
And possibly have such
conditions at the exits.

0:09:59.700,0:10:04.770
What would be the
equivalent in a Petri net?

0:10:04.770,0:10:08.730
Well, if we want to
somehow branch a path in

0:10:08.730,0:10:13.140
the Petri net, we can do that by
branching from a place where a token could be.

0:10:13.140,0:10:17.610
Like for example here the
submitted plan, have several possible exits,

0:10:17.610,0:10:22.860
so have several possible transitions, each
having this place as a precondition.

0:10:25.680,0:10:31.680
In that case, if this is the
transition to this action node and then we

0:10:31.680,0:10:33.750
want to have further
flow here and here,

0:10:33.750,0:10:37.650
then we couldn't have two exit
arrows directly from the transition somehow.

0:10:37.650,0:10:41.370
Because that would mean that we're splitting
something up, so we're outputting two tokens.

0:10:41.370,0:10:45.900
No, there is a place where
this action, this transition puts a token.

0:10:45.900,0:10:51.150
And then there could also be different transitions
here and here, each of which can consume

0:10:51.150,0:10:56.269
this token and then have some
flow in this direction or that direction.

0:10:56.269,0:10:59.970
So, if here below an activity
diagram is translated into further transition,

0:10:59.970,0:11:02.820
then the first of them
could be just here the output.

0:11:02.820,0:11:12.060
O.k. it can be, we even see
that in the example here, that we

0:11:12.060,0:11:15.150
now have to
introduce auxiliary transition.

0:11:15.150,0:11:19.230
So then this place ensures that
we can have such a branch.

0:11:19.230,0:11:22.140
Couldn't we
directly, yes, if

0:11:22.140,0:11:26.430
we did the same here too, there
followed another node like that in the example.

0:11:26.430,0:11:30.780
Then we can't just say,
we'll replace it again with

0:11:30.780,0:11:33.390
a place like this node
and have a direct connection.

0:11:33.390,0:11:34.110
That is
not possible.

0:11:34.110,0:11:37.020
Because of the rules of
Petri net again, that there

0:11:37.020,0:11:40.800
can be only connection from places
to transition and transition to places,

0:11:40.800,0:11:43.500
then we must introduce an
auxiliary transition at this place.

0:11:43.500,0:11:46.680
It doesn't get a name either, it
is only there to make this further transport

0:11:46.680,0:11:51.690
of a token from here to here in
a way that is legal for Petri net.

0:11:51.690,0:11:54.270
And not just have a
connection from place to place.

0:11:54.270,0:11:55.830
Which would not be
a valid Petri net.

0:11:57.360,0:11:59.430
This can occur here
for example, because a

0:11:59.430,0:12:03.810
branch node is followed by
another branch node or an

0:12:03.810,0:12:07.830
object node, which would also be
realized by a Petri net place.

0:12:07.830,0:12:11.580
In the same way this can
be also with the reverse order.

0:12:11.580,0:12:16.050
So not only with following, but
also with preceding branches or object nodes.

0:12:16.050,0:12:20.310
And also the connecting nodes
seen in the same way.

0:12:20.310,0:12:23.430
Strictly speaking, this is
not a branching node

0:12:23.430,0:12:27.810
but a connecting node
in the concrete activity diagram.

0:12:30.234,0:12:31.740
That's what
this one was.

0:12:31.740,0:12:36.120
What I'm describing is the
path from here to here.

0:12:36.120,0:12:37.920
So from this
element to this element.

0:12:38.940,0:12:43.530
This is a branching node,
because one input, two outputs, and

0:12:43.530,0:12:48.480
this is a connecting node,
because two inputs and one output.

0:12:48.480,0:12:52.830
And there it just can't be from
this place, which we had already seen, which

0:12:52.830,0:12:57.540
we had already described on a
slide, how this part of the activity

0:12:57.540,0:13:03.330
diagram becomes a
Petri net part.

0:13:03.330,0:13:04.710
There it
became a part.

0:13:04.710,0:13:08.700
And then there can't be a direct
connection from this place to this place.

0:13:08.700,0:13:11.250
In between, there must
be an auxiliary transition

0:13:11.250,0:13:14.910
in Petri net, so
to speak, painted somewhere here.

0:13:14.910,0:13:19.620
And it would be just
this one in the concrete example.

0:13:19.620,0:13:32.400
O.k., then we
have what else?

0:13:32.400,0:13:38.430
I would like to make
a few remarks at this point.

0:13:38.430,0:13:41.070
I have already
said this several times.

0:13:41.070,0:13:46.230
Namely, this reason, essential reason, for
this introduction of auxiliary places and auxiliary

0:13:46.230,0:13:51.540
transition is simply that in the end
a structurally correct Petri net should come out.

0:13:51.540,0:13:55.410
In which places and transitions occur
alternately and for this one must

0:13:55.410,0:13:58.230
add further elements
if necessary, which

0:13:58.230,0:14:03.960
were not visible at all in the
activity diagram, because other elements occur in it.

0:14:03.960,0:14:08.760
O.k. I had
also just indicated that.

0:14:08.760,0:14:12.990
So what was just in
those square brackets: "accepted", "not accepted".

0:14:12.990,0:14:18.630
So finally the control
at the branch in which

0:14:18.630,0:14:20.430
direction the control or
object flow should go.

0:14:20.430,0:14:22.500
The
so-called "guards",

0:14:22.500,0:14:29.670
of course, somehow refer to
knowledge from the application domain.

0:14:29.670,0:14:35.070
They are not described in
more detail in the activity diagram.

0:14:35.070,0:14:36.510
So, they should
not logically overlap.

0:14:36.510,0:14:38.640
So it makes sense to
have something like "accepted", "not accepted".

0:14:38.640,0:14:41.760
Because these are
exactly opposite statements,

0:14:41.760,0:14:44.100
so they neither
overlap nor forget anything.

0:14:45.420,0:14:48.180
Of course, at such
a node it should always

0:14:48.180,0:14:52.440
be clearly possible to
choose the next/appropriate exit.

0:14:54.810,0:14:59.070
But that is no
longer part of the activity

0:14:59.070,0:15:04.920
diagram, to elaborate on
how that is somehow determined.

0:15:04.920,0:15:10.200
For example, if there are
objects moving through the activity diagram.

0:15:10.200,0:15:12.930
Object flow, you could
imagine that those are conditions

0:15:12.930,0:15:17.250
that then actually refer
to attributes of those objects.

0:15:17.250,0:15:18.750
Maybe checking
some Boolean conditions.

0:15:18.750,0:15:20.880
But we won't do
that in such detail, because

0:15:20.880,0:15:25.470
we are more concerned with
the structural properties of activity diagram

0:15:25.470,0:15:28.560
and not with now a
concrete binding to software system.

0:15:28.560,0:15:35.190
In normal Petri nets we do
not specify such conditions, because that

0:15:35.190,0:15:38.220
would be outside the
semantics of Petri nets.

0:15:42.150,0:15:46.830
Okay, and that would still be
relevant if we wanted to consider

0:15:46.830,0:15:52.170
such outflow processes
quantitatively, such control flows.

0:15:52.170,0:15:54.690
So the action, I had
said, these are activities that

0:15:54.690,0:15:57.690
have a time cost
of these control elements.

0:15:57.690,0:16:00.150
So either the distribution nodes
or also immediately further still

0:16:00.150,0:16:03.240
seen, of which one assumes
that they simply happen immediately.

0:16:03.240,0:16:06.060
They are just there to somehow
influence the direction and thereby move

0:16:06.060,0:16:09.030
things in which
the flow takes place.

0:16:09.030,0:16:13.800
They don't have any themselves,
they are not meaningful actions/activities/verbs

0:16:13.800,0:16:18.390
that somehow require
extra time as steps.

0:16:18.390,0:16:22.140
That would be relevant, if
one wanted to use such

0:16:22.140,0:16:24.690
an activity diagram
to make quantitative statements.

0:16:24.690,0:16:26.520
But we will
not do that either.

0:16:26.520,0:16:31.350
O.k. let's discuss
some more elements.

0:16:31.350,0:16:34.650
We had one more element,
which were the connection nodes.

0:16:35.610,0:16:38.190
They were also represented
like this, with this diamond.

0:16:38.190,0:16:43.380
But in contrast to the branching nodes,
the "decision nodes", these are places where

0:16:43.380,0:16:47.370
several flows come together
or alternative flows come together.

0:16:47.370,0:16:49.140
So here there are
two inputs and one output.

0:16:49.140,0:16:53.760
They bring together alternative
control or object flows.

0:16:53.760,0:16:57.150
In the Petri net these
would be again simply auxiliary places.

0:16:57.150,0:17:03.780
Here it is also the case that if I
have a place and there is an arrow to

0:17:03.780,0:17:06.990
it from two different directions of
transitions, then it can be that in

0:17:06.990,0:17:10.980
this case a token comes from the
left or a token comes from the right.

0:17:10.980,0:17:12.840
In both cases there
would be a token here

0:17:12.840,0:17:18.450
afterwards which could be passed on
to the following transitions standing here.

0:17:18.450,0:17:23.760
So this would serve to merge such
a flow, from here or from here,

0:17:23.760,0:17:33.630
for continuation/continuation then in this
part of the Petri net.

0:17:33.630,0:17:40.870
O.k. of course in
the postcondition of different transition.

0:17:41.410,0:17:44.470
If necessary, auxiliary transitions can be placed
on the left and on the right.

0:17:44.470,0:17:49.900
Depending on what happened here in
the activity diagram at these two arrow

0:17:49.900,0:17:57.820
ends or places/positions from which these
arrows go out in the activity diagram.

0:17:57.820,0:18:05.590
O.k. there are not only
exactly branching or connecting nodes.

0:18:05.590,0:18:09.520
There is also, so to speak, the common
case, where we have such a diamond, in which

0:18:09.520,0:18:12.055
perhaps, for example, two
inputs and two outputs occur.

0:18:12.055,0:18:13.210
Yes, this
is also legal.

0:18:13.210,0:18:16.480
That can also
happen, can also occur.

0:18:16.480,0:18:18.670
And also this is translated
simply by a place, which

0:18:18.670,0:18:22.480
gives then evenly perhaps
in the postcondition several transitions

0:18:22.480,0:18:26.290
and at the same time
also in the precondition several transitions.

0:18:27.160,0:18:31.960
So, for example, a place that there are arrows
coming in here from the top and from the left.

0:18:31.960,0:18:34.660
And for example arrows going out
to the right and arrows going down.

0:18:35.260,0:18:39.610
So, that also fits with the
elements that exist in Petri nets.

0:18:39.610,0:18:47.440
Okay, what else did we
have in the activity diagram?

0:18:47.440,0:18:54.370
Well we still had these two graphical
elements that I haven't said anything about yet.

0:18:54.370,0:18:57.010
Yes everything else that we see
here, we have now already worked through.

0:18:57.010,0:18:59.950
Yes well, except for the
start and the end as well.

0:18:59.950,0:19:01.960
Those are the things
we still have to describe.

0:19:01.960,0:19:09.910
O.k. first of these comes
the fork or also parallelization node.

0:19:09.910,0:19:16.810
That was exactly the moment/the place/the
position in the activity diagram, where such

0:19:16.810,0:19:21.970
a flow split, in the example,
that is had carried out live.

0:19:21.970,0:19:24.430
Where I had let the
tokens wander through the network.

0:19:24.430,0:19:30.280
So that's a place where a control
flow or an object flow is split

0:19:30.280,0:19:33.490
into several parallel
flows, parallel, concurrent.

0:19:33.490,0:19:36.250
How can
you do that?

0:19:36.250,0:19:38.290
What corresponds to that
in a Petri net?

0:19:38.290,0:19:42.280
Well a transition
with multiple outputs.

0:19:42.280,0:19:47.710
So let's imagine there's
a token coming here.

0:19:47.710,0:19:53.220
And it's supposed to become two
different flows here, then that can be

0:19:53.220,0:19:57.990
realized by a transition that consumes
that one token, but outputs two tokens.

0:19:57.990,0:19:59.010
That would
lead to after

0:19:59.010,0:20:03.690
that, whatever other parts are coming
down here, that they can both fire.

0:20:03.690,0:20:08.970
The transitions that occur in here because
both here and here is a token.

0:20:08.970,0:20:13.950
So forkings in
the activity diagram

0:20:13.950,0:20:19.290
become transitions in the Petri net
with multiple places in the postcondition.

0:20:19.290,0:20:20.790
Of course, these can
also be auxiliary places.

0:20:20.790,0:20:25.380
That depends again on what comes
here still at activity diagram parts.

0:20:25.380,0:20:29.550
Maybe there is an action node directly
here, then this would be a transition.

0:20:29.550,0:20:32.070
But we can't fire from
Transitions directly to Transition, then we

0:20:32.070,0:20:35.430
have an auxiliary place here and
only after that comes the Transition, which

0:20:35.430,0:20:39.495
corresponds to the action node, which
perhaps occurred here on the left side.

0:20:39.495,0:20:42.690
And the same could happen
here in the right flow.

0:20:42.690,0:20:48.810
Ok, these are again such unnamed
transitions, they don't get a name.

0:20:48.810,0:20:54.105
We can put a fork here, but in
the activity diagram they don't have a name either.

0:20:54.105,0:20:58.320
There the actions have names,
which then become named transitions.

0:20:58.320,0:21:07.470
Okay, and now, as
with the branch and merge

0:21:07.470,0:21:12.420
nodes/branch and join nodes, there is a
counterpart to this element, so to speak.

0:21:12.420,0:21:19.350
So to the forking belongs dually the
merge or synchronization node, where just such

0:21:19.350,0:21:21.870
two flows that have been
created here are brought together again.

0:21:21.870,0:21:31.470
So merges or "join node" that would
be where several parallel flows are brought together.

0:21:31.470,0:21:33.240
What does that mean
in the Petri net?

0:21:33.240,0:21:35.640
And in the Petri net, it
means that we have to merge

0:21:35.640,0:21:41.280
again such two tokens that
were created in such a situation.

0:21:41.280,0:21:42.060
And how can
we do that?

0:21:42.060,0:21:47.040
Yes with a transition that has two places
in the precondition instead of in the postcondition.

0:21:47.040,0:21:55.830
So this kind of representation in the activity diagram
would correspond to such a situation in a Petri net.

0:21:55.830,0:22:04.290
A transition that consumes and
merges tokens from two separate flows.

0:22:04.290,0:22:06.480
In the sense that
it outputs only one token.

0:22:06.480,0:22:12.330
And here again it can be that these
are not necessarily for example object node places.

0:22:12.330,0:22:16.560
But simply auxiliary places, which are perhaps necessary,
because over here directly an action node in

0:22:16.560,0:22:24.810
the activity diagram stands, which corresponds
to a transition in the Petri net.

0:22:24.810,0:22:26.190
And then there is
an auxiliary place that

0:22:26.190,0:22:30.180
mediates from this transition
to this merge transition.

0:22:30.180,0:22:32.730
We will also see
this in the example.

0:22:32.730,0:22:34.410
That's exactly
where it appears.

0:22:34.410,0:22:40.950
So in our example activity diagram it
was so that this becomes a transition.

0:22:40.950,0:22:45.060
This also becomes a transition, because that's
the way it is with actions and

0:22:45.060,0:22:49.590
synchronization nodes/unification nodes
in the activity diagram.

0:22:49.590,0:22:52.650
Then there must be
an auxiliary place in between.

0:22:52.650,0:23:00.660
O.k., and as with the connection
and branching nodes, it can also be

0:23:00.660,0:23:03.000
the case with the merges
and forks that, for example,

0:23:03.000,0:23:06.300
they have both characteristics at
the same time, so to speak.

0:23:06.300,0:23:10.230
So a beam doesn't necessarily have to
have one input, multiple outputs, or multiple

0:23:10.770,0:23:16.170
inputs and outputs, there could also have multiple inputs
at the top and multiple outputs at the bottom.

0:23:16.170,0:23:18.210
That would then also
be represented with a

0:23:18.210,0:23:23.580
bar like that, but often it's
actually exactly a fork or merge.

0:23:23.580,0:23:28.560
So really splitting or merging,
not a mixture of those.

0:23:28.560,0:23:36.600
O.k. of course a
certain discipline is useful.

0:23:36.600,0:23:41.520
So often it will be
the case that unification occurs when

0:23:41.520,0:23:43.440
there were also
fork nodes before.

0:23:43.440,0:23:48.030
So, in this example, it is
no coincidence that this and this

0:23:48.030,0:23:50.730
bar somehow
belong together.

0:23:50.730,0:23:54.900
So this beam consumes
exactly the splitted flows,

0:23:54.900,0:23:57.090
which have
originated here above.

0:23:57.090,0:24:02.580
Somehow a discipline that if
somewhere a splitting takes place,

0:24:02.580,0:24:05.280
afterwards also again
a merging takes place.

0:24:05.280,0:24:10.530
The activity diagrams don't specify that per
se, that it always has to be.

0:24:10.530,0:24:16.860
But in the example, that will often be the
case, that there is such a correspondence of these nodes.

0:24:16.860,0:24:25.650
O.k., and then from the
example activity diagram the special

0:24:25.650,0:24:29.940
nodes for the start and for the
end of the processing are still missing.

0:24:29.940,0:24:31.410
The one
for the start.

0:24:31.410,0:24:37.500
That was this filled circle
that had no incoming edge.

0:24:37.500,0:24:38.580
That one wasn't allowed
to do that either.

0:24:38.580,0:24:43.470
So this start node is not allowed to have any
incoming edges, but it's allowed to have several outgoing edges.

0:24:43.470,0:24:46.890
And what corresponds to
this in a Petri net?

0:24:46.890,0:24:51.420
Well simply a place,
which is initially occupied.

0:24:51.420,0:24:54.060
So a place where a token
lies at the beginning, so that

0:24:54.060,0:24:57.810
a control flow/flow can
come into being at all.

0:24:57.810,0:25:03.120
How many
tokens are there?

0:25:03.120,0:25:03.930
How many
tokens are there?

0:25:04.440,0:25:07.470
As many as there are
outgoing edges from the start node.

0:25:07.470,0:25:11.445
So it could be that from a
start node activity diagram two edges go out.

0:25:11.445,0:25:16.080
For example one to the right and one
downwards, then there should be two tokens in

0:25:16.080,0:25:20.430
the translated Petri net
on this corresponding start place.

0:25:20.430,0:25:23.250
So that one can start the
flow to the right, so to speak.

0:25:23.250,0:25:25.980
So Transition can fire, which
would stand here on the right,

0:25:25.980,0:25:29.010
accordingly any action nodes,
which stand here evenly.

0:25:29.010,0:25:32.370
If there is still a second exit
with further actions here below perhaps, then there

0:25:32.370,0:25:34.740
would have to be just
here the second token, so

0:25:34.740,0:25:40.590
that also the transition, which are
drawn in here below translated, can fire.

0:25:40.590,0:25:46.230
So a place with as many tokens
as arrows going out from the start

0:25:46.230,0:25:49.080
node of
the activity diagram.

0:25:49.080,0:25:59.100
O.k., then there is such a rule that
these edges do not lead to object nodes.

0:25:59.100,0:26:05.700
So the intuition is that object nodes
are supposed to, yes hold some concrete artifacts,

0:26:05.700,0:26:09.270
like the plan earlier, and that
must always be preceded by an action.

0:26:09.270,0:26:14.220
So objects don't just come
into existence out of thin air.

0:26:14.220,0:26:18.300
The idea would be, if we want to have
an object, like in the activity diagram for building a

0:26:18.300,0:26:19.440
house, then we would
have a start node.

0:26:19.440,0:26:27.360
That sort of sets an action in motion, and
then from that action, an object can come into being,

0:26:27.360,0:26:29.580
which is put
on an object node.

0:26:29.580,0:26:31.620
But direct transitions
from these start nodes

0:26:31.620,0:26:34.890
to object nodes do not
exist according to activity diagrams.

0:26:37.560,0:26:41.550
What is allowed is that there are
several start nodes in an activity diagram.

0:26:42.750,0:26:47.880
Unlike in the flat state diagram, where
there was always one excellent start node, in

0:26:47.880,0:26:54.150
the activity diagram there may be
several start nodes represented this way.

0:26:54.150,0:26:56.970
And that fits,
because in Petri nets

0:26:56.970,0:27:01.140
we can have multiple places
at the beginning that have tokens.

0:27:01.140,0:27:02.520
And that's what
would happen here.

0:27:02.520,0:27:06.870
If we have two start
nodes in the activity diagram, the

0:27:06.870,0:27:11.550
translated Petri net would also have two places, in
which at least one token lies at the beginning.

0:27:11.550,0:27:16.470
And then actions/transitions can fire at the
same time at different places at the beginning.

0:27:16.470,0:27:21.660
O.k., and then there must
be something for the end.

0:27:22.740,0:27:24.540
To the start
belongs also an end.

0:27:24.540,0:27:29.430
In fact, there are two
different forms in the activity diagram.

0:27:29.430,0:27:30.750
Only one of them
we had seen so far.

0:27:30.750,0:27:33.840
So in the
example this element appeared.

0:27:33.840,0:27:35.850
The so-called
activity end.

0:27:35.850,0:27:38.340
That's actually supposed
to, if it's reached,

0:27:38.340,0:27:43.860
by a flow, so to
speak, end the activity completely.

0:27:43.860,0:27:49.380
So all the control and object flows that are
still going on in the activity diagram, so to speak,

0:27:50.280,0:27:55.530
would be terminated immediately when one
of these activity end elements is reached.

0:27:55.530,0:27:58.350
There is no direct equivalent
for this in Petri nets.

0:27:58.350,0:28:01.710
In Petri nets, you can't describe
somewhere when that place is reached, then

0:28:01.710,0:28:06.690
all of a sudden all tokens/all
tokens in the entire Petri net disappear.

0:28:12.420,0:28:12.821
In Petri nets
everything is always local.

0:28:12.821,0:28:19.050
What rather happens in Petri nets is what
corresponds to the end of flow in activity diagram.

0:28:19.050,0:28:23.970
Namely, that eats, so to speak,
only the control flow running into it.

0:28:23.970,0:28:30.900
That would correspond to a transition
that can only incoming but none outgoing.

0:28:30.900,0:28:34.710
So it eats tokens running into
it and does not output anything else.

0:28:34.710,0:28:38.760
So, it eats only locally the
tokens at this place and not somehow

0:28:38.760,0:28:44.760
all tokens, which are in
the whole activity diagram resp.

0:28:44.760,0:28:45.690
Petri net
on the way.

0:28:45.690,0:28:50.910
It always depends
on the concrete example,

0:28:50.910,0:28:54.960
if there is a difference
between these two possible ends.

0:28:54.960,0:29:00.570
So in the example what I had here,
I had used though this activity end as symbol.

0:29:00.570,0:29:02.430
I could also have
taken the flow end,

0:29:02.430,0:29:08.460
because here in the example it is anyway
so that only one token is on the way.

0:29:08.460,0:29:10.440
So it is split here
times, but linked again before.

0:29:10.440,0:29:18.420
That means, if somehow a token arrives here at the
bottom, then in the whole remaining Petri net, activity diagram/Petri

0:29:18.420,0:29:22.230
net, there can't be another
token on the way somewhere.

0:29:22.230,0:29:24.930
So this is anyway the only
token which is still on the

0:29:24.930,0:29:32.580
way here and if this is eaten,
the processing as a whole is over.

0:29:32.580,0:29:35.370
In more
complicated situations,

0:29:35.370,0:29:40.260
where there were more start nodes and
therefore more tokens are on the way,

0:29:40.260,0:29:44.571
it could make a difference if I
have this activity end or flow end.

0:29:44.571,0:29:48.870
But we'll be careful in tasks that you
get that that doesn't fall on your feet.

0:29:48.870,0:29:53.190
And somehow the
difference causes you problems.

0:29:55.170,0:29:56.670
So in examples
that we're going to

0:29:56.670,0:30:01.950
look at, it's always uniquely
convertible how you describe the end.

0:30:01.950,0:30:09.030
Outgoing edges are not allowed from
either the activity end or the

0:30:09.030,0:30:11.820
flow end, because they're
supposed to be just positions

0:30:11.820,0:30:14.820
where a flow ends and doesn't
somehow go a little bit further.

0:30:14.820,0:30:20.940
O.k., how
we implement this,

0:30:20.940,0:30:25.830
we can see directly in the example
Petri net, for the house building example.

0:30:25.830,0:30:32.310
So that was our
house building activity diagram.

0:30:32.310,0:30:36.450
And we have now actually seen
in principle for all elements occurring in

0:30:36.450,0:30:42.690
it, how they can be translated into Petri
net components, except for this somewhat spongy end.

0:30:42.690,0:30:46.380
There I had only indicated grade,
that will be as a rule somehow.

0:30:46.380,0:30:50.400
Either a place, where a token lands,
but then it doesn't go on from there.

0:30:50.400,0:30:53.910
Or a transition that eats
a token and doesn't output anything.

0:30:53.910,0:30:59.040
And actually we can do what
I had done on the intermediate slides

0:30:59.040,0:31:03.390
now for individual excerpts/individual
parts of the activity diagram.

0:31:03.390,0:31:09.780
Tinker together overall and then get
a Petri net, which describes the

0:31:09.780,0:31:14.250
same context/behavior as should be
represented by this activity diagram.

0:31:14.250,0:31:19.230
That would essentially just
be tinkering together the

0:31:19.230,0:31:23.430
components that we've seen now
for individual excerpts throughout the slides.

0:31:23.430,0:31:29.100
And when we do that,
it creates this Petri net.

0:31:30.360,0:31:34.680
That already has a very
similar shape to the activity diagram.

0:31:34.680,0:31:37.710
And in fact, you can
now assign here the individual components

0:31:38.400,0:31:45.210
of the activity diagram each corresponding
places and transitions in the Petri net.

0:31:45.210,0:31:48.180
Yes, this is here the beginning of
the start nodes: a place with a token.

0:31:48.180,0:31:55.110
Then we see here the individual
transitions, which correspond to the actions here.

0:31:55.110,0:31:58.920
We see, about the place we had
also motivated that we need an auxiliary

0:31:58.920,0:32:03.510
place in between because we can't go
directly from action to action/transition to transition.

0:32:03.510,0:32:08.890
So that then corresponds to that auxiliary place
and also the other parts here are all

0:32:08.890,0:32:15.640
motivated by how we wanted
to translate individual activity diagram elements.

0:32:15.640,0:32:17.950
So this became a
place, this became a place,

0:32:19.480,0:32:24.700
this became a transition with
two outgoing arrows to action nodes.

0:32:24.700,0:32:27.610
Since these are transitions, there
can't be a direct connection there.

0:32:27.610,0:32:32.710
Instead, there has to be an auxiliary
place introduced and that's what we're seeing here.

0:32:32.710,0:32:34.630
So that would correspond
to the fork node.

0:32:34.630,0:32:37.240
That corresponds to
the, these two transitions

0:32:37.240,0:32:40.570
correspond to the two actions
in these two concurrent paths.

0:32:40.570,0:32:43.060
And then in between there has
to be just an auxiliary node.

0:32:43.060,0:32:47.620
And so there's a clear
way to get from the activity

0:32:47.620,0:32:50.740
diagram that we've seen
to a Petri net.

0:32:50.740,0:32:55.030
And we see also the end I have
implemented here, in which simply here the last action,

0:32:55.030,0:33:00.220
these transitions, is
such a swallowed transitions,

0:33:00.220,0:33:10.760
which just corresponds to that after
the house finish nothing more happens.

0:33:10.760,0:33:13.610
This end of flow here, this
end of activity, I have simply realized

0:33:13.610,0:33:19.520
by the fact that the transition, which I have
introduced for this, has no more output for this action.

0:33:19.520,0:33:24.650
This is then
just shown here.

0:33:24.650,0:33:31.606
O.k., most of the places
here are really such auxiliary places.

0:33:31.606,0:33:33.500
You see here the
named elements are elements that

0:33:33.500,0:33:35.270
also appeared in
the activity diagram.

0:33:35.270,0:33:38.000
Especially this place, which
corresponds to an object node.

0:33:38.000,0:33:40.550
Most of the
other places are

0:33:40.550,0:33:43.850
auxiliary places introduced to make
this a legal Petri net.

0:33:43.850,0:33:48.050
There is only one auxiliary
transition in this particular case.

0:33:48.050,0:33:53.840
That is this one, which was necessary so that
I can get from this place to that place.

0:33:53.840,0:33:59.000
Which corresponded in
the activity diagram

0:33:59.000,0:34:02.840
to these two elements, where
there is nothing else in between.

0:34:02.840,0:34:06.380
But I am not allowed to go from
place to place directly in the Petri net.

0:34:06.380,0:34:15.820
O.k., and actually all that
we intuitively saw in the activity

0:34:15.820,0:34:23.020
diagram at possible step sequences, that
would be exactly all valid transition sequences,

0:34:23.020,0:34:26.800
which represent valid firing
in this Petri net.

0:34:26.800,0:34:29.740
Insofar as this Petri net
models exactly the same thing

0:34:29.740,0:34:32.350
as the activity
diagram we originally saw.

0:34:32.350,0:34:36.760
And this is a general recipe how
to get Petri nets from activity diagrams.

0:34:36.760,0:34:41.410
As long as only elements
we discussed occur, of course.

0:34:41.410,0:34:47.350
O.k., in fact there are
many more representation possibilities in activity

0:34:47.350,0:34:50.710
diagrams, and we won't
introduce all of them.

0:34:50.710,0:34:52.900
I'll touch on and
mention a few now.

0:34:52.900,0:35:00.220
But for those I will not always
give a full translation in Petri nets.

0:35:00.220,0:35:05.920
Of course, in exercises or exams
you must only be able to translate

0:35:05.920,0:35:09.430
activity diagrams into Petri nets for
which we have actually discussed this.

0:35:09.430,0:35:13.030
So for the elements that occur in
it, for which I had slides here.

0:35:13.030,0:35:16.150
But what would
be some additional expressions?

0:35:16.150,0:35:21.730
Well, in activity diagrams in UML, on the
one hand, there are further borrowings from Petri nets,

0:35:21.730,0:35:25.570
and on the other hand, there
are simply own syntax/own representation options.

0:35:25.570,0:35:31.360
For example, at object nodes you can specify the
maximum number of objects that can be located there.

0:35:31.360,0:35:35.020
And this is of course something that
corresponds to the capacity in Petri nets.

0:35:35.020,0:35:40.510
Yes, this notation 6 here in
a Petri net with capacity also corresponds

0:35:40.510,0:35:44.170
to the information that there can
never be more than six tokens.

0:35:44.170,0:35:45.880
And this would be
represented in the activity

0:35:45.880,0:35:49.360
diagram in such a way that
one indicates an upper bound here.

0:35:49.360,0:35:53.770
O.k. so a quantitative
statement at an object node.

0:35:53.770,0:35:59.620
There are also quantitative statements at the
transitions, there can be a weight at it.

0:35:59.620,0:36:04.420
And this corresponds exactly to the
weight concept also in a Petri net.

0:36:04.420,0:36:08.380
Yes, so "upperBound" would
say here, there can

0:36:08.380,0:36:14.020
be a maximum of six dishes at
the same time here as a reservoir.

0:36:14.020,0:36:18.400
And the weight would say, there are
always two dishes served at the same time.

0:36:18.400,0:36:20.470
In the
Petri net:

0:36:20.470,0:36:21.970
This place
has capacity 6.

0:36:21.970,0:36:25.720
And this link/the
connection has weight two.

0:36:28.120,0:36:30.280
This did not occur
in the example considered so

0:36:30.280,0:36:37.540
far, but can be applied to
concepts from Petri nets as well.

0:36:37.540,0:36:40.570
Especially if we consider
Petri nets with capacity.

0:36:40.570,0:36:48.250
O.k., what activity diagrams allow, which
we didn't have in Petri nets.

0:36:48.250,0:36:51.340
Was that even
in such situations, where

0:36:51.340,0:36:56.140
here, for example, several tokens are deposited
and then taken out one by one, yes,

0:36:56.140,0:37:00.250
you can describe in what
order that happens to the.

0:37:00.250,0:37:02.350
This makes no
sense with Petri nets.

0:37:02.350,0:37:04.450
If there
are six tokens

0:37:04.450,0:37:08.740
here, then I don't care which of
the six tokens will be served next.

0:37:08.740,0:37:14.770
On the other hand, in a
restaurant application, where six dishes are put

0:37:14.770,0:37:17.470
here one after the other
and are also finished, it might

0:37:17.470,0:37:19.660
be important which of these
six dishes are served next.

0:37:19.660,0:37:24.640
Namely, if possible, the ones that have been standing
the longest, so that they don't get even colder.

0:37:24.640,0:37:27.400
Yes, so you can specify an
order of objects, so to speak.

0:37:27.400,0:37:30.460
But we won't look
at that any further.

0:37:30.460,0:37:32.020
You should just
know that it's possible.

0:37:32.020,0:37:37.420
And I found that to know that it's
possible, but we're not going to consider that further.

0:37:37.420,0:37:41.110
Because we didn't do it at all
on the Petri net side either, and it

0:37:41.110,0:37:44.710
wouldn't make much sense there because, after all,
the individual tokens are not distinguishable at all.

0:37:44.710,0:37:50.740
Unlike concrete objects in a
concrete software modeling context, perhaps.

0:37:50.740,0:37:53.890
O.k. so the
point here is:

0:37:53.890,0:37:56.500
This correspondence, it's
not completely exact.

0:37:56.500,0:38:00.250
Yes not for all concepts from
activity diagram there is a direct translation.

0:38:00.250,0:38:01.600
And of course
it's also because

0:38:01.600,0:38:04.210
activity diagrams are
so semi-formal anyway.

0:38:04.210,0:38:07.780
So not all aspects are
fully specified in it at all.

0:38:07.780,0:38:14.995
In the same sense as
Petri nets were completely mathematically modeled.

0:38:14.995,0:38:19.990
But for large parts of activity diagrams
you can do a translation as well.

0:38:19.990,0:38:25.690
And only such we will have
then with you also in such tasks.

0:38:25.690,0:38:30.920
O.k. what else
do we have?

0:38:30.920,0:38:31.880
Activity
areas.

0:38:31.880,0:38:41.630
These are simply a representation, so to speak,
which does not occur in Petri nets either.

0:38:41.630,0:38:45.710
In Petri nets, there are simply
places, transition, and connections in between.

0:38:45.710,0:38:47.780
In activity
diagrams one marks.

0:38:47.780,0:38:51.620
Under certain circumstances, one
structures the diagrams even further.

0:38:51.620,0:38:53.000
One
groups elements.

0:38:53.000,0:38:56.540
For example, here you could imagine
if we have this restaurant example.

0:38:56.540,0:38:58.640
Then there could be
two areas of responsibility,

0:38:58.640,0:39:02.330
so to speak, or perhaps a spatial
distribution: the kitchen and the guest room.

0:39:02.330,0:39:04.730
And then, for example, there
are actions here that are

0:39:04.730,0:39:07.880
just carried out by the guest and
actions that are carried out by the cellar.

0:39:07.880,0:39:13.130
And then one can express this representation with
such a decomposition of the levels into several

0:39:13.130,0:39:18.380
ranges, to which then evenly
these elements are assigned these responsibly.

0:39:18.380,0:39:22.220
So the actions that take
place here are exactly "order dish",

0:39:22.220,0:39:25.100
"take order", "serve
dish", "eat dish".

0:39:25.100,0:39:29.810
This representation does not change anything,
but it makes it clearer for the

0:39:29.810,0:39:34.730
reader of this diagram, which
action is carried out by whom.

0:39:36.920,0:39:39.080
And there are several
possibilities how this can be.

0:39:39.080,0:39:40.280
It could also
go back and forth.

0:39:40.280,0:39:45.080
There is also the possibility
to create object nodes on this

0:39:45.080,0:39:49.820
border, where the intuition is that
there is a transfer, so to speak.

0:39:49.820,0:39:51.980
From one area
to the other.

0:39:51.980,0:39:54.830
But this does not appear
in the example here, and

0:39:54.830,0:39:57.860
it certainly does not appear
in our house construction example.

0:39:57.860,0:40:00.107
We didn't have that
kind of structuring there.

0:40:00.107,0:40:07.790
So it's more of a documentation
of who is responsible for what action.

0:40:07.790,0:40:11.750
It doesn't change the order
of firing or what firing actions

0:40:11.750,0:40:13.970
are possible, what sequences
of actions are possible.

0:40:13.970,0:40:18.230
It has little effect on the semantics,
so to speak, of the activity diagram or

0:40:18.230,0:40:21.560
the firing sequences in
a translated Petri net.

0:40:21.560,0:40:30.140
O.k., and then
there are various other

0:40:30.140,0:40:32.750
elements that we don't even discuss
here, that I don't even show you.

0:40:32.750,0:40:36.980
You could just read
up on them from literature.

0:40:36.980,0:40:40.520
You don't have to for this lecture,
because we don't look at those things.

0:40:40.520,0:40:45.680
There are various other elements,
each with its own representation,

0:40:45.680,0:40:49.910
that did not and will
not appear in our examples.

0:40:49.910,0:40:56.660
That's just as a bullet point again,
that you realize that UML activity diagrams have

0:40:56.660,0:41:01.460
even more richness of variation
than we've already seen here.

0:41:01.460,0:41:06.020
And in any case more than Petri
nets, where there were only places and transitions.
