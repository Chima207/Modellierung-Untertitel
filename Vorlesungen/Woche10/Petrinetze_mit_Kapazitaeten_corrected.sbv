0:00:00.000,0:00:07.530
In the last video, we
briefly discussed typical modeling patterns

0:00:07.530,0:00:11.280
in Petri nets, some of which
we had already seen in examples,

0:00:11.280,0:00:14.310
but which we
explicitly addressed again there.

0:00:14.310,0:00:21.750
One of them was
the mutual exclusion or synchronization.

0:00:22.290,0:00:27.900
We also discussed this with
the example of the feeding philosophers.

0:00:27.900,0:00:33.810
How you can avoid the problems with
two philosophers that you have with three philosophers.

0:00:35.040,0:00:42.390
Another requirement that one often has in
practical modeling with Petri nets is that

0:00:42.390,0:00:46.530
one wants to say
something about the capacity of

0:00:46.530,0:00:50.160
individual places or, in
particular, to bound the capacity.

0:00:50.160,0:00:51.240
What is
meant by this?

0:00:51.240,0:01:00.960
For example, you want to make sure that no
matter how the Petri net fires, there can never

0:01:00.960,0:01:08.190
be more than a certain number of tokens on
each of the individual places, and you also want to

0:01:08.190,0:01:12.990
be able to specify different such
upper capacity bounds for different places.

0:01:12.990,0:01:17.700
This is not exactly the same
as the boundedness of Petri nets.

0:01:17.700,0:01:19.950
Because that was a property that a
Petri net may or may not have.

0:01:19.950,0:01:26.280
You have a Petri net and you make a
statement about all the markings that can be reached.

0:01:26.280,0:01:31.830
That, for example, a certain maximum number
of tokens per place is never exceeded.

0:01:31.830,0:01:34.500
That would be
something that comes up.

0:01:35.520,0:01:38.130
One has a Petri net
and it results for this Petri

0:01:38.130,0:01:42.840
net that never more tokens
can accumulate on a place.

0:01:42.840,0:01:44.790
That is something
different than saying:

0:01:44.790,0:01:46.680
You want to
express in modeling

0:01:46.680,0:01:51.348
that, for example, a particular spot
never picks up more than five tokens.

0:01:51.348,0:01:55.170
Even if it could happen
during normal firing of the Petri

0:01:55.170,0:02:00.270
net that six tokens accumulate on the spot there,
one would like to express in the model that

0:02:00.270,0:02:03.570
then no firing at all
may take place in that case.

0:02:03.570,0:02:07.080
While the question
of boundedness/unboundedness assumes:

0:02:07.080,0:02:12.000
One fires according to the definition
of Petri nets and then observes whether

0:02:12.590,0:02:15.020
many tokens can accumulate
on a spot or not.

0:02:15.650,0:02:18.470
Suppose instead we want to
constrain that in the model.

0:02:18.470,0:02:25.790
So for example, if we describe
a snack vending machine, that might

0:02:25.790,0:02:28.250
be we want to express that
there would never be more than

0:02:28.250,0:02:35.240
20 items of a
given snack type in stock.

0:02:35.240,0:02:40.490
Or if we think back to the
afternoon modeling (which I had gone through

0:02:40.490,0:02:50.300
as an example), there was this Playstation place
where a reservoir of tokens could accumulate, how

0:02:50.300,0:02:53.450
many times after that the
action "play" could then be performed.

0:02:53.450,0:02:55.700
And you might have
wanted to somehow express that

0:02:55.700,0:03:04.160
there are never more than seven tokens
on that spot at any one time.

0:03:04.160,0:03:07.520
That if this is the case,
it is not allowed to continue.

0:03:08.240,0:03:12.290
This is the kind of restriction one
might want to impose on one's Petri nets.

0:03:13.250,0:03:14.060
How might one
go about doing that?

0:03:15.050,0:03:16.250
One has to consider:
How can I model this?

0:03:16.250,0:03:19.280
And one way out
would be to simply say:

0:03:19.280,0:03:20.660
One makes
that explicit.

0:03:20.660,0:03:23.960
You sort of introduce a
new kind of Petri net.

0:03:23.960,0:03:25.220
We'll do that
for a moment.

0:03:25.220,0:03:26.660
That doesn't
have to scare

0:03:26.660,0:03:32.210
you because it's a very simple
definition, also has very clear semantics.

0:03:32.210,0:03:36.650
You could say you just extend
the notion of Petri nets and introduce

0:03:36.650,0:03:38.840
so-called "Petri
nets with capacities".

0:03:38.840,0:03:40.790
How could
one do that?

0:03:40.790,0:03:42.710
One would have to
express this extra information.

0:03:42.710,0:03:49.430
One would want to take a normal
Petri net and add capacities to that.

0:03:49.430,0:03:54.410
By which is meant that
if S is the set of

0:03:54.410,0:03:58.400
places, you simply specify another
natural number for each place.

0:03:59.690,0:04:01.850
One can do this
in a capacity function,

0:04:01.850,0:04:06.500
a mapping from the place
set into the natural numbers.

0:04:12.470,0:04:16.720
This is to express that never
(not in the initial marking, but

0:04:16.720,0:04:24.220
also never later) there can be more tokens
on a place than k specifies for this place.

0:04:25.030,0:04:33.130
Thus in particular for the initial marking m0 it
must be true that less than or equal to k.

0:04:33.130,0:04:33.850
Less-equal in
which sense?

0:04:34.450,0:04:37.090
In the sense in which
we can compare such functions.

0:04:37.090,0:04:43.570
This is a marking in the same sense
as the initial marking is a marking, and

0:04:43.570,0:04:48.520
as the pre- and post-weighting functions
in the Petri net were markings.

0:04:48.520,0:04:52.750
And for such functions,
which we called markings,

0:04:52.750,0:04:56.050
we had
introduced a comparison.

0:04:56.050,0:04:59.350
And as a reminder, very
importantly, that was the place-by-place comparison.

0:04:59.350,0:05:00.610
That was
not simply:

0:05:00.610,0:05:04.900
How many total tokens are in m0
and how many total tokens are in

0:05:04.900,0:05:08.470
the capacity function when you
evaluate it for all the places?

0:05:08.470,0:05:11.020
But it was
about the place-by-place comparison.

0:05:11.020,0:05:14.440
So for each place it must hold that m0
of d is less than-equal to k of s.

0:05:14.440,0:05:16.750
Which means exactly
that the initial marking

0:05:16.750,0:05:22.810
on no place carries more
tokens than the capacity function allows.

0:05:22.810,0:05:27.130
And we would include this
capacity function as a modeler.

0:05:27.130,0:05:36.100
Of course, it's not particularly interesting here
if k returns zero for a place.

0:05:36.100,0:05:38.890
So we would expect there
to always be positive numbers here.

0:05:38.890,0:05:42.940
Formally, one could also allow k
to be zero for a given s.

0:05:42.940,0:05:45.490
But this would
mean that you never

0:05:45.490,0:05:48.460
want to have any
tokens on this place.

0:05:48.460,0:05:51.850
Then one does not need
to introduce this place at all.

0:05:51.850,0:05:53.920
So it would
not make sense.

0:05:53.920,0:06:03.220
Interestingly, the pipe tool that we've been
working with (that I've been working with,

0:06:03.220,0:06:07.210
and maybe you have too, in
practice) knows about such Petri nets.

0:06:07.210,0:06:10.300
It knows the notion
of "Petri nets with capacities".

0:06:10.300,0:06:17.200
I had not used that there, but
there you can write capacities at the places.

0:06:17.200,0:06:22.030
And then this fulfills exactly the
intuition, which I had already mentioned.

0:06:22.030,0:06:28.420
So each place s may
contain at most k(s) tokens, ever.

0:06:28.420,0:06:29.440
This is
very important:

0:06:29.440,0:06:31.810
So this must hold not
only for the initial marking,

0:06:31.810,0:06:34.270
but also when the
Petri net evolves and fires,

0:06:34.270,0:06:39.700
it will be ensured that there are never
more than k(s) tokens on the place s.

0:06:39.700,0:06:43.780
If there were, then a firing
operation would simply not be performed.

0:06:47.020,0:06:49.870
How do we represent
this in the graphical representation?

0:06:51.370,0:06:53.890
This is just
the mathematical indication.

0:06:54.640,0:06:57.700
There we will simply write
these capacities next to the places.

0:06:57.700,0:07:02.860
So far, we have written numbers
in the Petri net only at the

0:07:02.860,0:07:08.590
connections, at the arrows from places to transitions
and from transitions to places, with which we

0:07:08.590,0:07:13.210
have expressed the weight there,
from the precondition and postcondition function.

0:07:13.210,0:07:17.380
Now we will also allow numbers
to be attached to the places.

0:07:17.380,0:07:20.740
Namely exactly the numbers which
should correspond to the capacity.

0:07:20.740,0:07:26.290
How could this look
like, such an example network?

0:07:26.290,0:07:30.400
For example like this: a normal
Petri net, as you have seen it

0:07:30.400,0:07:34.128
many times before; but now there is
the annotation 2 at the position s1.

0:07:34.128,0:07:49.420
So at place s1, 2 would be annotated, at
place s2, 1 would be annotated, and that would

0:07:49.420,0:07:55.300
correspond (in terms of the previous slide) to this
function mapping s1 to 2 and s2 to 1.

0:07:55.300,0:07:58.610
Very
importantly:

0:07:58.610,0:08:02.540
These annotations are now at these
places and not at the arrows.

0:08:02.540,0:08:04.430
There should still
be such numbers there.

0:08:04.430,0:08:05.990
They have then the
same meaning as before, namely

0:08:05.990,0:08:11.660
describe the before and after weight
of transitions with respect to single places.

0:08:11.660,0:08:17.450
And in addition there can be just these numbers
at the places, or for a Petri net with

0:08:17.450,0:08:22.640
capacities there must be even at each
place such a number written on it.

0:08:25.070,0:08:26.210
What is
the idea here?

0:08:26.210,0:08:27.890
Why do we do
this in the example?

0:08:28.460,0:08:31.160
We would want to achieve with
it that on this place never more

0:08:31.160,0:08:33.500
than two tokens lie and on
this place never more than one token.

0:08:33.500,0:08:35.930
That is,
certain firing

0:08:35.930,0:08:39.920
operations that would be possible if you
ignore the capacities should not be allowed now.

0:08:40.820,0:08:44.030
If we look at this Petri
net and forget the two annotations

0:08:44.030,0:08:45.740
here, we could
easily consider that

0:08:45.740,0:08:49.250
all three transitions are
enabled in this initial station.

0:08:49.250,0:08:49.673
Because t1 can fire because
there is a token here.

0:08:49.673,0:08:55.430
And t2 can fire because there is a token here.
Also t3 can fire because there is a token here.

0:08:55.430,0:08:58.130
However, if we
take the capacities into

0:08:58.130,0:08:59.420
account, we would
have to conclude:

0:08:59.420,0:09:01.010
No, t1 cannot
fire after all.

0:09:01.010,0:09:05.180
Up to now it was important for the
firing of t1 that all preconditions are fulfilled,

0:09:05.180,0:09:08.690
i.e. that there is a token
here (because there is this input arrow).

0:09:08.690,0:09:12.770
Now with these capacities it
would have to be checked additionally

0:09:12.770,0:09:17.090
that the transition has also the
opportunity to deposit its output tokens.

0:09:17.090,0:09:20.180
And here this would
mean: consume a token from

0:09:20.180,0:09:24.290
here, which is also present, all good,
but also deposit a token in s2.

0:09:24.290,0:09:29.240
And that would not be allowed in
the constellation shown here, because there is

0:09:29.240,0:09:34.280
already a token here and it says
here that there may only be one token.

0:09:34.280,0:09:40.280
This means that the firing of t1, which is
actually possible in this situation, would suddenly not be allowed.

0:09:40.280,0:09:43.040
On the other hand, t3
would be allowed to fire.

0:09:43.580,0:09:47.030
It would consume this token and
has no problem to deposit anything,

0:09:47.030,0:09:48.920
because there are
no exit arrows.

0:09:48.920,0:09:54.920
And also t2 is allowed to fire, because
t2 finds a token in the precondition place and

0:09:54.920,0:10:00.320
is allowed to put a token
in the only postcondition place of t2.

0:10:00.320,0:10:03.470
Because there is already one
token, but there may be two.

0:10:03.470,0:10:07.010
So here t2 may
fire, but not t1.

0:10:07.010,0:10:08.870
And t3
may also fire.

0:10:10.380,0:10:12.810
That would be the
definition, which simply corresponds to

0:10:12.810,0:10:15.870
what is required here
for this one firing operation.

0:10:15.870,0:10:19.620
Of course, this has
to be expressed formally.

0:10:19.620,0:10:21.360
So the semantics would
have to be adapted.

0:10:21.360,0:10:23.790
But that is
also done quickly.

0:10:23.790,0:10:27.480
Let's remember, previously it
was said that a

0:10:27.480,0:10:33.000
transition is activated in a certain
marking m, in this case for m0.

0:10:33.780,0:10:40.320
So far it was only required that the
marking corresponding to the preweight function of the

0:10:40.320,0:10:43.050
transition is less than or
equal to the current marking.

0:10:43.050,0:10:48.030
Because this would mean in the end
that per place the transitions do not request

0:10:48.030,0:10:52.380
more tokens than are present in
the current situation, per place-wise comparison.

0:10:54.660,0:10:59.250
And here comes now the expression for
the fact that we must look evenly

0:10:59.250,0:11:03.360
also at the issuing points, whether there
is so to speak still enough place.

0:11:03.360,0:11:04.860
What does
that mean?

0:11:04.860,0:11:09.450
We look at what happens
when this condition is met.

0:11:09.450,0:11:13.950
Then I could say in principle
with normal firing in a Petri net:

0:11:13.950,0:11:20.940
We just subtract from the current marking
the pre-weights for the current transition we want

0:11:20.940,0:11:26.670
to fire, and add (again,
in places, with these two operations

0:11:26.670,0:11:34.470
we introduced in an earlier video) the
place specifications for this concrete transition, that

0:11:34.470,0:11:39.000
is, in each case how many
tokens should be put in the places.

0:11:39.990,0:11:42.390
And then we see if what
comes out (what would come out

0:11:42.390,0:11:47.760
in normal firing) is still
less-than-equal to the capacity marking.

0:11:47.760,0:11:52.950
And only if this is so (that's
why it says "and if it is allowed"),

0:11:52.950,0:11:56.220
the tradition t in the
marking m may fire at all.

0:11:56.220,0:11:59.670
Before, only this
first condition was required.

0:11:59.670,0:12:01.680
Now the second
condition is additionally required.

0:12:01.680,0:12:05.040
And if this is also fulfilled,
the transition is allowed to fire.

0:12:05.040,0:12:05.670
What
happens then?

0:12:06.210,0:12:08.970
Then what is written here
is simply the new marking.

0:12:08.970,0:12:11.040
This was also the
case with normal firing.

0:12:11.040,0:12:13.890
When firing a normal Petri
net, this had to be fulfilled.

0:12:16.170,0:12:19.710
Now it is additionally required that the
new marking that would come out is

0:12:19.710,0:12:21.780
less-than-equal to
the capacity function.

0:12:22.330,0:12:25.990
And only then the transition is allowed to
fire and of course leads exactly to this marking.

0:12:26.830,0:12:30.040
Here it is enforced that
always at all reachable markings

0:12:30.040,0:12:34.870
the capacity function is
not exceeded at any place.

0:12:38.680,0:12:39.730
This is
written here again.

0:12:39.730,0:12:44.110
So there it is ensured
exactly that the transitions fire only

0:12:44.110,0:12:47.560
if they would
not break the capacities.

0:12:47.560,0:12:49.420
That's exactly what
would happen here.

0:12:49.420,0:12:55.150
So if we were to fire t1 here,
then the capacitance would be exceeded at this point.

0:12:55.150,0:12:57.040
So this firing
is simply forbidden.

0:13:03.220,0:13:05.260
What would that mean
for the reachability graph?

0:13:06.370,0:13:10.690
It will be smaller, more
restricted compared to the reachability

0:13:11.200,0:13:14.680
graph that would result
if we ignore these capacities.

0:13:14.680,0:13:19.660
So here would be the
accessibility graph for this concrete example.

0:13:19.660,0:13:22.780
There, ultimately, you
can see exactly:

0:13:22.780,0:13:27.940
In the initial marking, t2 and
t3 are fireable, but t1 is not.

0:13:28.630,0:13:33.340
So in the initial marking that we see
here, (1,1) is exactly this input node (the initial

0:13:33.340,0:13:37.390
node in the reachability graph),
there t1 is not activated.

0:13:37.390,0:13:44.320
Although, if we were to ignore these
two annotations here, t1 may well fire.

0:13:44.320,0:13:47.830
So t2 can
fire, t3 can fire.

0:13:47.830,0:13:55.000
What comes out is exactly the same as
what would come out in a normal Petri net.

0:13:55.000,0:13:58.600
Only, when we look at
which further transitions are possible,

0:13:58.600,0:14:02.920
we always check
which transitions are

0:14:02.920,0:14:06.940
activated, taking into
account these capacity bounds.

0:14:06.940,0:14:14.590
Here it has an effect above all
here that we may not fire t1 here.

0:14:14.590,0:14:16.630
If, on the other
hand, we have fired

0:14:16.630,0:14:21.100
t3, which leads to the marking (1,0),
then this token would have disappeared here.

0:14:21.100,0:14:23.110
Then we are also
allowed to fire t1.

0:14:23.110,0:14:27.700
That's why the t1 transition is possible here,
because it puts the token from here to

0:14:27.700,0:14:31.510
there and that's allowed, because even after
that there's still only one token here.

0:14:32.660,0:14:35.720
Not like here, where if
we had also fired t1, there

0:14:35.720,0:14:39.440
would have been two tokens on
the second position (which is not allowed).

0:14:44.480,0:14:50.870
The other transitions are all
allowed as they are here,

0:14:50.870,0:14:53.600
and also result
from the definition.

0:14:53.600,0:15:00.950
Here, we would have effectively simply
prevented certain firing events by this

0:15:00.950,0:15:04.970
specification, and therefore restricted
the reachability graph to this

0:15:04.970,0:15:07.400
behavior (and not had another
transition for example here with t1).

0:15:07.400,0:15:11.810
You can do
it that way.

0:15:11.810,0:15:16.520
Then one would just have to
handle this new kind of Petri nets.

0:15:16.520,0:15:19.730
As I said, the tool
we saw can already do that.

0:15:19.730,0:15:23.570
However, we would then have
to start adapting all our terms.

0:15:23.570,0:15:28.340
We would now have to transfer our mathematical
terms (the properties we have been looking at)

0:15:28.340,0:15:32.180
from the normal, simple Petri nets
to these "Petri nets with capacities".

0:15:32.180,0:15:34.010
Maybe we don't
want to do that.

0:15:34.520,0:15:38.480
Maybe we would like to continue
working with the simple Petri nets we

0:15:38.480,0:15:39.830
have come to
know so far.

0:15:39.830,0:15:42.470
And interestingly, one
can do just that.

0:15:42.470,0:15:50.600
There is a way to accomplish what
we have done here without doing these

0:15:50.600,0:15:56.480
annotations in any Petri net
that works with such capacity bounds.

0:15:56.480,0:16:01.880
Instead, create an equivalent Petri
net that gets by with

0:16:01.880,0:16:05.630
simple means (so
doesn't need such annotation),

0:16:05.630,0:16:12.050
but still achieves the behavior that
is enforced here by the capacities.

0:16:12.050,0:16:20.420
So in particular, in the end also for
these rewritten Petri nets here in the example

0:16:20.420,0:16:26.150
such a reachability graph should come out and
just about t1 should not be fireable from

0:16:26.150,0:16:31.520
this initial state (which would be possible
if we would simply ignore the annotations).

0:16:31.520,0:16:32.630
We do not want
to ignore the annotations.

0:16:32.630,0:16:34.730
We just want to
deal with them differently.

0:16:38.510,0:16:44.420
So the insight here is that
you can also achieve this kind of

0:16:44.420,0:16:47.570
capacity bound without immediately introducing
a new Petri net type.

0:16:47.570,0:16:52.280
And that is by
applying a modeling pattern.

0:16:52.280,0:16:57.830
Namely, you rewrite what you want to have
with the means of a simple Petri net.

0:16:59.390,0:17:00.800
It's a bit of
a trick, so to

0:17:00.800,0:17:03.890
speak, that you use in modeling,
but here you do it systematically.

0:17:03.890,0:17:06.710
What is
the idea?

0:17:06.710,0:17:07.730
How do we
go about it?

0:17:07.730,0:17:16.670
Well, the basic idea is that
we express, so to speak, this

0:17:16.670,0:17:22.670
capacity (the fact that there can be no
more than a certain number of tokens on

0:17:22.670,0:17:27.560
each of the places) by introducing
an extra additional place for each place.

0:17:27.560,0:17:31.295
A so-called complement place, on which
we create a reservoir, so to speak.

0:17:31.295,0:17:38.180
In this reservoir, we always keep a
record of the maximum number of tokens that

0:17:38.180,0:17:41.240
may be put on
the original place s.

0:17:41.240,0:17:46.820
So in the example just
now we had two places.

0:17:46.820,0:17:50.210
For each place we
add a so-called complement place.

0:17:50.210,0:17:51.800
Simply a place that
has a new name,

0:17:51.800,0:17:56.090
but where we can still tell
which original place it belongs to.

0:17:56.090,0:17:58.550
We can do that by
using the same place name and

0:17:58.550,0:18:05.090
just putting an overline over
it like that, a bar.

0:18:05.090,0:18:07.610
That becomes a
normal Petri net again,

0:18:07.610,0:18:11.240
where we don't give
any annotations for the capacities.

0:18:11.240,0:18:15.650
So we have to encode that information differently, and
for example, yes, we have to specify an initial

0:18:15.650,0:18:19.370
marking for our new complement
places (so we say what the

0:18:19.370,0:18:23.390
initial marking for those complement
places contains in terms of values).

0:18:23.390,0:18:26.810
And that's where we see
that the capacity function comes in.

0:18:26.810,0:18:33.260
Namely, we're just going to put exactly
as many tokens on the complement places as

0:18:33.260,0:18:41.330
would be allowed according to the capacity, but
are not actually already present in the initial marking.

0:18:41.330,0:18:48.520
So if the capacity would say, on
place s five tokens may lie, in the

0:18:48.520,0:18:53.500
initial marking of the Petri net however
on this place s only three tokens lie,

0:18:53.500,0:18:59.620
then we would put in the initial marking 5
- 3 = 2 tokens on the complement place.

0:19:00.970,0:19:06.640
So m0 of s-bar would
then be k(s) - m0(s).

0:19:06.640,0:19:14.800
This ensures that, at least initially, the sum
of the tokens in the place itself and in

0:19:14.800,0:19:18.010
its complement place gives
exactly the desired capacity that

0:19:18.010,0:19:21.760
we would have written to the
place in the Petri net with capacities.

0:19:21.760,0:19:27.190
In this way, we can make sure that
this is the case for the initial marking.

0:19:27.190,0:19:30.370
And in what follows, we'll
make sure that it's an invariant.

0:19:30.370,0:19:32.290
So that this is
preserved for every firing operation.

0:19:32.290,0:19:39.400
This idea here, which first of all originally
ensures that the complement places are occupied, we

0:19:40.390,0:19:47.740
will then guarantee that and maintain it
throughout the lifetime of the Petri net.

0:19:47.740,0:19:51.250
And that's why we
can then always make

0:19:51.250,0:19:57.550
sure that there are actually never
more than k(s) tokens on the place.

0:19:57.550,0:20:04.390
Because, so to speak, we will only allow more
tokens to be put on the place if there

0:20:04.390,0:20:08.530
are still a corresponding number of
reserve tokens in the complement place.

0:20:08.530,0:20:14.910
How can
we achieve this?

0:20:14.910,0:20:22.680
We have to make sure that
when firing transitions, this invariant is preserved.

0:20:22.680,0:20:26.580
That is, we probably need to
introduce more weights into the Petri net.

0:20:27.090,0:20:28.470
Just now
we added places.

0:20:28.470,0:20:31.680
If we just added those, they
would be isolated nodes in the

0:20:31.680,0:20:36.900
Petri net and there would
be no input or output arrows.

0:20:36.900,0:20:40.020
Then, of course, they wouldn't affect
the behavior of the Petri net.

0:20:40.020,0:20:44.775
So we still need to
attach them to the Petri net.

0:20:44.775,0:20:45.960
How do
we do that?

0:20:45.960,0:20:50.730
That always depends on what a
particular transition does to a particular place.

0:20:50.730,0:20:55.980
So let's look at
a transition and a place.

0:20:55.980,0:20:58.200
Here we describe
how to do that

0:20:58.200,0:21:00.780
for a combination of
a transition and a place.

0:21:00.780,0:21:03.660
And of course we do that
for every transition and every place,

0:21:03.660,0:21:05.790
for all combinations
of transition and place.

0:21:07.230,0:21:11.430
When we focus on a transition
and a place, we can ask:

0:21:11.430,0:21:15.000
What is this transition
doing with this place?

0:21:15.000,0:21:17.520
Does it take
tokens from it?

0:21:17.520,0:21:19.470
Does it deposit
tokens in it?

0:21:19.470,0:21:23.100
Or is it neutral, so to
speak, with respect to this place?

0:21:23.100,0:21:24.150
It could be that t and
s have nothing to do with each

0:21:24.150,0:21:29.880
other, that firing t can simply never
change the number of tokens in place s.

0:21:29.880,0:21:31.800
How can
this be determined?

0:21:31.800,0:21:33.960
Ultimately, you have to
look at this difference.

0:21:33.960,0:21:38.338
So one looks at what the
post-weight function of transition t says

0:21:38.338,0:21:40.200
for place s and what the pre-weight
function of transition t says for place s.

0:21:44.880,0:21:50.520
That expresses how many tokens the transition
t would put in the place s.

0:21:50.520,0:21:54.360
And that expresses how many tokens transition
t would take out of place s.

0:21:54.360,0:21:58.320
And since there's actually allowed to be
both a forward and a backward arrow,

0:21:58.320,0:22:03.870
so to speak, for a transition and a
place, those could also both be positive values.

0:22:04.410,0:22:08.070
We're looking at the net behavior,
so to speak, the difference of that.

0:22:09.420,0:22:10.380
That's where a
number comes out.

0:22:10.380,0:22:12.810
It could be negative, it could
be zero, it could be positive.

0:22:12.810,0:22:15.240
If it's negative,
then it means that

0:22:15.240,0:22:17.940
the transition is taking tokens
out of the place overall.

0:22:17.940,0:22:21.870
This could be, for example, if the post
weight is zero and the pre weight is three.

0:22:21.870,0:22:26.910
Then it means that the transition takes three
tokens from the place and gives none to it.

0:22:26.910,0:22:28.710
So in total it
takes out three tokens.

0:22:28.710,0:22:32.625
It could also be that it
takes four tokens and puts two away.

0:22:32.625,0:22:35.430
Then it would take a
net total of two tokens.

0:22:35.430,0:22:44.340
So whenever this difference for the certain
t and the certain s is negative,

0:22:44.340,0:22:53.790
we add an edge of t to
the complement of s, with weight -n.

0:22:53.790,0:22:54.290

Why?

0:22:54.870,0:22:56.370
This is a
negative number here.

0:22:56.370,0:22:57.210
We negate
that one.

0:22:57.210,0:23:00.180
And the corresponding positive
number that comes out,

0:23:00.180,0:23:04.950
we write it as a weight to an
edge from the transition t to the complement place.

0:23:04.950,0:23:06.750
Because the
idea should be:

0:23:06.750,0:23:12.150
Transition t somehow takes a certain
number of tokens from the place s,

0:23:12.150,0:23:16.050
maybe two; then these two tokens
should not disappear, but they should

0:23:16.050,0:23:17.790
be deposited in
the complement place.

0:23:17.790,0:23:19.860
They fill up the
reservoir, so to speak,

0:23:19.860,0:23:26.490
from which later firing operations are likely
to place tokens on place s again.

0:23:27.480,0:23:31.770
For example transition t, but
in particular also other transitions,

0:23:31.770,0:23:33.600
which might want to
deposit something in s.

0:23:35.010,0:23:37.500
They should and will
be able to do this

0:23:37.500,0:23:44.070
only if there are enough
tokens in the complement place s-bar.

0:23:44.070,0:23:47.280
And the same number
of tokens must also

0:23:47.280,0:23:51.840
be deposited in s-bar when
tokens are removed from s.

0:23:54.120,0:23:58.826
That is, if the transition t
removes tokens from the place s altogether.

0:23:58.826,0:24:02.850
What about
the reverse case?

0:24:02.850,0:24:06.990
That is, when the transition t
net puts something into the place s.

0:24:06.990,0:24:12.990
That is, if the post-weight function for t
with respect to s is greater than the pre-weight

0:24:12.990,0:24:17.760
function of t with respect to s,
that is, if this difference is exactly positive.

0:24:19.470,0:24:23.730
Then transition t would like to put a
certain number n of tokens into place s.

0:24:24.300,0:24:28.770
We may only allow this if
there are not yet so many

0:24:28.770,0:24:36.630
tokens there that this addition
of tokens exceeds the allowed capacity.

0:24:36.630,0:24:37.380
How can
we guarantee this?

0:24:37.380,0:24:43.120
By ensuring that there
is a pre-weight edge from

0:24:43.120,0:24:47.350
s-bar to t with exactly
this number n as weight.

0:24:47.350,0:24:53.200
Then t should only fire if it
finds a corresponding number of tokens in s-bar.

0:24:53.200,0:24:59.440
And this will be the case
exactly (because of this invariant here),

0:24:59.440,0:25:07.390
if indeed the sum then
is not greater than k(s).

0:25:07.390,0:25:19.420
The sum of the tokens currently
lying in s plus this number n.

0:25:19.420,0:25:27.070
These three steps,
these three ideas/applications ensure

0:25:27.070,0:25:29.560
that the
desired behavior occurs.

0:25:29.560,0:25:35.230
If you look even more closely here,
you can see that it seems a

0:25:35.230,0:25:37.960
bit strange that the case "equal
to zero" is not considered at all.

0:25:37.960,0:25:40.630
It only says what we
do when this difference is

0:25:40.630,0:25:43.840
negative, and what we do
when this difference is positive.

0:25:43.840,0:25:46.090
What do we do
if the difference is zero?

0:25:46.090,0:25:47.590
Then we
don't do anything.

0:25:47.590,0:25:48.520
Why
not?

0:25:48.520,0:25:55.180
That would be a combination of
transition t and place s, so

0:25:55.180,0:26:00.490
that t takes as many tokens out
of s as it puts in there.

0:26:00.490,0:26:03.190
This could either mean that t has
nothing to do with s at all.

0:26:03.190,0:26:07.990
So if these two values are both
zero, then there is no reason to

0:26:07.990,0:26:11.440
somehow introduce
additional conditions.

0:26:11.440,0:26:12.910
Because then t has nothing
to do with s at all.

0:26:12.910,0:26:15.610
Or it could mean
that there is indeed

0:26:15.610,0:26:21.160
such a loop, where t both takes
tokens from s and puts them there.

0:26:21.160,0:26:22.720
And even with
the same value.

0:26:22.720,0:26:27.550
But then nothing changes in
the balance, so to speak.

0:26:27.550,0:26:32.530
It doesn't change whether
the capacity is kept.

0:26:32.530,0:26:36.550
If t takes two tokens
from s and deposits two tokens

0:26:36.550,0:26:40.660
there, then this cannot lead
to the capacity bound being exceeded.

0:26:40.660,0:26:43.270
This is because t then
does nothing to s on net.

0:26:43.270,0:26:49.300
Then we do not need to introduce another
condition or another edge into the Petri net.

0:26:49.300,0:26:51.550
Therefore, one does not need
to consider the case additionally.

0:26:51.550,0:26:55.450
One only has to deal with
these cases, which are covered here.

0:27:00.100,0:27:00.940
What is
achieved by this?

0:27:00.940,0:27:07.930
What I had motivated as an idea
then remains as a guarantee, so to speak.

0:27:07.930,0:27:16.300
So not only for the start marking m0, but
according to the construction from the previous slide, it

0:27:16.300,0:27:22.630
holds for every reachable marking that
m(s) plus m(s-bar) is exactly k(s).

0:27:23.470,0:27:27.100
This is exactly what we want
to achieve; and achieve with the construction.

0:27:30.490,0:27:32.500
That's the invariant, the
idea that was here.

0:27:32.500,0:27:41.710
And the fact that we
insert additional edges between transitions and

0:27:41.710,0:27:47.410
complement places ensures that a transition
t is fireable only if the capacities

0:27:47.410,0:27:50.470
in its postcondition places
are not yet exhausted.

0:27:51.760,0:27:59.650
Because we only allow t to be
fired if there are ultimately enough remaining capacities.

0:27:59.650,0:28:04.900
And this is checked/query/guaranteed
by the complement places.

0:28:04.900,0:28:13.960
Especially in the case where t puts something
into a place, this is only allowed if a

0:28:13.960,0:28:17.830
corresponding number of tokens can
be taken from the complement place.

0:28:18.580,0:28:20.470
If not, then t would
not be able to fire.

0:28:20.470,0:28:24.460
And this is not because of any
change in the semantics of Petri nets,

0:28:24.460,0:28:26.530
but simply because of
these added transition dependencies.

0:28:26.530,0:28:29.830
Transitions are
not added.

0:28:29.830,0:28:34.735
Places are added, but also
new conditions on the transitions.

0:28:34.735,0:28:41.590
We do not prove
now that this works.

0:28:41.590,0:28:44.406
You can take my word for it
or try it out on many examples.

0:28:44.406,0:28:47.920
You can also think about
why this works in general.

0:28:47.920,0:28:49.840
The fact
is, it works.

0:28:52.600,0:28:53.887
Let's do this
with an example.

0:28:53.887,0:28:59.020
In practice, of course, you
are supposed to do this yourself.

0:28:59.020,0:29:03.010
So let's take a look at
the Petri net we had here.

0:29:03.010,0:29:04.360
Namely, that was
the Petri net.

0:29:04.360,0:29:06.010
If we just look
at the black part.

0:29:06.010,0:29:08.890
There was not yet the red
part in this Petri net, and here

0:29:08.890,0:29:13.840
there was a 2 on it and here there
was a 1 on it, as these additional annotations.

0:29:13.840,0:29:16.870
They must not exist
in a normal Petri net.

0:29:16.870,0:29:18.430
So they have
disappeared here now.

0:29:18.430,0:29:23.320
But instead, the complement places were
introduced on the one hand, and

0:29:23.320,0:29:25.720
additional arrows on
the other hand.

0:29:28.000,0:29:30.160
And how is
it done here?

0:29:30.730,0:29:35.350
There is the complement place to
s1, and it contains a token.

0:29:35.350,0:29:35.680

Why?

0:29:35.680,0:29:40.240
Because s1 should contain two tokens, but
in the initial marking it contains only one.

0:29:40.240,0:29:44.200
So this "reserve token" is
put in the complement place.

0:29:44.200,0:29:48.250
In s2, on the other
hand, there is one token in

0:29:48.250,0:29:50.440
the initial marking, and there may
only ever be one token there.

0:29:51.070,0:29:54.160
Therefore, there are no reserve
tokens in the complement place.

0:29:54.940,0:29:59.050
This explains why s1-bar and s2-bar
look exactly the same and carry

0:29:59.050,0:30:04.480
tokens accordingly (or s2-bar just
does not carry any tokens).

0:30:04.480,0:30:06.520
And what
about the transitions?

0:30:06.520,0:30:09.730
We look at every
combination of s and t.

0:30:09.730,0:30:11.620
So, for example,
s1 and t1.

0:30:11.620,0:30:18.512
The s1 loses a
net token to t1.

0:30:18.512,0:30:21.430
This is because t1 takes exactly one
token from s1 and puts nothing there.

0:30:21.430,0:30:33.660
Therefore, according to the construction from here, t1 must
deposit a token in the complement place to s1.

0:30:33.660,0:30:39.960
Because t1 takes a token from here from
s1, t1 must deposit a token in s1-bar.

0:30:39.960,0:30:41.970
That is why
there is this arrow.

0:30:41.970,0:30:48.990
That doesn't mean that t1 doesn't
continue to deposit a token in s2.

0:30:49.680,0:30:54.870
So this existing black
output that leaves t1 remains.

0:30:54.870,0:30:57.390
It simply
adds an output.

0:30:57.390,0:31:02.965
Namely, when t1 takes a token from
s1, it deposits a token in s1-bar.

0:31:02.965,0:31:10.710
Then, after this firing, this would
mean (if it were possible, because there

0:31:10.710,0:31:14.400
would still be space here; which is not
the case at the moment) that then a token

0:31:14.400,0:31:18.570
would move from s1 to s2, but
also a token would be put in s1-bar.

0:31:18.570,0:31:24.120
And this is now explained in the
same way for each of these arrows.

0:31:24.120,0:31:28.050
Now let's look
at t1 and s2.

0:31:28.050,0:31:32.670
There we see that t1 net
puts a token in s2, because

0:31:32.670,0:31:35.760
t1 doesn't take anything out
of s2, but puts something there.

0:31:35.760,0:31:40.500
So t1 adds a
net token to s2.

0:31:40.500,0:31:44.610
Therefore, t1 must take
a token from s2-bar.

0:31:44.610,0:31:48.960
This justifies and
forces this arrow here.

0:31:51.060,0:31:53.940
For t2 and s1, as well
as s2, it is quite analogous.

0:31:53.940,0:32:00.510
So t2 places a token in s1,
therefore must take a token from s1-bar.

0:32:00.510,0:32:03.750
And t2 takes
a token from s2,

0:32:03.750,0:32:08.400
therefore must put a token
in s2-bar (that's this arrow).

0:32:08.400,0:32:10.980
Then we still
have t3 to consider.

0:32:10.980,0:32:13.830
The t3 and s1 have
nothing to do with each other.

0:32:13.830,0:32:17.460
There is neither an input nor
an output arrow between t3 and s1.

0:32:17.460,0:32:23.940
Therefore, there is no connection between
t3 and the complement of s1.

0:32:23.940,0:32:30.330
This is exactly a possible
case, which corresponds here to the

0:32:30.330,0:32:34.680
case that n = 0 and
would be just neither negative nor positive.

0:32:34.680,0:32:40.650
This explains why there is
no connection between t3 and s1-bar.

0:32:40.650,0:32:45.170
However, t3 and
s2 are relevant.

0:32:45.170,0:32:50.540
Because t3 takes a token from s2,
it must therefore deposit a token in s2-bar.

0:32:53.960,0:32:57.800
Between the two places and
three transitions there are six combinations.

0:32:57.800,0:33:03.830
The s1-t3 combination
leads to no additional

0:33:03.830,0:33:09.410
connection, the other five each lead to an
arrow (exactly the five red arrows we see).

0:33:14.030,0:33:14.810
And what
have we achieved?

0:33:14.810,0:33:18.740
I already briefly flashed
the reachability graph just now.

0:33:18.740,0:33:20.720
Here it is
in its entirety.

0:33:20.720,0:33:27.290
First, we see that it looks exactly
the same (except now, of course, for the

0:33:27.290,0:33:36.860
indication of the complement places; apart
from that) as the reachability graph we

0:33:36.860,0:33:42.200
saw here, which, however, depended on
our looking at this particular semantics.

0:33:42.200,0:33:47.450
Where we take extra care, for example, if
we want to fire t1 from this marking,

0:33:47.450,0:33:54.170
that we leave that alone if it would
make the number of tokens in s2 too large.

0:33:54.170,0:34:05.750
That's exactly what we don't
have to consider explicitly here somehow.

0:34:05.750,0:34:10.040
But if we consider the quite
normal semantics of firing Petri nets, it

0:34:10.040,0:34:16.640
is also automatically ensured here in the
starting marking (which is that by adding

0:34:16.640,0:34:22.580
these two complement
places and their respective

0:34:22.580,0:34:26.030
entries) that in this
marking t1 is not fireable.

0:34:29.000,0:34:32.060
For what would have to be
for t1 to be allowed to fire?

0:34:32.060,0:34:34.490
It would have to be able
to take a token from s1.

0:34:34.490,0:34:36.440
Of course it can, because
there is a token there.

0:34:36.440,0:34:39.710
But it would also have to be
able to take a token from s2-bar.

0:34:39.710,0:34:40.910
And that is exactly
what it cannot do.

0:34:40.910,0:34:45.290
Because s2-bar is this position here,
and there is no token there.

0:34:45.290,0:34:47.300
That means, there
is no more reserve

0:34:47.300,0:34:52.130
which would somehow allow
to put something on s2.

0:34:52.130,0:34:57.630
So here, t1 would be effectively
prevented from firing in this marking.

0:34:57.630,0:35:02.160
Simply by, in
that case, this connection.

0:35:03.030,0:35:09.090
In the same way, the
other connections each allow firing.

0:35:09.090,0:35:14.760
So, for example, t2 may
be fired in this start marking.

0:35:18.390,0:35:27.180
Also, looking at the same example with
the other semantics, t2 was allowed here

0:35:27.180,0:35:34.530
because it didn't somehow violate the
capacitance on any of the places.

0:35:34.530,0:35:40.590
And that is automatically given
here, because t2 can fire.

0:35:40.590,0:35:43.530
The t2 would like to
put a token in s1.

0:35:43.530,0:35:47.400
It checks whether there is any
potential for this, i.e. it checks

0:35:47.400,0:35:50.790
whether there is
a token in s1-bar.

0:35:50.790,0:35:51.360
This is
the case here.

0:35:52.380,0:35:56.100
There is still a token
here precisely because the total

0:35:56.100,0:36:00.210
capacity allowed for s1 was
not exhausted with this 1.

0:36:00.210,0:36:02.010
This is represented
by this 1.

0:36:02.010,0:36:05.490
And therefore the firing of t2
is possible and leads to the

0:36:05.490,0:36:11.220
fact that afterwards two tokens lie on
s1 and no token anymore on s1-bar.

0:36:11.220,0:36:15.420
So another placing of a token
in s1 would not be allowed.

0:36:16.260,0:36:21.600
This would be prevented here (that
one puts further tokens on s1), because

0:36:21.600,0:36:25.380
on s1-bar no more
reserve tokens lie at all.

0:36:26.790,0:36:28.350
If we now
simply construct the reachability

0:36:28.350,0:36:33.390
graph normally for this example shown here
on the left, this graph comes out.

0:36:33.390,0:36:40.590
And except for this information for
the complement places, it is equivalent to

0:36:40.590,0:36:45.960
the desired reachability graph, which
resulted with the specially built semantics.

0:36:50.320,0:36:56.200
So we have achieved our goal, even
without a new kind of Petri net.

0:36:56.200,0:37:00.070
Simply by clever use
of the complement places.

0:37:00.070,0:37:03.910
You can see this as
a trick, as a modeling

0:37:03.910,0:37:06.160
pattern, or as
a systematic construction

0:37:06.160,0:37:11.050
that generates a matching Petri net without
capacities for every Petri net with capacities.
