0:00:01.260,0:00:02.850
This was
our example.

0:00:02.850,0:00:07.770
We would like to implement
this in a state diagram.

0:00:07.770,0:00:15.720
And on this I will then
explain the individual basic elements of statecharts.

0:00:15.720,0:00:21.330
We'll start by
modeling the minute display.

0:00:21.330,0:00:22.500
We have
to start somewhere.

0:00:22.500,0:00:23.970
We have hours,
minutes, the alarm state.

0:00:23.970,0:00:26.520
Any of these we
have to model first.

0:00:26.520,0:00:32.550
State diagrams allow
us, in UML

0:00:32.550,0:00:37.680
terms, to develop just individual components of
the overall state space step by step.

0:00:37.680,0:00:43.020
And we start with the minute
display or actually the minute counter.

0:00:45.300,0:00:49.410
There are 60
minute states: from 0-59.

0:00:49.410,0:00:53.700
And there we can
first imagine that this is

0:00:53.700,0:00:57.990
still a little bit
like a flat state diagram.

0:00:57.990,0:01:02.910
But later it will appear
nested in a larger state diagram.

0:01:02.910,0:01:03.840
And then it
won't be nested anymore.

0:01:03.840,0:01:08.160
So first of all, just
intuitively, what's the syntax here?

0:01:08.160,0:01:10.290
One difference to
flat statecharts is

0:01:10.290,0:01:14.610
that there are very special
ways to represent the states.

0:01:14.610,0:01:15.780
Here there
are these states.

0:01:15.780,0:01:21.090
These would be these
rectangles with rounded edges here.

0:01:21.090,0:01:24.080
These would be the simplest
states that you can have.

0:01:24.080,0:01:26.685
We have a name,
here simply numbered (0-59).

0:01:26.685,0:01:28.050
That should
be unique.

0:01:28.050,0:01:31.170
And in between
there are transitions.

0:01:31.680,0:01:34.170
Transitions can be
annotated with a label.

0:01:34.170,0:01:36.015
That's what's
called a trigger.

0:01:36.015,0:01:37.425
So we
have states.

0:01:37.425,0:01:38.640
We
have transitions.

0:01:38.640,0:01:45.000
These arrows, there can be a trigger
on them, that is, a triggering event.

0:01:45.000,0:01:49.350
That can take
different shapes, we'll see.

0:01:49.350,0:01:53.940
And what we have here
specifically is the start state.

0:01:53.940,0:01:55.710
It looks like
this in activity diagrams.

0:01:57.660,0:01:59.160
This is what in
a flat state diagram

0:01:59.160,0:02:02.070
would just be the incoming
arrow to the start state.

0:02:03.330,0:02:04.590
We start
counting at zero.

0:02:04.590,0:02:08.370
Counting up to 59,
each time after 1 minute.

0:02:08.370,0:02:11.940
Because that's supposed to be the
minute display, and then return to zero.

0:02:11.940,0:02:13.470
And then it goes
on and on like that.

0:02:15.120,0:02:16.110
So what are
the elements here?

0:02:16.110,0:02:19.530
States, they
are these depictions.

0:02:22.710,0:02:28.140
Start state is represented
by this special start node,

0:02:28.140,0:02:31.050
which looks like it
does on activity charts.

0:02:34.260,0:02:38.430
From there there is an arrow
to one of the normal states.

0:02:38.430,0:02:44.520
No edges may lead
into this special element.

0:02:44.520,0:02:47.040
And only one
edge may lead out.

0:02:47.040,0:02:48.750
This is different from
the activity diagram, where

0:02:48.750,0:02:54.960
several edges are allowed to
come out of this element.

0:02:54.960,0:03:01.440
Simple
elements.

0:03:03.090,0:03:05.580
Then there can also
be an end state.

0:03:05.580,0:03:08.700
This does not appear
in the example yet.

0:03:08.700,0:03:11.520
End states are also
noted, as in activity

0:03:14.280,0:03:16.770
diagram, with this
kind of depiction.

0:03:16.770,0:03:20.460
The flow end does not
exist in correspondence to activity diagrams.

0:03:20.460,0:03:23.850
But this way to
indicate the end state.

0:03:23.850,0:03:27.240
And similar to
activity diagram also, no

0:03:27.240,0:03:30.780
edges are allowed to
lead out of these elements.

0:03:30.780,0:03:36.090
Unlike start states, there may
well be multiple end states.

0:03:36.090,0:03:40.470
Such a thing can appear
several times in a state

0:03:40.470,0:03:42.540
diagram, while there can
be only one start state.

0:03:42.540,0:03:47.610
Or later only one
per level or subdivided substate.

0:03:47.610,0:03:52.950
And in fact, this
is what is considered the

0:03:52.950,0:03:55.770
final state here, rather
than the state before it.

0:03:55.770,0:04:00.720
It can also be, as in our example,
that there are no final states at all.

0:04:00.720,0:04:03.150
This is the case when we
want to model a system that is

0:04:03.150,0:04:04.470
not supposed to
terminate at all.

0:04:04.470,0:04:06.540
It should run on and
on and not stop somewhere.

0:04:06.540,0:04:08.370
That is why there
is no final state there.

0:04:11.010,0:04:12.510
Then there is the
notation for these transitions/arrows.

0:04:13.920,0:04:17.310
In the simplest case simply
this connection with an arrow.

0:04:17.310,0:04:19.650
These are
also called transitions.

0:04:19.650,0:04:22.620
On the one
hand this is a

0:04:22.620,0:04:25.890
bit awkward, because in Petri
nets transitions already have a meaning.

0:04:25.890,0:04:28.710
But it is the case
that the same term is used.

0:04:28.710,0:04:33.990
And it is not
so completely detached or

0:04:33.990,0:04:37.530
completely different from the concept
of transitions in Petri nets.

0:04:37.530,0:04:42.510
It is also about creating
a mediation between two states.

0:04:42.510,0:04:48.810
In the Petri net between two places,
or the transport of marks between places.

0:04:49.470,0:04:51.480
But a transition
is simply this arrow.

0:04:51.480,0:04:55.050
And not some extra node, as
it was the case in Petri nets.

0:04:55.050,0:04:59.430
In general there is
a label on this arrow.

0:04:59.430,0:05:00.270
That's where the
trigger can be.

0:05:00.270,0:05:03.630
We have already seen
that, such a triggering event.

0:05:03.630,0:05:06.240
Or simply
a label.

0:05:06.240,0:05:08.640
There can
also be conditions.

0:05:08.640,0:05:10.290
These can
be logical statements.

0:05:10.830,0:05:13.320
A bit like in activity
diagram with the branching nodes.

0:05:13.320,0:05:14.970
And there can
be an effect.

0:05:14.970,0:05:18.060
We'll see what's involved there in a
moment, and how we can use that.

0:05:18.060,0:05:19.920
These two parts
are optional, though.

0:05:19.920,0:05:22.763
We just had
triggers in the example.

0:05:22.763,0:05:23.310
There was
this statement:

0:05:23.310,0:05:25.380
"After 1 minute, there should
be a transition at a time."

0:05:26.220,0:05:29.340
The trigger would be something
like a signal or a message

0:05:29.340,0:05:31.875
that triggers
the corresponding transition.

0:05:31.875,0:05:33.420
So causing
that transition.

0:05:33.420,0:05:35.880
In this case the
passing of 1 minute.

0:05:35.880,0:05:43.110
At the condition can
be something supervising, a guard.

0:05:43.110,0:05:52.780
And it can depend on different properties
of the system, what can occur there.

0:05:52.780,0:05:55.750
We will
use Guard less.

0:05:55.750,0:05:57.310
We will
use effect, though.

0:05:57.910,0:06:03.070
That is generally something
that triggers this transition.

0:06:03.070,0:06:06.670
We will see later that this
can then trigger transitions in other parts

0:06:06.670,0:06:09.100
of the state
diagram, for example.

0:06:09.100,0:06:13.870
In the example so far, the
minutes display, there is only the trigger.

0:06:13.870,0:06:18.490
Simply this specification of a period of
time after which the transition has to trigger.

0:06:18.490,0:06:26.590
Later, this trigger can also be
something that was triggered as an

0:06:26.590,0:06:30.550
effect in another part
of the state chart.

0:06:30.550,0:06:39.340
We will see this after
a few more observations and slides.

0:06:39.340,0:06:44.200
There will rather be no label
at the arrow from the start

0:06:44.200,0:06:47.860
state, but really only at
the transitions between normal states.

0:06:47.860,0:06:48.970
Not at
the start state.

0:06:48.970,0:06:53.320
At arrows to the final state
there could well be such labeling.

0:06:53.320,0:06:59.320
But primarily we will have that
at the transition between normal simple states.

0:07:06.310,0:07:13.130
Then there are actions
or effects that can occur.

0:07:13.130,0:07:18.200
Not at the transition between
states, but in the states themselves.

0:07:18.860,0:07:25.910
Until now, a state was simply
a box with no other internal shape.

0:07:25.910,0:07:29.480
In fact, in
the UML state diagram,

0:07:29.480,0:07:32.720
actions can be triggered
in the simple states themselves.

0:07:32.720,0:07:36.560
Or activities
can be annotated.

0:07:36.560,0:07:39.830
Which should be triggered
respectively when entering, when staying

0:07:39.830,0:07:41.540
in the state,
or when leaving.

0:07:41.540,0:07:44.300
We will use this in a moment
for the beeping in our state diagram.

0:07:44.300,0:07:51.590
In principle, the structure of these is
the same as the labeling of transitions.

0:07:51.590,0:07:54.950
There can be a trigger, there can
be conditions, there can be an effect.

0:07:54.950,0:07:58.820
The trigger here
is something that describes

0:07:58.820,0:08:03.260
at what time
this effect should occur.

0:08:03.260,0:08:07.899
Namely exactly this: when
entering, when staying, during leaving.

0:08:07.899,0:08:12.080
That means the trigger
can take these three forms.

0:08:12.080,0:08:15.260
So the effect, which is written
here, is triggered when entering the state.

0:08:15.260,0:08:21.740
An activity should take place while
the system remains in this state.

0:08:21.740,0:08:27.230
Or something should happen when
the system leaves the state.

0:08:28.520,0:08:32.150
Activity is to be understood here
quite in the sense of activity diagrams.

0:08:32.150,0:08:33.140
This could be,
for example, that

0:08:33.140,0:08:37.520
an activity diagram is embedded
in such a state diagram.

0:08:37.520,0:08:43.460
That is supposed to run while
the overall system is in said state.

0:08:43.460,0:08:47.330
We will
not do that.

0:08:47.990,0:08:50.090
We will not
use this possibility.

0:08:50.090,0:08:51.980
But it would
be possible in principle.

0:08:51.980,0:08:56.300
We will rather
use only simple effects.

0:08:56.300,0:09:01.250
In particular, in
our example we said:

0:09:01.250,0:09:04.010
There should be a sound
signal, and always on the hour.

0:09:04.880,0:09:06.440
We can model
that, for example,

0:09:06.440,0:09:08.000
by saying there is
this activity called "beep".

0:09:08.000,0:09:09.800
That's not
specified further.

0:09:09.800,0:09:15.050
This is simply an activity
that is perhaps described separately.

0:09:15.050,0:09:17.270
We don't give
any further structure here.

0:09:17.270,0:09:21.610
And it should be triggered
whenever the state zero is entered.

0:09:21.610,0:09:24.400
What before was just
this very simple state, rectangle

0:09:24.400,0:09:27.130
with rounded corners,
where 0 was inside.

0:09:27.130,0:09:28.300
Now it gets
an inner structure.

0:09:28.300,0:09:31.720
This is noted in such a way
that there is still the label zero.

0:09:31.720,0:09:35.050
And also the outer form is
still this rectangle with rounded corners.

0:09:35.050,0:09:38.080
But in the state
inside is still annotated:

0:09:38.080,0:09:45.640
Whenever the state is entered, the
effect/activity sound signal should be triggered.

0:09:45.640,0:09:49.840
I.e. we need a
syntax for these states.

0:09:49.840,0:09:53.650
Unlike flat state diagrams, where states
were simply nodes with a name.

0:09:53.650,0:09:55.870
And nothing else
could happen in there.

0:10:01.690,0:10:03.040
That would be
the minute display.

0:10:03.040,0:10:09.790
Along with the beeping whenever the
zero state, the 0 minutes are entered.

0:10:09.790,0:10:11.890
What about
the hour display?

0:10:11.890,0:10:15.160
For those, of course, we
could do the same thing again.

0:10:15.160,0:10:21.340
Instead of 60 such simple states for the minutes,
there would then be 24 states for the hours.

0:10:22.990,0:10:25.510
Now, of course, we want
this to happen in parallel.

0:10:25.510,0:10:29.950
We want that there is always 1
minute and 1 hour at each time.

0:10:29.950,0:10:33.640
The naive approach would then be to
say we have to form the cross product.

0:10:33.640,0:10:36.940
From the set of all minutes 0-59
and the set of all hours 0-24.

0:10:37.510,0:10:41.680
Then each state would be a
pair of one minute and one hour.

0:10:41.680,0:10:46.420
This is exactly what is also
visible here in such a display.

0:10:46.420,0:10:50.320
Here is finally a pair from a
number of hours and a number of minutes.

0:10:50.320,0:10:55.090
But 24 × 60 that would be already
very many such pairs, which one can form.

0:10:55.090,0:10:55.840
We do
not want that.

0:10:55.840,0:11:02.260
Instead, we want to explicitly express that
minutes and hour display run in parallel.

0:11:02.260,0:11:05.530
That is, the clock is
always in two such states

0:11:05.530,0:11:08.080
without us actually having
to form these pairs.

0:11:08.080,0:11:15.190
Let it be expressed in such a way that the
clock is always in two states at the same time.

0:11:15.190,0:11:17.770
In an hour state
and a minute state.

0:11:17.770,0:11:20.560
That didn't exist in
the flat state diagram.

0:11:20.560,0:11:22.360
One way
to express that.

0:11:22.360,0:11:23.440
Here
there is.

0:11:23.440,0:11:26.140
And that is modeled
by what are called regions.

0:11:26.140,0:11:30.970
Regions are simply a way
to divide a state diagram

0:11:30.970,0:11:36.000
into at least two (possibly more)
areas that run parallel to each other.

0:11:36.000,0:11:40.470
So that the system is then in
a sub-state in each of these regions.

0:11:42.120,0:11:43.740
Our example will
just allow this

0:11:43.740,0:11:49.590
to have 24 hours and 60
minutes of states running in parallel.

0:11:51.270,0:11:53.250
We would then
have to plot 84

0:11:53.250,0:11:57.360
states instead of explicitly making
all pairs between hours and minutes.

0:11:57.360,0:12:01.920
Which would result in over
1000 states by cross product.

0:12:01.920,0:12:05.460
Which is why these
regions are also semantically much

0:12:06.450,0:12:09.030
more effective than areas
of the activity diagrams.

0:12:09.030,0:12:15.870
Where I had said, we draw those
in to get a grouping of actions.

0:12:15.870,0:12:17.760
But beyond that, they
don't have any particular meaning.

0:12:17.760,0:12:23.640
With regions in state diagrams, what
those do is really very effective.

0:12:23.640,0:12:27.840
Namely, that the state diagram is
actually always, in that case, two

0:12:27.840,0:12:29.370
states at
the same time.

0:12:29.370,0:12:31.980
In each
region in one.

0:12:31.980,0:12:37.320
Because it corresponds to parallelism, it
has rather a bit of the

0:12:37.320,0:12:42.210
character that you get
with activity diagrams by forking.

0:12:47.160,0:12:53.010
These regions are parallel in the sense
that there are no transitions between them.

0:12:53.010,0:12:55.890
If two regions are parallel,
there can be no transitions

0:12:55.890,0:13:01.050
that move from a state of one
region, to a state of the other region.

0:13:01.050,0:13:04.890
I cannot come in
the from a minute state

0:13:04.890,0:13:07.710
by some trigger
into an hour state.

0:13:07.710,0:13:11.880
What can happen, on the other
hand, is that minutes and hours counters

0:13:11.880,0:13:15.300
progress in parallel
at the same time.

0:13:15.300,0:13:19.530
So if a trigger occurs in
both regions, it can also cause state

0:13:19.530,0:13:25.350
changes in both regions in
one step at the same time.

0:13:29.160,0:13:32.610
But there is no
transition between two parallel transitions.

0:13:32.610,0:13:38.130
There can be a transition from one
region to a region not parallel to it.

0:13:38.130,0:13:42.390
So a region shown completely
somewhere else in the state diagram.

0:13:42.390,0:13:45.734
But not between two
or more parallel regions.

0:13:45.734,0:13:51.540
How does this turn
out for our clock example?

0:13:51.540,0:13:57.570
How are
these regions plotted?

0:13:58.380,0:13:58.880
As
follows.

0:13:59.820,0:14:04.980
What we have now is that we
decompose the overall system into two regions.

0:14:04.980,0:14:10.440
That's expressed by
this dividing line.

0:14:11.970,0:14:17.280
So we would now have a region
up here and a region down here.

0:14:17.280,0:14:20.670
And each of these two regions
is its own little state diagram.

0:14:20.670,0:14:22.080
That's where we
see at the bottom.

0:14:22.080,0:14:24.960
What was previously
under entire state diagram,

0:14:24.960,0:14:28.470
for the minute counter, is now
simply one of the two parallel regions.

0:14:28.470,0:14:31.170
And the other region
looks something like this.

0:14:31.170,0:14:35.550
But has fewer states, because
it's just about the hours.

0:14:35.550,0:14:37.830
Which is only
24, instead of 60.

0:14:37.830,0:14:41.490
We also see that there is now one
start state in each of the two parts.

0:14:41.490,0:14:43.740
There can be a separate
start state in each region.

0:14:44.550,0:14:46.650
In both cases
just the zero state.

0:14:46.650,0:14:48.150
Once for the hours
once for the minutes.

0:14:49.830,0:14:52.200
We also see that
names may be reused here.

0:14:52.200,0:14:54.240
That's okay because
they're in different regions.

0:14:54.240,0:14:57.150
So this zero cannot be
confused with this zero, etc.

0:14:57.150,0:15:01.020
It's just within a region that a name
is not allowed to appear more than once.

0:15:01.020,0:15:05.820
And what you also see is that
here, of course, other triggers are assigned.

0:15:05.820,0:15:09.330
We don't want to change the
hour state after 1 minute as well.

0:15:09.330,0:15:14.130
Instead, we want an hour transition
to occur when trigger h is fired.

0:15:14.130,0:15:14.940
Where does
this come from?

0:15:14.940,0:15:16.380
Well, we will discuss
that in a moment.

0:15:16.380,0:15:22.440
It will be triggered whenever 1
hour is full in the minutes region.

0:15:22.440,0:15:27.930
So at the transition from 59 minutes to
0 minutes again there is 1 hour transition.

0:15:27.930,0:15:35.010
Which then simultaneously causes a
progression in the hours count.

0:15:35.010,0:15:40.380
This is a
communication between two regions.

0:15:40.380,0:15:45.390
But not by transitions, so an
arrow that would cross this regions border.

0:15:45.390,0:15:47.880
But by
this "remote triggering"

0:15:47.880,0:15:52.920
of an effect, which corresponds to
a trigger in the other region.

0:15:59.880,0:16:01.620
A few
more remarks.

0:16:01.620,0:16:04.470
Some of them
I had already discussed.

0:16:04.470,0:16:06.450
First, there are
two start states.

0:16:06.450,0:16:09.240
There can be at
most one per region.

0:16:09.240,0:16:10.440
That's exactly what we've
taken advantage of here.

0:16:10.440,0:16:12.120
We have exactly
one in each region.

0:16:12.120,0:16:17.010
That means overall the logical start
state would be 0 hours 0 minutes.

0:16:17.010,0:16:19.260
Time
00:00.

0:16:20.640,0:16:24.090
And hour and minute
indicators do not work independently.

0:16:24.090,0:16:25.500
Parallel, but
not completely independent.

0:16:25.500,0:16:26.940
There
is synchronization.

0:16:26.940,0:16:30.870
Namely, exactly when
in the minute part

0:16:30.870,0:16:37.140
there is a transition to the minute
state zero, this triggers the effect h.

0:16:37.140,0:16:39.150
For hour (hour) this
is supposed to stand.

0:16:40.500,0:16:45.840
This effect h ensures as
a trigger in the parallel regions

0:16:45.840,0:16:48.120
that the hours
are counted up.

0:16:52.710,0:16:53.640
This takes
place simultaneously.

0:16:53.640,0:16:57.690
In each region
we have this transition.

0:16:59.550,0:17:03.780
This allows us to express here
in a meaningful coupled way what

0:17:03.780,0:17:06.870
it means to have
hours and minutes progress.

0:17:13.390,0:17:21.340
That covers part
of our target implementation.

0:17:21.340,0:17:28.570
That ultimately describes
how time evolves.

0:17:30.730,0:17:33.520
Then there's this
aspect of alarm setting.

0:17:35.950,0:17:38.440
We would like to add to
our state diagram the ability to

0:17:40.030,0:17:43.240
turn off and on
that hourly alarm signal.

0:17:45.910,0:17:47.800
So obviously there's
like an extra state

0:17:47.800,0:17:52.180
for alarm is on, and an
extra state for alarm is off.

0:17:52.180,0:17:54.430
So where do
we put those now?

0:17:54.430,0:17:59.260
We don't want to tinker
those into those regions somehow.

0:18:00.100,0:18:02.920
Then we would
unnecessarily complicate that part

0:18:02.920,0:18:05.860
of the state diagram
that deals with time.

0:18:05.860,0:18:12.160
By also bringing in
this alarm on/off property here.

0:18:12.160,0:18:13.780
We would like
to be modular.

0:18:13.780,0:18:17.020
What we have so
far should still be usable.

0:18:17.020,0:18:25.120
And separately there should
be this alarm on/off possibility.

0:18:27.400,0:18:31.630
So imaginable we have
alarm on, alarm off.

0:18:31.630,0:18:34.300
Between them there
should be triggers.

0:18:34.300,0:18:39.160
By pressing the button
a you should get there.

0:18:39.160,0:18:43.420
And we should be able to switch between these
two states alarm on or alarm off by pressing b.

0:18:46.000,0:18:54.580
If we look at our stylized
picture of the clock, we see that

0:18:54.580,0:18:59.230
we would then need quite a
lot of transitions labeled with a.

0:18:59.230,0:19:03.610
Which would have to go out
from all possible hour and minute states.

0:19:03.610,0:19:06.340
If we have 00:00, then it
must be possible to switch a

0:19:06.340,0:19:08.530
to get into
the alarm display.

0:19:08.530,0:19:10.540
If we have 00:01, it
would also have to be possible.

0:19:10.540,0:19:14.050
Factually, for every combination
of hour and minute we

0:19:14.050,0:19:19.390
would have to have a-
transition to go into alarm state.

0:19:20.950,0:19:22.090
That would not
be very modular.

0:19:22.090,0:19:28.210
Since we wouldn't be able to
achieve that we would only need to

0:19:28.210,0:19:31.570
extend this state diagram minimally
to bring in this alarm aspect.

0:19:35.260,0:19:37.390
What can
we do instead?

0:19:37.390,0:19:42.070
There is a solution for that in the
UML state diagrams, that there are composite states.

0:19:43.390,0:19:50.920
Hierarchies of states where incoming and
outgoing transitions can then be captured.

0:19:50.920,0:20:02.980
Instead of having quite a lot of transitions
by the fact that for each combination of

0:20:02.980,0:20:09.040
the one composite state, we have to
have one transition each into another component.

0:20:10.030,0:20:11.020
It's very
abstract now.

0:20:11.020,0:20:16.210
Let's just look at
it in the example.

0:20:16.210,0:20:17.740
What we
can do:

0:20:17.740,0:20:22.930
We can take what we
have so far as our

0:20:22.930,0:20:25.660
time count as
one composite state.

0:20:25.660,0:20:34.090
And capture the alarm
aspect in another composite state.

0:20:34.090,0:20:35.830
There is the
time display here.

0:20:35.830,0:20:39.130
And that's
modeled this way.

0:20:39.130,0:20:41.980
And there's the alarm
display, it's modeled like this.

0:20:41.980,0:20:43.390
There is
on and off.

0:20:43.390,0:20:45.610
You can switch back and
forth between them with b.

0:20:45.610,0:20:53.200
And there is the button a, which switches
between the alarm situation and the time display.

0:20:54.280,0:20:59.410
That then corresponds to being able to
switch between the time and the alarm display.

0:20:59.410,0:21:04.210
And b is to switch between
on and off in the alarm display.

0:21:05.770,0:21:11.080
The advantage here is, we can just
use what we did for the hour count.

0:21:11.080,0:21:17.710
And describe as a
separate component this alarm component.

0:21:20.970,0:21:22.890
The one on the right,
what was previously our entire

0:21:22.890,0:21:25.350
state chart, is now
simply a composite state.

0:21:25.350,0:21:28.860
This on the left
is also a composite state.

0:21:28.860,0:21:31.230
This is the alarm display,
which consists of on and off.

0:21:31.230,0:21:34.590
There's a start state
for each everywhere here.

0:21:34.590,0:21:37.950
And there is also a start
state for the whole state diagram.

0:21:37.950,0:21:43.410
Initially the time display and not
the alarm display shall be activated.

0:21:50.190,0:21:53.610
These a-transitions shall
not start from sub-states,

0:21:53.610,0:21:56.190
but from the
whole composite state here.

0:21:56.190,0:22:04.290
This saves us the
otherwise necessary many a-labeled transitions.

0:22:04.290,0:22:06.390
Which we potentially,
otherwise would need.

0:22:11.220,0:22:12.030
Two
more comments.

0:22:12.030,0:22:15.720
First, the states with regions
are of course also composite.

0:22:15.720,0:22:19.050
And this is in the sense
that they are composed of region,

0:22:19.050,0:22:21.210
rather than
being hierarchically composed.

0:22:25.200,0:22:27.090
A regions state
is also composed,

0:22:27.090,0:22:31.290
but in a different way than
this state which is hierarchically composed.

0:22:31.290,0:22:35.250
Not by regions, but
simply by having multiple sub-states.

0:22:35.250,0:22:44.520
And to distinguish this more clearly,
in what follows I will generally, not

0:22:44.520,0:22:47.700
speak of composite
states in general.

0:22:47.700,0:22:52.650
Instead, rather of hierarchical states on the
one hand and regions states on the other.

0:22:52.650,0:22:56.970
Hierarchical states will be something like
what you see here on the left.

0:22:56.970,0:23:01.320
Just any
nested states.

0:23:01.320,0:23:04.110
This can also have
multiple levels of nesting.

0:23:04.110,0:23:08.280
Region states will be those
that consist of multiple regions.

0:23:08.280,0:23:14.040
So indicated with
such a dashed line.

0:23:14.040,0:23:24.990
And of course the regions themselves
can be composed of several sub-states.
