0:00:01.350,0:00:04.560
Zum Ende des Petrinetz-Kapitels kommend,

0:00:04.560,0:00:09.480
möchte ich mit Ihnen noch ein,
zwei Beispiele durchsprechen.

0:00:09.480,0:00:11.400
Und zwar sollen das Beispiele sein,

0:00:11.400,0:00:16.620
an denen noch einmal typische Szenarien
oder Modellierungsmuster deutlich werden.

0:00:16.620,0:00:22.260
Mit "Modellierungsmuster" meine ich jetzt
nicht irgendetwas formales wie die formal

0:00:22.260,0:00:23.670
definierten Eigenschaften, die wir gesehen haben.

0:00:23.670,0:00:30.240
Sondern einfach bestimmte Herangehensweisen, wie
man typische Situationen in dynamischen Systemen

0:00:30.240,0:00:34.350
mit Petrinetz-Modellierung
in den Griff kriegen kann.

0:00:34.350,0:00:35.670
Einiges davon haben wir schon gesehen.

0:00:35.670,0:00:38.400
Insbesondere wird es hier in diesem kurzen
Video um den wechselseitigen Ausschluss gehen.

0:00:39.810,0:00:45.990
Und das haben Sie im Grunde schon gesehen bei dem Schleusen-Beispiel
in den Übungsaufgaben (bzw. das passiert auf dem neunten Blatt).

0:00:45.990,0:00:51.690
Auch in dem Nachmittags-Beispiel sind
einige Modellierungsmuster vorgekommen.

0:00:51.690,0:00:58.050
Was ich in der Vorlesung besprochen hatte und
in dem Pipe-Tool als Petrinetz entwickelt hatte.

0:00:58.050,0:01:00.930
Da wurden etwa Quellen und
Senken benutzt: Transitionen,

0:01:00.930,0:01:05.430
die keine Vor- oder Nachgewichtsstellen haben.

0:01:05.430,0:01:10.290
Oder etwa Schlingen haben wir gesehen
mit einem bestimmten Einsatzzweck,

0:01:10.290,0:01:15.660
nämlich um bestimmte Stellen
oder Transitionen zu bewachen.

0:01:16.320,0:01:20.130
Also Guard-Stellen, mit
denen man sicherstellen kann,

0:01:20.130,0:01:24.600
dass bestimmte Transitionen nur unter
gewisser Konstellation schaltbar sind.

0:01:24.600,0:01:26.280
Da könnte man einfach auf
das Beispiel zurückschauen.

0:01:26.280,0:01:33.180
Oder etwa die Kapazitätsbeschränkungen,
also Versuche, mit Petrinetzen auszudrücken,

0:01:33.180,0:01:38.040
dass bestimmte Stellen nicht mehr als eine
bestimmte Anzahl von Marken enthalten dürfen.

0:01:38.040,0:01:42.090
Nicht weil das Petrinetz beschränkt
ist als formale Eigenschaft,

0:01:42.090,0:01:44.790
sondern indem das beim Modellieren schon
hinein gebracht wird, dass bestimmte

0:01:44.790,0:01:48.210
Stellen nicht mehr als eine bestimmte
Anzahl von Marken enthalten dürfen.

0:01:48.210,0:01:54.060
Das ist per se erst mal beim Erstellen des
Petrinetzes nicht gegeben, solche Einschränkungen.

0:01:54.060,0:01:58.710
Diesen letzten Aspekte, Kapazität
einschränken oder die Möglichkeit,

0:01:59.250,0:02:03.557
Grenzen anzugeben, werden wir
nicht in diesem Video anschauen.

0:02:03.557,0:02:05.340
Hier wird es um den
wechselseitigen Ausschluss gehen.

0:02:05.340,0:02:08.940
Insofern ist dies das vorletzte
Video des Petrinetz-Kapitels.

0:02:08.940,0:02:15.160
Das andere wird dann das letzte
Video des Petrinetz-Kapitels sein.

0:02:15.160,0:02:19.270
Behandeln wir zunächst das Konzept des
wechselseitigen Ausschlusses, im Englischen

0:02:19.270,0:02:25.480
"mutual exclusion", deswegen Mutex genannt
(die Stelle, die wir dafür verwenden).

0:02:25.480,0:02:28.690
Das Szenario hier ist wie folgt, und das könnte

0:02:28.690,0:02:31.750
sehr allgemein in verschiedenen
Situationen anwendbar sein.

0:02:31.750,0:02:35.470
Wir betrachten irgendwie mindestens zwei
Akteure (in dem Fall mal genau zwei Akteure),

0:02:35.470,0:02:38.110
die jeweils einen kritischen Bereich haben.

0:02:38.110,0:02:40.870
Damit ist irgendwie ein Ausführungsbereich,

0:02:40.870,0:02:47.290
ein Handlungsbereich gemeint, den sie
jeweils gesichert allein betreten wollen.

0:02:47.290,0:02:49.300
In dem Sinne soll das "kritisch" sein,

0:02:49.300,0:02:51.490
dass nicht beide Akteure gleichzeitig
in dem kritischen Bereich sein sollen.

0:02:51.490,0:02:58.540
Also es soll verhindert werden, dass die Akteure
gleichzeitig in ihren jeweiligen Bereich kommen.

0:02:59.290,0:03:02.080
Weil sie sich dort behindern könnten oder

0:03:02.080,0:03:04.840
ein unerwünschtes Verhalten
die Konsequenz sein könnte.

0:03:04.840,0:03:09.460
Also stellen wir uns vor, die zwei Akteure sind
Programme, die auf der Festplatte arbeiten.

0:03:09.460,0:03:13.300
Der kritische Bereich könnte das Schreiben
in eine bestimmte Datei sein, und wir wollen

0:03:13.300,0:03:17.050
eben nicht, dass beide Akteure gleichzeitig
versuchen, in dieselbe Datei zu schreiben.

0:03:17.050,0:03:21.310
Deswegen soll sich immer höchstens ein
Akteur in diesem kritischen Bereich befinden.

0:03:21.310,0:03:26.710
Wie können wir und das als
Petrinetz-Entwurf vorstellen?

0:03:28.330,0:03:32.710
Wir hätten vielleicht zwei Petrinetze,
für den einen und für den anderen Akteur.

0:03:32.710,0:03:34.570
Ich habe das System ganz einfach stilisiert:

0:03:34.570,0:03:39.790
Wir stellen uns einfach vor, der eine Akteur sei

0:03:39.790,0:03:42.970
durch dieses Petrinetz dargestellt und
der zweite Akteur durch dieses Petrinetz.

0:03:42.970,0:03:47.500
In Wirklichkeit könnten sich dahinter
jeweils größere Petrinetze verbergen.

0:03:47.500,0:03:50.650
Also es könnte sein, dass das, was hier nur
eine Stelle ist, in Wirklichkeit ein ganzes

0:03:50.650,0:03:54.580
Petrinetz ist, in das irgend etwas reingeht, etwas
rauskommt (und was hier drin passiert, ist egal).

0:03:54.580,0:03:56.110
Das muss nicht genau eine Stelle sein.

0:03:56.110,0:03:58.660
Das wäre der nicht-kritische Bereich.

0:03:58.660,0:04:01.750
Also irgendwie ein Petrinetz-Teil, in
dem irgendwelche Aktionen ausgeführt

0:04:01.750,0:04:04.270
werden können, die nichts mit dem
kritischen Bereich zu tun haben.

0:04:05.290,0:04:07.150
Das gleiche gilt für den Akteur 2.

0:04:07.150,0:04:08.290
Also das sind der nicht-kritische

0:04:08.290,0:04:11.770
Bereich 1 und der nicht-kritische
Bereich 2 für die beiden Akteure.

0:04:11.770,0:04:16.060
Und dann gibt es auch einen
kritischen Bereich für jeden Akteur,

0:04:16.990,0:04:18.580
und das seien K1, K2 für diese beiden Akteure.

0:04:18.580,0:04:22.420
Und die Idee ist, dass das der Bereich
ist, der irgendwie verhindert werden soll,

0:04:22.420,0:04:23.590
dass beide gleichzeitig dort sind.

0:04:23.590,0:04:24.280
Also es soll verhindert werden,

0:04:24.280,0:04:28.630
dass gleichzeitig zum Beispiel eine Marke
hier liegt und eine Marke hier liegt.

0:04:28.630,0:04:33.250
Weil das hieße, dass sowohl Akteur 1 als auch
Akteur 2 in ihrem kritischen Bereich sind.

0:04:33.250,0:04:39.040
Also wenn wir diese Aktionen k1, k2, nk1,
nk2 ansehen als "Akteur 1 betritt seinen

0:04:39.040,0:04:41.980
kritischen Bereich", "Akteur 2 betritt
seinen kritischen Bereich" und analog

0:04:41.980,0:04:45.670
jeweils für das Verlassen des kritischen
bzw. Betreten des nicht-kritischen Bereichs,

0:04:45.670,0:04:51.130
dann sollen bestimmte Aktionsfolgen für das
gemeinsame Gesamtsystem nicht möglich sein.

0:04:51.130,0:04:57.370
Also es soll nicht möglich sein: k1, k2, also
Akteur 1 betritt den kritischen Bereich, und bevor

0:04:57.370,0:05:01.600
Akteur 1 den kritischen Bereich verlassen hat,
betritt auch Akteur 2 seinen kritischen Bereich.

0:05:01.600,0:05:04.540
Denn wenn das dann hieße,
dass beide Akteure versuchen,

0:05:04.540,0:05:07.450
in eine Datei zu schreiben, könnten
sie das aus Versehen gleichzeitig tun.

0:05:07.450,0:05:12.010
Und natürlich das Schleusen-Beispiel
aus dem Übungsbetrieb ist so ähnlich.

0:05:12.010,0:05:16.540
Da geht es um Schiffe, die nicht gleichzeitig in
einem bestimmten Teil der Schleuse sein sollen.

0:05:16.540,0:05:18.490
Das hat letztlich auch was
mit kritischem Bereich zu tun.

0:05:21.490,0:05:22.210
Wie könnte man das lösen?

0:05:23.320,0:05:27.550
Das Petrinetz, so wie hier stilisiert,
hat natürlich die Eigenschaft,

0:05:27.550,0:05:30.850
dass es durchaus möglich wäre, k1 und
k2 direkt nacheinander auszuführen.

0:05:31.360,0:05:32.260
Können wir das verhindern?

0:05:33.340,0:05:35.350
Man kann so eine Art Guard-Stelle nutzen.

0:05:35.350,0:05:41.560
Also eine zusätzliche Stelle, die selber gar keine
Funktionalität im Sinne der Akteure 1 und 2 hat.

0:05:41.560,0:05:46.570
Die aber dafür sorgt, dass bestimmtes
unerwünschtes Verhalten nicht eintritt.

0:05:46.570,0:05:51.940
Und zwar kann man über ein extra Stelle
synchronisieren, und die nennt sich Mutex-Stelle.

0:05:51.940,0:05:55.750
Also eine Hilfsstelle, die man oft
Mutex nennt wegen "mutual exclusion".

0:05:55.750,0:05:59.050
Und wie ist hier das Vorgehen?

0:05:59.050,0:06:01.990
Das ist eine Stelle mit einer Marke am Anfang.

0:06:01.990,0:06:03.460
Und diese Marke wird immer gebraucht,

0:06:03.460,0:06:06.100
wenn einer der beiden Akteure
seinen kritischen Bereich betritt.

0:06:06.100,0:06:09.640
Also wenn zum Beispiel der Akteur 1
seinen kritischen Bereich betreten möchte,

0:06:09.640,0:06:12.520
dann muss natürlich irgendwie der
nicht-kritische Bereich verlassen

0:06:12.520,0:06:19.210
werden, aber zusätzlich muss diese
Mutex-Stelle mit einer Marke belegt sein,

0:06:19.210,0:06:23.650
die der Akteur 1 dann konsumiert, um
seinen kritischen Bereich zu betreten.

0:06:23.650,0:06:26.260
Das heißt, um den kritischen Bereich
zu beizutreten (also um die Marke

0:06:26.260,0:06:29.290
von hier nach hier zu bringen), muss
zusätzlich diese Marke konsumiert werden.

0:06:29.290,0:06:33.730
Was auch heißt, dass dann zum Beispiel
direkt danach nicht der zweite Akteur

0:06:33.730,0:06:35.800
seinen kritischen Bereich betreten kann.

0:06:35.800,0:06:40.480
Denn das hieße k2 auszuführen, was aber
auch von dieser Mutex-Stelle abhängt.

0:06:41.680,0:06:43.150
Nehmen wir an, k1 schaltet.

0:06:43.150,0:06:45.370
Dann würden diese und diese Marke
verschwinden, hier wäre eine Marke,

0:06:45.370,0:06:51.670
Akteur 1 würde seinen kritischen
Bereich abarbeiten und würde die

0:06:51.670,0:06:55.720
Marke für den Mutex erst wieder freigeben,
wenn der kritische Bereich verlassen wird.

0:06:55.720,0:07:00.070
Also wenn Akteur 1 wieder in den
nicht-kritischen Bereich übertritt,

0:07:00.070,0:07:01.150
also seinen kritischen Bereich verlässt.

0:07:01.150,0:07:04.630
Dann würde diese Marke zurückgegeben werden und

0:07:04.630,0:07:07.270
könnte dann wiederverwendet
werden von k1 oder von k2.

0:07:10.660,0:07:14.740
Diese Synchronisation über diese
gemeinsame Stelle sorgt intuitiv dafür,

0:07:14.740,0:07:18.070
dass nicht beide Akteure gleichzeitig
im kritischen Bereich sein können.

0:07:18.070,0:07:21.550
Das beruht natürlich darauf,
dass es einen Konflikt gibt.

0:07:24.070,0:07:29.230
Die jeweiligen Transitionen k1 und
k2 hier sind in der dargestellten

0:07:29.230,0:07:33.580
Situation beide aktiviert, aber
eben nicht nebenläufig aktiviert.

0:07:33.580,0:07:36.730
Sondern wir haben einen Konflikt
genau über diese Stelle hier.

0:07:36.730,0:07:41.860
Das verhindert, dass sie beide
ihren kritischen Bereich betreten.

0:07:41.860,0:07:46.960
Das wäre die informelle und intuitive Begründung.

0:07:46.960,0:07:50.020
Natürlich kann man sich das
wieder formal anschauen, indem

0:07:50.020,0:07:54.130
man einfach den Erreichbarkeitsgraphen inspiziert.

0:07:54.130,0:08:04.140
Wir wollen zeigen, dass niemals in den Stellen
K1 und K2 gleichzeitig eine Marke liegt.

0:08:04.140,0:08:04.890
Wie können wir das zeigen?

0:08:04.890,0:08:07.230
Wir können den Erreichbarkeitsgraphen aufstellen.

0:08:07.230,0:08:11.070
Das habe ich einfach mal getan,
ohne das schrittweise zu entwickeln.

0:08:11.070,0:08:16.080
Also wir sehen hier, wenn wir die
Stellenreihenfolge NK1, K1, K2,

0:08:16.080,0:08:25.380
NK2 nehmen (also im Grunde genommen so wie
die Stellen hier von links nach rechts auch

0:08:25.380,0:08:28.680
eingezeichnet waren), dann wissen wir,
die Startmarkierung ist (1,0,1,0,1).

0:08:29.610,0:08:30.510
Das sehen wir etwa hier.

0:08:30.510,0:08:34.200
Und dann ist jeweils eingezeichnet,

0:08:34.200,0:08:39.750
welche Transitionen ausführbar sind und wie
die dadurch erreichten Markierungen aussehen.

0:08:40.590,0:08:45.660
Wir können hier tatsächlich zum einen sehen,
dass es keine Sequenzen der Art k1, k2 gibt.

0:08:45.660,0:08:49.470
Wenn k1 ausgeführt wurde, dann muss
bevor k2 ausgeführt werden kann,

0:08:49.470,0:08:52.680
immer mindestens einmal
noch nk1 ausgeführt werden.

0:08:52.680,0:08:54.300
Das ist die eine Beobachtung.

0:08:54.300,0:08:59.250
Und die andere Beobachtung ist tatsächlich,
dass es unter den hier überhaupt erreichbaren

0:08:59.250,0:09:03.570
Markierungen keine gibt, wo sowohl
K1 als auch K2 eine 1 enthalten.

0:09:05.040,0:09:07.740
Hier sind jeweils die beiden interessanten
Stellen K1, K2 fett markiert.

0:09:07.740,0:09:13.260
Und es gibt einfach keine erreichbare Markierung,
in der hier und hier jeweils eine 1 steht.

0:09:13.260,0:09:16.740
Das hat die Mutex-Stelle
hier erfolgreich erreicht.

0:09:21.090,0:09:23.490
Das wäre das einfachste Beispiel
zum wechselseitigen Ausschluss.

0:09:23.490,0:09:29.168
Und wie gesagt, es taucht in vielen Beispielen
und Anwendungen von Petrinetzen auf.

0:09:29.168,0:09:29.520
Man könnte sich auch fragen:

0:09:29.520,0:09:31.380
Wo hätte uns das denn in
der Vergangenheit geholfen?

0:09:31.380,0:09:37.680
Und nun, tatsächlich auch bei dem Beispiel
davor im Kontext der Speisenden Philosophen

0:09:37.680,0:09:40.800
kann man vom wechselseitigen
Ausschluss Gebrauch machen.

0:09:40.800,0:09:43.440
Mindestens kann man das sehr leicht sehen,

0:09:43.440,0:09:46.650
wenn man das Problem vereinfacht
und nur zwei Philosophen betrachtet.

0:09:47.550,0:09:52.920
Allgemein könnte man auch für größere
Konstellationen von speisenden Philosophen

0:09:52.920,0:09:57.690
nach Lösungen suchen, die solche
Synchronisations-Ideen verfolgen.

0:09:58.650,0:10:01.020
Ich bespreche das jetzt nur
für den einfachsten Fall.

0:10:01.020,0:10:03.210
Wir gucken uns die Speisenden Philosophen an.

0:10:03.210,0:10:06.390
Das haben wir vor kurzem erst getan,
das muss ich nicht weiter diskutieren.

0:10:06.990,0:10:08.820
Wir betrachten einmal die Vereinfachung,

0:10:08.820,0:10:11.570
dass wir einen der drei Philosophen
nach Hause geschickt haben.

0:10:11.570,0:10:13.678
Also sind es nur noch zwei speisende Philosophen.

0:10:13.678,0:10:14.870
Das sehen wir hier unten auch.

0:10:14.870,0:10:17.960
Also der Philosoph 3 ist weg und es ist eine Gabel

0:10:17.960,0:10:19.910
weniger (sonst wäre das Problem
nicht mehr so interessant).

0:10:19.910,0:10:24.860
Aber wir haben jetzt P1, P2 und
die dazwischenliegenden F1, F2.

0:10:24.860,0:10:29.120
Jetzt könnte man die sich etwas anders
hinsetzen lassen, sich gegenübersitzen etc.

0:10:29.120,0:10:32.420
Aber das ändert nichts an der Problematik.

0:10:32.420,0:10:34.130
Und zwar ist die Problematik die,

0:10:34.130,0:10:39.050
dass nach wie vor es auch in dem so
vereinfachten Petrinetz Deadlocks gibt.

0:10:39.050,0:10:44.060
Das heißt, auch hier kann es passieren, dass P1,

0:10:44.060,0:10:47.180
P2 verhungern, weil sie sich in
ungünstiger Art und Weise verhalten.

0:10:47.180,0:10:51.380
Indem beide die rechte Gabel
greifen und dann weder essen können,

0:10:51.380,0:10:54.710
noch die Gabeln zurücklegen können, weil
sie erst die linke Gabel greifen müssen.

0:10:54.710,0:11:02.990
Auch hier in diesem Petrinetz ist
nach wie vor eine Verklemmung möglich.

0:11:05.120,0:11:08.300
Da könnte uns ja vielleicht
Synchronisation helfen.

0:11:08.300,0:11:11.390
Also wir können versuchen, eine
extra Mutex-Stelle einzuführen,

0:11:11.390,0:11:17.180
die irgendwie verhindert, dass zum
Beispiel P1 und P2 beide genau eine

0:11:17.180,0:11:19.670
Gabel greifen und dann die zweite
Gabel nicht mehr kriegen können.

0:11:22.160,0:11:23.330
Vielleicht als Zwist kann man hier tatsächlich

0:11:25.790,0:11:30.911
sozusagen auf Anwendungsebene das Problem
auch ohne eine extra Mutex-Stelle lösen.

0:11:30.911,0:11:34.580
Und zwar wenn man den gedanklichen
Sprung macht, zu sagen:

0:11:34.580,0:11:38.120
Wie wäre es denn, wenn die beiden
Philosophen ihr Verhalten leicht ändern?

0:11:38.120,0:11:43.280
Und zwar könnte man einen von
beiden zu einem Linkshänder machen,

0:11:43.280,0:11:46.160
also einen Händigkeitswechsel verordnen.

0:11:46.160,0:11:48.830
Wie würde das aussehen?

0:11:48.830,0:11:53.000
Hier habe ich gleich mal
P1 zum Linkshänder gemacht.

0:11:53.000,0:11:55.610
Das heißt, das Verhalten von P1 wäre nicht mehr,

0:11:55.610,0:11:58.310
erst die rechte Gabel zu greifen
und dann auf die linke zu warten.

0:11:58.310,0:12:01.340
Sondern erst die linke Gabel zu greifen
und dann auf die rechte zu warten.

0:12:01.940,0:12:06.350
Das drückt sich hier im Petrinetz aus,
indem einfach zwei Pfeile umgebogen wurden.

0:12:06.350,0:12:13.280
Jeweils die Pfeile, wo der Philosoph 1
Zugriff auf die Gabeln 1 und 2 nimmt.

0:12:13.280,0:12:16.850
Die wurden genau so umgebogen,
dass der Pfeil, der vorher von F2

0:12:16.850,0:12:22.700
zu irgendwas beim Philosoph 1 führte, jetzt
stattdessen daher rührt, wo vorher F1 war.

0:12:22.700,0:12:26.020
Also genau diese beiden Pfeile
laufen jetzt über Kreuz.

0:12:28.660,0:12:29.860
Jetzt behaupte ich, das löst das Problem.

0:12:29.860,0:12:30.880
Warum?

0:12:31.690,0:12:36.460
Das führt dazu, dass jetzt nicht mehr beide
zuerst nach der rechten Gabel greifen,

0:12:36.460,0:12:39.340
sondern P1 nach der linken
und P2 nach der rechten.

0:12:39.340,0:12:44.140
Das heißt, diese Gabel F1 wäre jetzt
die für beide zuerst gegriffene.

0:12:44.140,0:12:47.860
Und das macht sie letztlich zu einem
Synchronisationspunkt oder einer Mutex-Stelle.

0:12:47.860,0:12:50.740
Wie können wir uns davon überzeugen?

0:12:54.700,0:12:57.870
Wir könnten das Petrinetz nochmal anders
darstellen, damit es offensichtlicher wird.

0:12:57.870,0:13:04.570
Jetzt ist das ein bisschen unsymmetrisch, weil
ich den dritten Philosophen entfernt habe.

0:13:04.570,0:13:06.880
Wir können genau das gleiche
Petrinetz durch ein bisschen

0:13:06.880,0:13:12.280
Schütteln und Neuanordnen der
Knoten auch so darstellen.

0:13:12.280,0:13:18.940
Das müssen Sie mir jetzt entweder glauben oder
mal auf den Folien nebeneinander vergleichen,

0:13:18.940,0:13:22.210
dass das das gleiche Petrinetz ist wie
dieses hier (nur anders hingemalt).

0:13:22.210,0:13:23.710
Also genau die gleichen Verbindungen.

0:13:23.710,0:13:34.210
Und hier wird jetzt offenkundiger,
dass die F1-Stelle wie ein Mutex wirkt.

0:13:35.080,0:13:38.110
Dieses Petrinetz, wie es hier
dargestellt ist, ist verklemmungsfrei.

0:13:38.110,0:13:44.560
Das können Sie mir auch glauben oder durchspielen
bzw. den Erreichbarkeitsgraphen aufstellen.

0:13:45.070,0:13:49.510
Der Punkt ist, dass hier sowohl P1 als auch P2,

0:13:49.510,0:13:54.220
um gefüllt zu werden, jeweils diese
oder diese Transition schalten müssen.

0:13:54.220,0:13:56.470
Und die greifen beide auf F1 zu.

0:13:56.470,0:14:01.630
Das heißt, wenn zum Beispiel Philosoph 1 nach
seiner linken Gabel greift (nach dem F1),

0:14:01.630,0:14:05.650
dann würde eben diese Marke
hier oben hin verschwinden.

0:14:05.650,0:14:10.780
Und dann ist Philosoph 2 praktisch
lahmgelegt und kann erst wieder aktiv

0:14:10.780,0:14:17.080
werden, wenn Philosoph 1 diese Gabel
wieder abgelegt hat, also gegessen hat.

0:14:17.080,0:14:21.130
Das ist ein Konflikt natürlich.

0:14:21.130,0:14:25.720
Das heißt, dass diese beiden Transitionen
konfliktbehaftet sind bezüglich der Gabel F1.

0:14:25.720,0:14:29.080
Das war in dem ursprünglichen
Philosophen-Problem gerade nicht der Fall.

0:14:29.080,0:14:32.620
Da waren am Anfang die Aktionen,
nach der rechten Gabel zu greifen,

0:14:32.620,0:14:34.120
für alle drei Philosophen nebenläufig.

0:14:34.120,0:14:35.650
Was erst mal schön klingt, da es parallel geht.

0:14:35.650,0:14:39.940
Aber das führte zu einer Verklemmung, während
hier durch diese Einführung des Konfliktes,

0:14:39.940,0:14:43.780
des wechselseitigen Ausschlusses, dieser
Mutex-Stelle, letztlich dafür gesorgt wird,

0:14:43.780,0:14:48.040
dass nicht einfach beide Philosophen wild
drauflos nach der ersten Gabel greifen.

0:14:48.040,0:14:55.990
Sondern nur einer von beiden kann das tun, und
danach kann der andere nicht sofort irgendwas tun.

0:14:55.990,0:15:00.910
Aber wenn Philosoph 1 dann mit essen fertig
ist, kann Philosoph 2 wieder drankommen.

0:15:00.910,0:15:04.690
Das heißt, hier verhindern wir die
Verklemmung durch Synchronisation,

0:15:04.690,0:15:08.380
durch Verwendung dieser Mutex-Stelle letztlich.

0:15:08.380,0:15:16.630
Das ist ein sehr typisches Modellierungsmuster
in verschiedenen Anwendungen.
