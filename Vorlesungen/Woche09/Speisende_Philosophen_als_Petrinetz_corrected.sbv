0:00:01.540,0:00:10.580
We are still in the Properties
of Petri Nets part of this lecture.

0:00:10.580,0:00:15.380
Overall, however, we are nearing the
end of the Petri net chapter.

0:00:15.380,0:00:20.930
In fact, we will not
be introducing any more properties.

0:00:20.930,0:00:26.750
But in this video I want to
discuss an example, which was at the beginning

0:00:26.750,0:00:31.640
of the Petri net chapter, and which I
promised that we will look at later as a

0:00:31.640,0:00:32.720
Petri
net.

0:00:32.720,0:00:35.890
That was the
so-called feeding philosophers.

0:00:35.890,0:00:46.440
At the beginning of this example I
had also mentioned some properties which one

0:00:46.440,0:00:51.110
would like to know and
investigate of such a dynamical system.

0:00:51.110,0:00:56.260
We have formalized some of them in
the meantime and can now apply them to

0:00:56.260,0:00:57.260
this
example.

0:00:57.260,0:01:02.190
There were questions about the progress or dead
ends in which a system can end up.

0:01:02.190,0:01:08.580
Or whether individual actions, which we modeled as
transitions in a Petri net, can always occur

0:01:08.580,0:01:11.900
at least once or can even
be executed any number of times.

0:01:11.900,0:01:17.750
There were questions about fairness, which in
the case of philosophers was whether two

0:01:17.750,0:01:19.680
philosophers together could
starve the third.

0:01:19.680,0:01:24.610
There were questions about causalities, whether certain
actions are mutually dependent (which can be

0:01:24.610,0:01:27.159
found again here
with the example).

0:01:27.159,0:01:32.700
And also the last introduced
notions about concurrency and conflicts can

0:01:32.700,0:01:36.170
be related
to this example.

0:01:36.170,0:01:42.909
Questions about bounds or
capacities, i.e. boundedness or 1-safety,

0:01:42.909,0:01:47.600
which were also discussed last week,
have less application specifically to this

0:01:47.600,0:01:48.670

example.

0:01:48.670,0:01:52.420
We will look at those
separately again in a different context.

0:01:52.420,0:01:56.700
But as a reminder,
let's start with this example.

0:01:56.700,0:01:57.830
So what was
it all about?

0:01:57.830,0:02:00.560
There were these three philosophers
sitting around a round table.

0:02:00.560,0:02:02.760
And, of course, this is not
a Petri net that you see here.

0:02:02.760,0:02:08.800
This is simply a sketch,
a representation of the situation.

0:02:08.800,0:02:10.810
There are these three
philosophers P1, P2, P3.

0:02:10.810,0:02:11.939
They sit around
a round table.

0:02:11.939,0:02:17.209
And always between two philosophers there is
a fork (English: Fork, therefore F1, F2,

0:02:17.209,0:02:18.280

F3).

0:02:18.280,0:02:23.969
And then the description of the situation
gave that the philosophers get hungry from time

0:02:23.969,0:02:27.590
to time (we will
call that H_i for "hungry").

0:02:27.590,0:02:33.779
And then they would like to eat (this
will be labeled here E1, E2, E3 for the

0:02:33.779,0:02:34.879
three
philosophers).

0:02:34.879,0:02:37.310
And for that they
need both adjacent forks.

0:02:37.310,0:02:43.680
That is, if philosopher 1 wants to
eat, he needs forks 3 and 1.

0:02:43.680,0:02:49.709
And the procedure is that a philosopher
who is hungry picks up both forks at

0:02:49.709,0:02:54.769
any time, first the right one and only
when the right one is in hand, then

0:02:54.769,0:03:00.890
also the left one if possible
(if the left fork is still there).

0:03:00.890,0:03:03.359
Then they eat
with both forks.

0:03:03.359,0:03:06.669
And afterwards the philosopher puts the two
forks back on the table at the

0:03:06.669,0:03:12.059
same time, so that then maybe someone
else could grab one of these two forks.

0:03:12.059,0:03:18.180
So that was the verbal description
of the problem, now enriched by these

0:03:18.180,0:03:26.319
labels (I don't think that showed up
on the previous slide for this example).

0:03:26.319,0:03:32.069
Now we can try to model
this in principle as a Petri net.

0:03:32.069,0:03:37.809
And for that, I'm going to use exactly the
labels that have already appeared here in the Petri

0:03:37.809,0:03:38.809

net.

0:03:38.809,0:03:44.189
And these will be exactly
the places in the Petri net.

0:03:44.189,0:03:47.129
The philosophers
themselves will not.

0:03:47.129,0:03:52.749
They will not appear in the Petri
net themselves, but they are essentially marked

0:03:52.749,0:03:57.069
by their being
hungry and eating.

0:03:57.069,0:04:01.019
How could this
Petri net look like?

0:04:01.019,0:04:04.969
I simply give this,
on the one hand.

0:04:04.969,0:04:08.650
On the other hand, I will now
explain how the philosophers find themselves here.

0:04:08.650,0:04:12.159
Immediately obviously one
cannot recognize them here.

0:04:12.159,0:04:19.320
So, there are the places H, W,
F each numbered with 1, 2, 3.

0:04:19.320,0:04:23.100
And the meaning for example
of the place H1 shall be:

0:04:23.100,0:04:27.140
Philosopher 1 is hungry
or is ready to eat.

0:04:27.140,0:04:30.410
It will be that in
principle philosophers are always hungry.

0:04:30.410,0:04:33.650
It will not be modeled extra
that they have to get hungry first.

0:04:33.650,0:04:38.751
The point is that at any
moment a philosopher could decide to want

0:04:38.751,0:04:43.650
to eat (that is, be ready to eat),
and then try to reach for the forks

0:04:43.650,0:04:45.910
(to be
able to eat).

0:04:45.910,0:04:51.750
Since we know that there is this moment
where a philosopher who has already grabbed one fork

0:04:51.750,0:04:58.020
has to wait for the other fork,
there are the additional places W1, W2, W3.

0:04:58.020,0:05:02.340
They didn't appear like
that in the description.

0:05:02.340,0:05:08.320
This would be the state after the
right fork has already been gripped and,

0:05:08.320,0:05:13.110
if necessary, the left fork must be waited
for because it is not on the table.

0:05:13.110,0:05:16.290
For this purpose, a token
will be used at W1 or

0:05:16.290,0:05:17.290
W2
or W3.

0:05:17.290,0:05:20.950
To express that the corresponding philosopher
is waiting for the left fork.

0:05:20.950,0:05:25.130
Which also means that he
has already grabbed the right fork.

0:05:25.130,0:05:29.030
If a fork is not grasped,
then it is on the table.

0:05:29.030,0:05:33.290
This would correspond to the situation as it is
here, where the forks are really still on the

0:05:33.290,0:05:34.290

table.

0:05:34.290,0:05:39.050
And for that, a respective token
will be used on F1, F2, F3.

0:05:39.050,0:05:46.180
So we'll see that here in
the three places, so to speak.

0:05:46.180,0:05:53.080
And then there will be tokens on the
E1, E2, E3 spots when the corresponding philosopher

0:05:53.080,0:05:54.080
is
eating.

0:05:54.080,0:05:57.510
So, we don't see
the philosophers explicitly here.

0:05:57.510,0:06:00.380
But, of course, we can
still find them in here.

0:06:00.380,0:06:14.570
And that is, philosopher 1, for example, would ultimately
be represented here by this part of the Petri

0:06:14.570,0:06:16.310

net.

0:06:16.310,0:06:22.460
So the three passages on being hungry, on
waiting, and on eating, which relate to philosopher

0:06:22.460,0:06:31.990
1, and ultimately this
transition before the waiting passage.

0:06:31.990,0:06:38.710
This is also a transition that belongs to
philosopher 1, because this is where philosopher 1 first

0:06:38.710,0:06:43.090
becomes active (namely, when he is
hungry and finds a suitable fork, his

0:06:43.090,0:06:45.830
right fork,
on the table).

0:06:45.830,0:06:48.640
For philosopher 1, F3
is the right fork.

0:06:48.640,0:06:54.730
This would start the
action for philosopher 1.

0:06:54.730,0:07:02.180
Basically, this is philosopher 1, and accordingly
philosopher 2 can be found here in

0:07:02.180,0:07:06.900
the Petri net,
and similarly philosopher 3.

0:07:06.900,0:07:10.490
Then there are
the two forks.

0:07:10.490,0:07:11.830
They're really separate
from the philosophers.

0:07:11.830,0:07:17.210
They're just there, and they're
also initially assigned a token.

0:07:17.210,0:07:18.700
And there's
this transition.

0:07:18.700,0:07:22.220
We could actually have those
count towards philosopher 1 as well.

0:07:22.220,0:07:29.090
That would be the transition where philosopher
1 is done eating and releases the

0:07:29.090,0:07:30.090

forks.

0:07:30.090,0:07:36.490
So we find the three philosophers
again, expressed by this set of places.

0:07:36.490,0:07:41.580
The initial situation is that the three forks
are on the table (that's what we see here),

0:07:41.580,0:07:45.070
and that all three philosophers
are in principle ready to eat.

0:07:45.070,0:07:50.610
So they would be ready to reach for
forks in order to be able to eat then.

0:07:50.610,0:07:54.750
How are all
the convolutions justified?

0:07:54.750,0:07:58.980
For example, we see here that in
fact this action, which would result in

0:07:58.980,0:08:04.870
philosopher 1 waiting for the left
fork, depends on philosopher 1 actually being

0:08:04.870,0:08:11.870
hungry before and having already
taken the right fork from F3.

0:08:11.870,0:08:17.710
This would justify why these
are exactly the preconditions for this

0:08:17.710,0:08:21.380
transition that leads to then
philosopher 1 waiting for this fork.

0:08:21.380,0:08:23.260
Then we
can look at:

0:08:23.260,0:08:26.210
What has to happen
for philosopher 1 to eat?

0:08:26.210,0:08:28.810
He must have grabbed
the right fork beforehand.

0:08:28.810,0:08:33.570
That is, this waiting condition must
have been taken by philosopher 1, and

0:08:33.570,0:08:38.269
then he must be able to grasp the
left fork (which is fork F1 for philosopher 1).

0:08:38.269,0:08:43.459
So if this and this condition
are met, then philosopher 1 can eat.

0:08:43.459,0:08:47.079
Then there would be a token here
for philosopher 1, and then philosopher 1, when

0:08:47.079,0:08:49.569
he's done eating, would be
able to fire this transition.

0:08:49.569,0:08:52.422
And that would cause philosopher 1 to
go back to the state where he's

0:08:52.422,0:08:57.430
ready to eat, so again waiting for
the next time where he would eat.

0:08:57.430,0:09:00.569
And of course both forks, the left fork
and the right fork, would have to be

0:09:00.569,0:09:01.620
returned by
philosopher 1.

0:09:01.620,0:09:07.199
That's why there are these
two exit arrows from the transition.

0:09:07.199,0:09:11.420
And for Philosopher 2 and Philosopher 3,
that's just symmetrically repeated in each case.

0:09:11.420,0:09:21.870
So the other parts in this section
do the same thing for philosopher 3.

0:09:21.870,0:09:23.940
So much for the
kind of modeling here.

0:09:23.940,0:09:31.949
Then we can look at a
run, looking for properties that we've

0:09:31.949,0:09:33.480
already
seen.

0:09:33.480,0:09:34.730
Do we
recognize concurrency?

0:09:34.730,0:09:35.839
Do we
recognize conflict?

0:09:35.839,0:09:37.670
Can we say
something about liveness?

0:09:37.670,0:09:44.269
Let's assume that philosopher 1 is
the one who becomes active first.

0:09:44.269,0:09:48.009
So, for example, philosopher
P1 would like to eat.

0:09:48.009,0:09:50.769
What would
that mean?

0:09:50.769,0:09:57.230
It would mean P1 has to see that
he gets the first fork in his hand.

0:09:57.230,0:09:59.550
Of course, ultimately, philosopher 2 and
philosopher 3 also want to eat.

0:09:59.550,0:10:06.130
But let's assume that philosopher 1 will be
activated first and will also be able to successfully

0:10:06.130,0:10:10.550
fire this transition, because at the moment there is
the fork on the table that he needs for this.

0:10:10.550,0:10:15.740
So the first activated transition could
be that and the first executed action

0:10:15.740,0:10:18.029
could be that
this transition will fire.

0:10:18.029,0:10:20.279
Namely based on
these two tokens.

0:10:20.279,0:10:26.309
Of course, analogously, and concurrently to that,
philosopher 2 could also become active here

0:10:26.309,0:10:30.500
or philosopher 3
could become active here.

0:10:30.500,0:10:39.910
So here now this, this and
this transition would be activated concurrently.

0:10:39.910,0:10:44.759
There is no conflict in
the Petri net at the moment.

0:10:44.759,0:10:48.040
At least not
between these three transitions.

0:10:48.040,0:10:52.699
That's the only way I can say that, we'll have to
look at the rest to see if there are conflicts of

0:10:52.699,0:10:56.750
any
other kind.

0:10:56.750,0:11:02.490
So then P1 has
now taken the right fork.

0:11:02.490,0:11:06.529
That's why this token here has also disappeared,
and it's also no longer recorded that philosopher

0:11:06.529,0:11:08.040
1 wants
to eat.

0:11:08.040,0:11:12.160
Because he is, so to speak,
in the process of getting the food.

0:11:12.160,0:11:16.329
At least to have already grabbed the right
fork, in order to possibly be able to grab

0:11:16.329,0:11:18.250
the left fork
afterwards and to eat.

0:11:18.250,0:11:23.740
Let's assume that neither philosopher 2 nor
philosopher 3 get in the way somehow, and

0:11:23.740,0:11:25.970
philosopher 1 can
continue to act.

0:11:25.970,0:11:30.290
Then, of course, he could now
fire this transition, which would ensure that

0:11:30.290,0:11:33.199
he also takes the
other fork (his left fork).

0:11:33.199,0:11:34.959
Because now this
transition would be activated.

0:11:34.959,0:11:36.310
It was
not before.

0:11:36.310,0:11:37.779
It was
not activated.

0:11:37.779,0:11:38.779
Why
not?

0:11:38.779,0:11:39.779
Because there was
no token here.

0:11:39.779,0:11:48.149
That is, this is a case of causality
here, because in fact this transition has to

0:11:48.149,0:11:50.730
fire before this
transition can ever fire.

0:11:50.730,0:11:52.869
That would be
a necessary condition.

0:11:52.869,0:11:54.619
This transition would be
a necessary condition for this.

0:11:54.619,0:11:57.850
And we also find this
analogously in the other philosophers.

0:11:57.850,0:12:01.550
What we also have
now is a conflict situation.

0:12:01.550,0:12:08.089
In the step before,
that was not the case.

0:12:08.089,0:12:11.680
There the three transitions were actually activated
concurrently, and there were also no other

0:12:11.680,0:12:15.620
activated transitions than this one,
this one and this one.

0:12:15.620,0:12:20.730
There one can convince oneself that all other
transitions are not activated, because in each case at

0:12:20.730,0:12:23.759
least one precondition
place is not occupied.

0:12:23.759,0:12:29.860
But now after executing the first
transition and then activating these transitions, it

0:12:29.860,0:12:31.670
turns out that
there is a conflict.

0:12:31.670,0:12:36.690
There is another transition, which
is now also activated or still

0:12:36.690,0:12:43.999
activated, but now is in
conflict with another transition here, namely

0:12:43.999,0:12:46.009
this
transition.

0:12:46.009,0:12:51.069
This transition is also activated, because
it finds a token in both of

0:12:51.069,0:12:52.589
its
precondition places.

0:12:52.589,0:12:58.339
But it overlaps in its preconditions in
a conflictual way with the now here

0:12:58.339,0:12:59.749
also
activated transition.

0:12:59.749,0:13:05.240
For both this transition and this
marked transition would like to consume this

0:13:05.240,0:13:06.240

token.

0:13:06.240,0:13:10.449
And since there is only one token there,
they cannot do that simultaneously, in parallel, concurrently.

0:13:10.449,0:13:15.470
Both, so both this Transition and this
Transition are activated, but they are not activated

0:13:15.470,0:13:16.470

concurrently.

0:13:16.470,0:13:21.369
So they're in conflict, precisely with respect
to this fork 1, because that's the

0:13:21.369,0:13:26.980
left fork for philosopher 1 and
the right fork for philosopher 2.

0:13:26.980,0:13:35.160
Let's assume that of the
two conflicting transitions, only the

0:13:35.160,0:13:39.470
one assigned to
philosopher 1 fires.

0:13:39.470,0:13:43.829
Then this would ensure that
now the token is here.

0:13:43.829,0:13:46.010
P1 has now also taken
the left fork and can eat.

0:13:46.010,0:13:53.069
F1 is empty, because Fork 1, the left
fork of philosopher 1, is taken from the table.

0:13:53.069,0:13:58.220
And now this place is marked
here, where philosopher 1 is eating.

0:13:58.220,0:14:07.110
And after that, philosopher 1 could
or should put the forks back.

0:14:07.110,0:14:12.410
In parallel, philosopher 3 could have reached
for the fork here, while philosopher 2

0:14:12.410,0:14:16.600
could have done nothing at all
(because this place is not occupied here).

0:14:16.600,0:14:21.800
Now, for example, philosopher 1 would
fire the transition that ends his eating

0:14:21.800,0:14:22.800

process.

0:14:22.800,0:14:27.949
And this is to make sure that
here, here, and here lie tokens again.

0:14:27.949,0:14:28.949
And
indeed:

0:14:28.949,0:14:37.610
After putting back the forks F3 and F1 by
philosopher 1, we are back to the initial situation.

0:14:37.610,0:14:46.529
This worked well because only P1
was active and not somehow P2, P3

0:14:46.529,0:14:47.740

interfered.

0:14:47.740,0:14:55.649
What other properties
could we observe?

0:14:55.649,0:15:01.269
Perhaps, for example, if P1, P2, P3
had not been so cooperative and had not

0:15:01.269,0:15:02.510
simply let
P1 do it.

0:15:02.510,0:15:05.070
For example, are there
also possibilities of entrapment here?

0:15:05.070,0:15:08.439
We already know intuitively
that this is the case.

0:15:08.439,0:15:13.569
Because we had discussed at the beginning
that actually P1, P2, P3 could behave unfavorably,

0:15:13.569,0:15:19.029
and thus the system could ultimately
end up in a dead state.

0:15:19.029,0:15:20.379
How could
that happen?

0:15:20.379,0:15:26.410
For example, if at the beginning, when
here these three transitions were activated concurrently,

0:15:26.410,0:15:30.570
the philosophers also just
greedily execute each this transition.

0:15:30.570,0:15:33.489
So they reach
for their right fork.

0:15:33.489,0:15:41.020
These three concurrently activated transitions could
fire all three in any

0:15:41.020,0:15:42.020

order.

0:15:42.020,0:15:46.739
This is shown here
as happening in parallel.

0:15:46.739,0:15:50.949
In reality it happens in any
order that this, this and this transition

0:15:50.949,0:15:51.949

fire.

0:15:51.949,0:15:56.679
Then we would be in this situation, where just
now all three philosophers are waiting for their left

0:15:56.679,0:16:06.869
fork in each case, but will
never get the opportunity to actually

0:16:06.869,0:16:08.350
be able
to progress accordingly.

0:16:08.350,0:16:12.029
Now all of them have
taken their respective right fork.

0:16:12.029,0:16:19.239
And none of them has the slightest
chance to reach for the left fork.

0:16:19.239,0:16:24.889
But it will also never happen that
one of the three now releases his grabbed

0:16:24.889,0:16:26.110
right
fork.

0:16:26.110,0:16:29.000
For this, for example, P1
would have to fire this transition.

0:16:29.000,0:16:31.899
For this, this transition would
have to have fired before.

0:16:31.899,0:16:34.949
But it can't, because
there is no token here.

0:16:34.949,0:16:38.410
And it can't get there either,
because the same is true for P2.

0:16:38.410,0:16:45.490
P2 can put back the right fork
only after the left fork could be grabbed,

0:16:45.490,0:16:49.989
but it can't do this, because
this would require this token here, etc.

0:16:49.989,0:16:54.299
Then we have indeed
reached a deadlock here.

0:16:54.299,0:16:59.299
This also tells us that the
model is certainly not strongly alive.

0:16:59.299,0:17:00.410
One might
still ask:

0:17:00.410,0:17:02.290
Is it at
least weakly alive?

0:17:02.290,0:17:06.980
The answer would be yes, because we have
seen that P1 can fire through for all its

0:17:06.980,0:17:08.260

transitions.

0:17:08.260,0:17:10.430
And P2, P3
could as well.

0:17:10.430,0:17:13.210
So at least each transition
is possible to execute once.

0:17:13.210,0:17:15.040
Not in
every pass.

0:17:15.040,0:17:21.820
But from the initial marking every
transition is in principle also once executable

0:17:21.820,0:17:27.839
by suitable choices
of sequences and steps.

0:17:27.839,0:17:29.420
Boundedness is
also present here.

0:17:29.420,0:17:33.440
I didn't try all cases
(we didn't build a reachability graph

0:17:33.440,0:17:37.900
and didn't explore all situations),
but it's easy to think that

0:17:37.900,0:17:39.800
this model
is even 1-safe.

0:17:39.800,0:17:46.810
Because at the beginning there was at most one
token per place, there are also no arrows with

0:17:46.810,0:17:51.440
any weights > 1, so these
syntactic properties for 1-safety are already fulfilled.

0:17:51.440,0:17:56.390
And if you run the model, you
will also find that there is never more

0:17:56.390,0:17:57.690
than one token
on any place.

0:17:57.690,0:18:00.909
Thus the model is 1-safe
and of course also bounded.
