0:00:00.000,0:00:02.730
Welcome
back.

0:00:02.730,0:00:11.850
We've been dealing mostly with UML class
and object diagrams in the last few videos.

0:00:11.850,0:00:14.310
You can see now
here on the slide,

0:00:14.310,0:00:20.430
in the title at least, that
we're talking about an activity diagram.

0:00:20.430,0:00:22.170
That's a different
kind of UML diagram.

0:00:22.170,0:00:28.380
And that's even though we haven't actually gotten to
the part of the lecture where we're going to be

0:00:28.380,0:00:31.080
dealing with
UML activity diagrams.

0:00:31.080,0:00:33.000
We are actually in
the Petri net part.

0:00:33.000,0:00:35.670
So why does
this diagram appear here?

0:00:35.670,0:00:41.430
First, simply as an
example of a UML

0:00:41.430,0:00:43.920
diagram that is
about dynamic modeling.

0:00:44.520,0:00:48.390
Here it is about modeling a
process, how a house should be built.

0:00:48.390,0:00:50.070
Details are not
so important now, because

0:00:50.070,0:00:55.800
we will look at this example in more
detail in the lecture in a few weeks.

0:00:55.800,0:00:58.050
What this is about right
now is that these UML

0:00:58.050,0:01:04.890
activity diagrams can be simplified
to be represented by Petri nets.

0:01:04.890,0:01:10.110
Petri nets are a simpler mechanism
that goes towards UML activity diagrams.

0:01:10.920,0:01:16.530
The current lecture material for the next two
or three weeks will be these Petri nets.

0:01:18.420,0:01:20.730
You can use
them (just like activity

0:01:20.730,0:01:22.830
diagrams) when you
need to model processes.

0:01:22.830,0:01:27.000
That is, processes that
consist of individual steps.

0:01:27.000,0:01:28.770
The main point
is to specify

0:01:28.770,0:01:33.660
or formulate and summarize conditions
under which certain single steps

0:01:33.660,0:01:37.500
are executable or in which
order they have to happen.

0:01:37.500,0:01:43.440
At first glance, this may look
a bit like a flat state diagram.

0:01:43.440,0:01:47.280
So like what we have
dealt with in the Wolf-Goat-Kohlkopf problem,

0:01:47.280,0:01:50.040
for example, or
in the corresponding exercise.

0:01:50.040,0:01:55.050
But if we look closely, we see
that there are not just nodes and connections

0:01:55.050,0:01:58.860
here, in the simple way that
there were in flat state diagrams.

0:01:58.860,0:02:02.220
There are extra elements
here, also highlighted graphically.

0:02:02.220,0:02:07.200
So this kind of
node or this apparent distribution

0:02:07.200,0:02:12.440
node where the
flow branches out.

0:02:12.440,0:02:13.400
Then you have
to talk about

0:02:13.400,0:02:18.230
what that should mean (as semantics)
of these two places in the diagram.

0:02:18.230,0:02:19.130
We'll do
that, of course.

0:02:19.130,0:02:23.510
But for now, it may suffice
to observe that, by design, there

0:02:24.290,0:02:29.510
is obviously more going on here
than in a very simple graph.

0:02:29.510,0:02:32.780
This is also a kind of graph, but not
the simple kind of graph where we only have,

0:02:32.780,0:02:35.870
as in a flat
state diagram, nodes and transitions.

0:02:40.700,0:02:42.095
We'll look at that
in more detail later.

0:02:42.095,0:02:48.230
But in the coming weeks, we'll look
at a simplified version, in a sense, of

0:02:48.230,0:02:51.470
activity diagrams like
this, via Petri nets.

0:02:51.470,0:02:55.370
And later, the relationship
to the UML world.

0:02:59.990,0:03:00.830
So what
are Petri nets?

0:03:00.830,0:03:02.060
Petri nets will
look like this.

0:03:02.060,0:03:06.020
It's a little bit
different, maybe simpler, because

0:03:06.020,0:03:10.820
there are fewer different graphical
elements than in the slide before.

0:03:10.820,0:03:15.500
We're going to have essentially these
two types of nodes in a graph.

0:03:15.500,0:03:20.540
These round places are
called places, or places actually.

0:03:20.540,0:03:23.330
And there can
be markers (tokens) in there.

0:03:23.330,0:03:30.110
These will be movable little markers (tokens) afterwards
that can be moved through the Petri net.

0:03:30.110,0:03:35.120
And these boxes, these are another
kind of nodes in the graph.

0:03:35.120,0:03:36.050
They are
called transitions.

0:03:36.050,0:03:41.690
And they essentially play the role
that the individual actions play here.

0:03:41.690,0:03:47.870
So those are used
to model dynamic actions.

0:03:47.870,0:03:54.740
While these places and the markers (tokens)
on them will rather stand for resources

0:03:54.740,0:03:58.580
that are used or
needed for these actions.

0:03:59.750,0:04:03.380
Petri nets are clearly
a means for dynamic modeling.

0:04:03.380,0:04:09.200
As opposed to class and object
diagrams, which are made for static modeling.

0:04:11.690,0:04:12.440
This is also
stated here again.

0:04:12.440,0:04:15.200
So emphasis is
on modeling dynamic behavior.

0:04:15.200,0:04:17.720
Petri nets are
a fairly old approach.

0:04:17.720,0:04:23.390
They go back to work done a
long time ago by a Mr. Petri,

0:04:23.390,0:04:24.290
hence
"Petri nets".

0:04:24.290,0:04:27.710
Unlike many
other model mechanisms

0:04:27.710,0:04:33.410
that we cover in the
lecture, they have very formal semantics.

0:04:33.410,0:04:35.105
So they are
really precisely mathematically defined.

0:04:35.105,0:04:37.190
And also the questions
about Petri nets can all

0:04:37.190,0:04:40.340
be defined mathematically, and we
can also give proofs of them.

0:04:40.340,0:04:43.190
We won't do that here, but in the
lecture you should get to know a very

0:04:43.190,0:04:49.610
formal mechanism in addition
to the more intuitive

0:04:49.610,0:04:53.090
and semi-formal modeling
methods of UML.

0:04:53.090,0:04:57.890
This is also a motivation
why Petri nets are part of

0:04:57.890,0:05:00.785
this course, and no
small part at that.

0:05:00.785,0:05:04.520
You probably won't be familiar
with Petri nets from school,

0:05:04.520,0:05:07.100
but possibly from the pre-course in
computer science, if you took that.

0:05:07.100,0:05:11.390
And some of you,
maybe not the Komedia

0:05:11.390,0:05:16.970
students, but the computer science
and ISE students, may encounter Petri

0:05:16.970,0:05:19.730
nets again
in other courses.

0:05:19.730,0:05:23.930
That could be in courses
on operating systems, real-time systems,

0:05:23.930,0:05:31.280
or at the latest in the master's when
you hear Distributed Systems or courses with Ms. KÃ¶nig.

0:05:31.280,0:05:38.040
We start
with an introduction.

0:05:38.610,0:05:44.520
Now in this video still rather informally,
to give you simply again more motivation.

0:05:44.520,0:05:48.630
On another example, which I will discuss
in more detail at this point already as

0:05:48.630,0:05:50.430
the house building example
that we just saw.

0:05:50.430,0:05:57.090
And then this week and next week it
will be about the formal basics, and the representation,

0:05:57.090,0:06:03.150
and the expression of the dynamics,
and the concept of reachability graphs.

0:06:03.150,0:06:08.670
Then that's sort of the semantics
of Petri nets unfolded, capturing all

0:06:08.670,0:06:12.810
the flows of
a Petri net.

0:06:12.810,0:06:16.350
But that's probably going to
be on our minds next week.

0:06:21.720,0:06:22.320
I had
already mentioned:

0:06:22.320,0:06:28.980
Petri nets are a formalism
of dynamic modeling, for certain situations.

0:06:28.980,0:06:33.120
So whenever it is
somehow about representing transitions.

0:06:33.120,0:06:36.780
I mentioned actions earlier, or single
steps in a run of a system.

0:06:36.780,0:06:41.460
And often, at least
in the background, maybe even

0:06:41.460,0:06:45.960
in the foreground, is
the handling of resources.

0:06:45.960,0:06:50.190
We have a system where
certain steps are allowed to

0:06:50.190,0:06:51.480
run, but only
under certain conditions.

0:06:51.480,0:06:56.430
So in the house construction example,
there was the position of a

0:06:56.430,0:06:59.760
plan that was created, that is dealt
with, that perhaps has to be checked.

0:06:59.760,0:07:02.550
And there it may
be that certain steps in

0:07:02.550,0:07:04.710
this process are only possible
if such a plan exists.

0:07:04.710,0:07:09.270
Or in another
system, those resources

0:07:09.270,0:07:12.000
might actually
be material resources.

0:07:12.000,0:07:17.100
Like in the snack vending machine example
that I briefly talked about last week.

0:07:17.100,0:07:21.420
There, that could just be
the snacks and the chip packs

0:07:21.420,0:07:23.640
or cookie packs that were available,
or the money from the vending machine.

0:07:24.330,0:07:28.770
Those would all be things
where you're talking about resources.

0:07:28.770,0:07:31.770
And those can be
captured well in Petri nets.

0:07:31.770,0:07:36.030
And easier than, say, in
a very simple graph where you

0:07:36.030,0:07:38.750
have to represent
all the states.

0:07:38.750,0:07:41.480
In the snack machine example
last week, I talked about how

0:07:41.480,0:07:46.760
there would be almost 4000 states if
you wanted to capture all possible constellations

0:07:46.760,0:07:50.540
of the machine through
a flat state diagram.

0:07:50.540,0:07:54.410
This will be realized differently
and more simply in Petri nets.

0:07:54.410,0:07:59.840
On the one hand, this allows
us to model something like capacities well.

0:07:59.840,0:08:02.930
For example, that the
snack machine has a

0:08:02.930,0:08:08.840
certain maximum capacity
for its respective resources.

0:08:08.840,0:08:10.670
On the other hand,
the spatial distribution of resources.

0:08:10.670,0:08:13.850
So if we
somehow imagine systems

0:08:13.850,0:08:16.880
where it matters where
certain resources are stored, and

0:08:16.880,0:08:22.340
concepts like concurrency and
parallelism play a role.

0:08:22.340,0:08:25.430
I'll talk about that briefly on
a slide in a moment as well.

0:08:25.430,0:08:28.370
And whenever
we have resources

0:08:28.370,0:08:33.800
that are perhaps used by
different consumers, there can be conflicts.

0:08:33.800,0:08:37.880
And that's also going to be a
central concept in the analysis of Petri nets:

0:08:37.880,0:08:44.270
When or if there are conflicts between
different actions in the Petri net, for example.

0:08:44.270,0:08:48.920
And what is also
peculiar to Petri nets:

0:08:48.920,0:08:51.890
That they have a
fairly intuitive graphical representation.

0:08:51.890,0:08:53.990
One defines Petri
nets mathematically, but

0:08:53.990,0:08:58.940
they also allow for a graphical representation,
which is what we will largely work with.

0:08:58.940,0:09:00.050
However,
not exclusively:

0:09:00.050,0:09:02.690
We will also
definitely build the

0:09:02.690,0:09:05.840
bridge to the
mathematical, set-theoretic representation.

0:09:12.260,0:09:16.960
As far as practice is concerned, I
have already mentioned some areas of application.

0:09:16.960,0:09:18.860
At least mentioned where you
might encounter this in your studies.

0:09:18.860,0:09:21.920
For example, in distributed systems,
in the modeling of distributed

0:09:21.920,0:09:24.110
systems, or in the
analysis of distributed systems.

0:09:24.110,0:09:30.020
And I already mentioned that in
the UML language family, which is widely

0:09:30.020,0:09:36.230
used in software engineering, Petri
nets as such do not exist

0:09:36.230,0:09:38.870
(directly in the representation as
found here and also in books).

0:09:38.870,0:09:42.170
But the activity
diagrams present in UML

0:09:42.170,0:09:46.910
are slight variations, and other
representations ultimately, of Petri nets.

0:09:46.910,0:09:50.180
We will also want
to build this bridge later.

0:09:55.570,0:10:00.010
Now I had just
mentioned concurrency and parallelism here.

0:10:00.010,0:10:03.670
I would like to clarify
these terms on the next slide.

0:10:03.670,0:10:05.830
What
is parallelism?

0:10:05.830,0:10:10.240
This is the
everyday term for parallelism.

0:10:10.240,0:10:14.350
So things take place
in parallel, that is, simultaneously.

0:10:14.350,0:10:19.960
From everyday life, there is
the phenomenon in many places.

0:10:19.960,0:10:24.340
And of course also in computer science,
for example, there are many situations of parallelism.

0:10:24.340,0:10:28.810
So maybe if you have a game
graphics card, you might have thought about

0:10:28.810,0:10:33.550
how many parallel operations it
can perform before you bought it.

0:10:33.550,0:10:38.200
There is talk that in order
to render many polygons at the same

0:10:38.200,0:10:44.080
time, this graphics card should have many
efficient processing cores that should work in parallel.

0:10:44.080,0:10:46.480
Parallelism plays
a role here.

0:10:46.480,0:10:51.580
For example, when it comes to computer
efficiency, parallelism is a typical measure these days.

0:10:55.000,0:10:56.860
What
is concurrency?

0:10:56.860,0:10:58.210
It sounds
something like that.

0:10:58.210,0:11:01.660
Something is running
side by side.

0:11:01.660,0:11:03.490
That also
sounds like parallelism.

0:11:03.490,0:11:05.500
Yet, there is
an extra term here.

0:11:05.500,0:11:10.870
Concurrency is basically more the
mathematical requirement for things to

0:11:10.870,0:11:15.070
happen in parallel or
to be processed in parallel.

0:11:15.070,0:11:20.350
So we'll talk about
concurrency of individual actions

0:11:20.350,0:11:21.370
in a
Petri net.

0:11:21.370,0:11:24.100
And what will
be meant by that

0:11:24.100,0:11:28.210
is that they can/may be executed in
parallel, but they don't have to be.

0:11:28.210,0:11:33.340
That is, if there is no causal dependency
between them (for example, they also do not

0:11:33.340,0:11:36.730
interfere with each other, for example
because they want to access the same

0:11:36.730,0:11:40.750
resources in a conflicting way),
then these actions will be concurrent.

0:11:40.750,0:11:43.120
There will be a formal
definition of what that means.

0:11:43.120,0:11:46.090
And thus concurrency is
the more general term.

0:11:46.090,0:11:52.330
Because only when actions are concurrent, so
to speak, no problems would arise from

0:11:52.330,0:11:55.930
their parallel execution, then we
can actually implement them in parallel.

0:11:55.930,0:12:00.730
Formally, we will
deal with concurrency.

0:12:00.730,0:12:04.840
But the motivation for that will
be that we want to capture

0:12:04.840,0:12:08.080
situations where parallel
execution would be possible.

0:12:08.080,0:12:13.986
And of course there are lots
of examples where that becomes relevant.

0:12:13.986,0:12:20.020
I had just mentioned these computations
in a graphics card, for example.

0:12:20.020,0:12:22.990
But also
any other application

0:12:22.990,0:12:27.970
on a computer
will often have concurrency.

0:12:27.970,0:12:32.140
For example a GUI
and calculations in a spreadsheet:

0:12:32.890,0:12:36.400
Even while calculations are taking place
(perhaps a process is running that performs

0:12:36.400,0:12:40.180
the calculations in the spreadsheet), we still
want to be able to operate the GUI.

0:12:40.180,0:12:44.950
And not be slowed down somehow, and
not be able to operate the program.

0:12:44.950,0:12:49.484
This is then possible because
the GUI operations and the

0:12:49.484,0:12:53.350
graphical application operations are
concurrent with the calculations.

0:12:53.350,0:12:55.000
Because they don't
access the same resources.

0:12:55.000,0:13:00.640
And how that is then implemented
exactly, whether or not two different

0:13:00.640,0:13:03.700
computer cores actually perform these two
actions, is not so relevant for that.

0:13:04.270,0:13:05.290
That's an
implementation detail.

0:13:05.290,0:13:08.620
What's important is establishing
the concurrency of these

0:13:08.620,0:13:09.970
two processes,
computing and rendering.

0:13:09.970,0:13:12.610
And of course you
can find many other examples,

0:13:12.610,0:13:14.620
even in the
everyday world, of concurrency.

0:13:14.620,0:13:17.260
So any
banking system:

0:13:17.260,0:13:24.400
If you go into a branch of
a bank and operate a statement printer, and

0:13:24.400,0:13:28.690
a family member of yours is
at the same time perhaps making

0:13:28.690,0:13:32.140
transfers at another terminal, then
somehow the system should be realized

0:13:32.140,0:13:38.920
in such a way that
these actions can be implemented concurrently.

0:13:38.920,0:13:43.750
So that the bank has
control over the fact that incorrect

0:13:43.750,0:13:49.660
states are not created in the system
by the execution of these two actions.

0:13:52.870,0:13:58.870
For example, there is resource access to
the money or to the account balances,

0:13:58.870,0:14:05.800
and then, please, that should
run correctly in each case.

0:14:05.800,0:14:09.970
And there could be a modeling
with Petri nets in the background.

0:14:09.970,0:14:13.750
Probably in the concrete case it
will be a more complicated modeling tool

0:14:13.750,0:14:16.840
than just Petri nets,
which is in the background.

0:14:17.860,0:14:22.120
But the questions can be
asked already for Petri nets.

0:14:25.840,0:14:26.815
This is
quite abstract.

0:14:26.815,0:14:34.090
I had already promised that we would
also look at a simple but concrete

0:14:34.090,0:14:35.770
example already
in this video.

0:14:35.770,0:14:39.640
This is an example that
you may well have encountered before.

0:14:39.640,0:14:45.550
This is a typical
also playful computer science problem:

0:14:45.550,0:14:47.440
The so-called
Dining Philosophers.

0:14:47.440,0:14:49.810
This exists
in various forms.

0:14:49.810,0:14:54.460
I'm actually looking at the simplest
version here, with only three philosophers.

0:14:54.460,0:14:57.340
It is also possible
to formulate with more

0:14:57.340,0:14:59.830
philosophers, and also with
other arrangements of these philosophers.

0:14:59.830,0:15:02.020
In our simple case,
we have three philosophers

0:15:02.020,0:15:06.835
sitting around a round table
who obviously want to dine.

0:15:06.835,0:15:11.500
These are the dining philosophers, that is,
they are hungry and would like to eat.

0:15:11.500,0:15:15.430
There is also
no shortage of food.

0:15:15.430,0:15:17.800
So there is actually a plate
of food in front of everyone.

0:15:17.800,0:15:23.200
But there is a scarcity
of tools to eat this food.

0:15:23.200,0:15:27.880
Because the three philosophers
together have only three forks.

0:15:27.880,0:15:31.226
We imagine these three
philosophers P1, P2, P3.

0:15:31.226,0:15:35.800
They sit around the table, and there are
the Forks, the forks, and also three in number.

0:15:35.800,0:15:38.140
And they lie
exactly between the philosophers.

0:15:39.220,0:15:40.660
So far
so good.

0:15:40.660,0:15:43.810
The problem is that
when the philosophers are

0:15:43.810,0:15:47.110
hungry and want to eat,
they need two forks each.

0:15:47.110,0:15:49.810
So even though they have food in
front of them, they can't do anything

0:15:49.810,0:15:54.160
with it unless they have two
forks (one in each of their hands).

0:15:55.540,0:15:55.840
You
see:

0:15:55.840,0:15:58.540
Now obviously the three philosophers
can't eat at the same time.

0:15:58.540,0:16:00.610
Then you would need at least
six forks, but there are only three.

0:16:02.470,0:16:04.930
The question
is, of course:

0:16:04.930,0:16:05.830
How do
they agree?

0:16:05.830,0:16:07.090
Or, can
they agree?

0:16:07.090,0:16:08.920
What happens when
one philosopher gets hungry?

0:16:08.920,0:16:15.490
Well, then that philosopher has
to pick up the two forks.

0:16:15.490,0:16:19.640
And the philosophers do this
according to a very strict scheme.

0:16:20.240,0:16:26.450
They may have committed themselves beforehand
and are inflexible in their actions.

0:16:26.450,0:16:29.390
In any case, they always have
to behave in the same way.

0:16:29.390,0:16:33.680
Namely, a philosopher always
needs both forks for

0:16:33.680,0:16:39.740
eating, and takes
the right fork first.

0:16:39.740,0:16:44.480
So P2 would take F1
first, then the corresponding left fork.

0:16:44.480,0:16:49.880
Then P2 would eat and put
both forks back at the same time.

0:16:52.160,0:16:56.840
Now one can already ask
certain questions at this simple system.

0:16:56.840,0:17:00.110
So, can several philosophers
eat in parallel here?

0:17:00.110,0:17:03.710
Is parallelism
possible here?

0:17:03.710,0:17:07.460
One can already think about that
on the basis of the forks and

0:17:07.460,0:17:08.390
philosophers that it
will not work.

0:17:08.390,0:17:12.140
Because already if two philosophers wanted to
eat, they would need four forks together.

0:17:12.140,0:17:14.390
There are only three forks,
so parallelism is not given.

0:17:16.130,0:17:21.350
Is there perhaps something finer
at least between individual action concurrency?

0:17:21.350,0:17:28.700
So maybe reaching for the forks
is at least independent of eating?

0:17:28.700,0:17:35.060
This can be investigated when we
have described the system more precisely,

0:17:35.060,0:17:39.290
when we have made
these verbal rules more firm.

0:17:39.290,0:17:39.886
We will
do that later.

0:17:39.886,0:17:44.690
We will represent this system as a
Petri net and then answer such questions formally.

0:17:44.690,0:17:48.350
What we can
already consider informally here

0:17:48.350,0:17:50.750
is that there can be
problems here in any case.

0:17:50.750,0:17:53.030
That maybe the
philosophers are actually

0:17:53.030,0:17:54.740
starving because they can't
get to the food.

0:17:54.740,0:18:01.580
For example, because of their stubbornness to
always reach for the right fork first and

0:18:01.580,0:18:03.140
then, independently,
the left fork.

0:18:03.140,0:18:06.950
Thus, in an unfavorable
case, it could happen

0:18:06.950,0:18:13.580
that, for example, P2 reaches for F1,
and before P2 can reach for F2, P3

0:18:13.580,0:18:20.000
reaches for F2 (because P3 has also become
hungry and also reaches for his right fork first).

0:18:21.950,0:18:26.180
If then the unfavorable case occurs that P1
also becomes hungry and reaches for F3, then each

0:18:26.180,0:18:30.520
of the philosophers would have a
right fork in his hand, and

0:18:30.520,0:18:33.993
none of the philosophers would have
a left fork in his hand.

0:18:33.993,0:18:35.050
So no one would
be able to eat.

0:18:35.050,0:18:39.160
But unfortunately, this would
not cause any of the

0:18:39.160,0:18:42.310
philosophers to put their
right fork back either.

0:18:42.310,0:18:44.860
Because their stubborn behavior,
as described above, is:

0:18:44.860,0:18:50.050
Grab right fork, then grab
left fork, eat, put it back.

0:18:50.050,0:18:53.830
So here, in the
worst case, if all three

0:18:53.830,0:18:57.280
philosophers grabbed the right fork,
the system would be "in deadlock".

0:18:57.280,0:18:58.720
That's what we'll
call it later.

0:18:58.720,0:19:03.640
So ultimately the philosophers have
to starve because together they have

0:19:03.640,0:19:08.500
maneuvered themselves into a situation
where no progress is possible.

0:19:08.500,0:19:13.210
That too, this kind of
deadlocking, we'll be able to

0:19:13.210,0:19:17.140
grasp formally in general terms for Petri
nets and then apply to cases like this.

0:19:20.770,0:19:23.710
So questions that arise
here for the example, but

0:19:23.710,0:19:26.200
just also for general
Petri nets, are things like:

0:19:26.200,0:19:30.850
Can the modeled system
continuously make further progress?

0:19:30.850,0:19:35.770
Is it the case that at any point
in time a further step is still possible?

0:19:35.770,0:19:37.900
This would not be
the case in this example.

0:19:37.900,0:19:41.440
Because in the case, where all three
philosophers have the right fork in each case,

0:19:41.440,0:19:45.400
but can neither reach for the left
one, nor eat, the system would be dead.

0:19:45.400,0:19:50.170
In fact, dead in the sense that
the philosophers will eventually starve to death.

0:19:50.170,0:19:55.660
Then we, or the philosophers themselves, would
have maneuvered the system into a dead end.

0:19:55.660,0:19:57.760
One wants to
avoid that in practice.

0:19:57.760,0:20:02.230
So one wants to be able to capture
that, when a system has this property or not.

0:20:02.230,0:20:09.820
Does every single modeled action get
the chance to actually be executed?

0:20:09.820,0:20:15.700
So if we have the system like on the
previous slide, is it even the case that every

0:20:15.700,0:20:19.420
meal action could be
executed at some point?

0:20:19.420,0:20:23.260
So even with good will,
is it at all possible that

0:20:23.260,0:20:25.510
every philosopher could get
a turn with food once?

0:20:25.510,0:20:28.720
Only once or even repeated
as many times as desired?

0:20:28.720,0:20:34.150
So, unless the philosophers are
somehow clumsy, would it be possible

0:20:34.150,0:20:37.810
for each of them to be allowed
to eat over and over again as well?

0:20:37.810,0:20:42.480
That's a question of
fairness in a sense, too.

0:20:42.480,0:20:49.560
For example, that two of the
philosophers can't starve the third philosopher.

0:20:49.560,0:20:55.680
You have to ask yourself whether the system
is fair in this or a similar sense.

0:20:55.680,0:20:59.910
These are properties that do not
only apply to this one system.

0:21:00.630,0:21:04.080
So fairness is also a question
that one can grasp in general,

0:21:04.080,0:21:08.400
and then ask for different
Petri nets and different systems.

0:21:08.400,0:21:11.850
Here I related it to
the philosophers in each case.

0:21:18.300,0:21:19.810
Are there dependencies
between the actions?

0:21:19.810,0:21:20.980
In that
case, sure.

0:21:20.980,0:21:21.430
We
know:

0:21:21.430,0:21:26.080
A philosopher can only eat when he
or she has the forks in hand.

0:21:26.080,0:21:30.790
So the fork-grasping is somehow
a causal condition for eating here.

0:21:30.790,0:21:33.070
That's obvious
in the example.

0:21:33.070,0:21:36.910
In other modeled systems, it
can be more interesting to figure

0:21:36.910,0:21:40.660
out what causal
dependencies exist between actions.

0:21:40.660,0:21:41.920
Because those may
not be immediately obvious,

0:21:41.920,0:21:47.770
and have to be inferred from
the behavior of the system first.

0:21:50.230,0:21:54.520
Actions can be conditional, but
actions can also contradict each other.

0:21:54.520,0:21:57.100
So they can
be mutually exclusive.

0:21:57.100,0:21:59.680
That an action
can never be executed

0:21:59.680,0:22:01.810
if another action would
also be possible, for example.

0:22:01.810,0:22:05.620
Are there restrictions
on resource consumption?

0:22:05.620,0:22:09.700
In the example just now, there would
be no obvious resource except for the

0:22:09.700,0:22:13.030
food, except for the forks, if
you also model them as a resource.

0:22:13.030,0:22:20.560
In the snack vending machine example mentioned earlier,
one might also ask whether there are inherent

0:22:20.560,0:22:24.880
constraints on the presence and
consumption of resources in the system.

0:22:24.880,0:22:31.300
So, for example, is the system designed in such
a way that it is never possible (not only

0:22:31.300,0:22:37.330
for external reasons, but for reasons of the system itself)
to have more than ten coins in the cash register?

0:22:46.190,0:22:50.600
What is written below does not
occur in this example, but will be

0:22:50.600,0:22:53.570
of interest to us
in the further course.

0:22:53.570,0:23:02.060
Namely that a Petri net
described also finitely can correspond

0:23:02.060,0:23:05.390
to an
infinitely unfolded system.

0:23:05.390,0:23:11.720
So it is possible to have Petri nets
which are finite (i.e. fit completely on a

0:23:11.720,0:23:18.500
slide, like the example just now),
but whose flat state diagram, in the

0:23:18.500,0:23:22.190
sense of the Wolf-Ziege-Kohlkopf graph,
for example, would be infinite.

0:23:22.190,0:23:26.420
And infinite things are
always hard to deal with,

0:23:26.420,0:23:31.520
but some of these analyses for Petri
nets are feasible (for the Petri net) even

0:23:31.520,0:23:34.820
if the corresponding flat
state diagram were infinite.

0:23:35.660,0:23:40.670
Then we derive a great advantage
from working with Petri nets instead

0:23:40.670,0:23:47.390
of naively just forming flat
state diagrams all the time.

0:23:47.390,0:23:51.860
We will encounter this when we
go deeper into the individual analyses.

0:23:51.860,0:23:54.770
We will not deal with
all of them formally here,

0:23:54.770,0:24:03.260
but at least the first, the second,
and to some extent the last two.

0:24:13.370,0:24:20.630
Practical applications then exist in many
areas of computer science or other fields.

0:24:20.630,0:24:26.690
There is the notion
of business process modeling.

0:24:26.690,0:24:30.740
There Petri nets or
related modeling mechanisms are applied.

0:24:30.740,0:24:36.830
Modeling of web services,
description of graphical user interfaces,

0:24:36.830,0:24:41.120
process modeling for operating systems
(where concurrency plays an important role).

0:24:41.120,0:24:44.810
In engineering applications
and many other

0:24:44.810,0:24:49.550
areas Petri nets or
similar mechanisms are applicable.

0:24:49.550,0:24:54.890
We will repeatedly pick up individual
simplified examples that may fall into

0:24:54.890,0:24:57.710
these domains, even
in the exercise mode.

0:24:57.710,0:25:06.860
We will not schedule an in-depth look at
exactly one of these domains in the lecture.

0:25:06.860,0:25:09.290
These are simply
a few keywords in

0:25:09.290,0:25:14.030
which domains Petri nets
or related mechanisms (such as

0:25:14.030,0:25:17.270
also the activity graphs)
can be found in practice.

0:25:17.270,0:25:20.630
We will of course look
at a few simple examples.
